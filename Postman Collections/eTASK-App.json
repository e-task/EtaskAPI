{
  "info": {
    "_postman_id": "e4df0b0d-1a84-4ba6-bdc4-e05077a8e29f",
    "name": "eTASK App",
    "description": "App relevant ressources provides by the eTASK API",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Debtors Query",
      "item": [
        {
          "name": "AccessTokenFromPM",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "759fdadc-9172-4040-b012-8a3d20ff3298",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "//Set EtaskAoiToken as environmentVariable\r",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"PM_SM_TOKEN\", jsonData.EtaskApiToken);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "23bb9a04-ad9a-4282-bcde-0a86d093a485",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "basic",
              "basic": {
                "username": "servicemeldung",
                "password": "Applogin1!"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://pm.etask.de/API/Core/Token?language=en",
              "protocol": "https",
              "host": [
                "pm",
                "etask",
                "de"
              ],
              "path": [
                "API",
                "Core",
                "Token"
              ],
              "query": [
                {
                  "key": "language",
                  "value": "en"
                }
              ]
            },
            "description": "Get AccessToken from pm.etask.de to query the customers-url by its cloudcode"
          },
          "response": []
        },
        {
          "name": "URLbyCloudcode_ENTW",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d67226da-05ac-4abe-ba78-3dd83475bc23",
                "exec": [
                  "//Check if you get a url th the requested Code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "2155280a-69d0-42cc-8dbb-f6cfe47a2fd1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "EtaskApiToken",
                "value": "{{PM_SM_TOKEN}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "https://pm.etask.de/API/Client/Url?code=ENTW&appName=Postman-Runner&appVersion=1.0",
              "protocol": "https",
              "host": [
                "pm",
                "etask",
                "de"
              ],
              "path": [
                "API",
                "Client",
                "Url"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "ENTW"
                },
                {
                  "key": "appName",
                  "value": "Postman-Runner"
                },
                {
                  "key": "appVersion",
                  "value": "1.0"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "URLbyCloudcode_SHOW",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "93ecef6c-d792-4fee-bcf0-c9e92f2dfdd1",
                "exec": [
                  "//Check if you get a url th the requested Code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "43bfa489-91bf-45eb-be39-95478eea87d8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "EtaskApiToken",
                "value": "{{PM_SM_TOKEN}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "https://pm.etask.de/API/Client/Url?code=SHOW&appName=Postman-Runner&appVersion=1.0",
              "protocol": "https",
              "host": [
                "pm",
                "etask",
                "de"
              ],
              "path": [
                "API",
                "Client",
                "Url"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "SHOW"
                },
                {
                  "key": "appName",
                  "value": "Postman-Runner"
                },
                {
                  "key": "appVersion",
                  "value": "1.0"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "URLbyCloudcode_CSSB",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "068afebd-7bac-475c-9967-fcc60004aa7a",
                "exec": [
                  "//Check if you get a url th the requested Code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "cffaa5d8-de1f-4302-a98c-13d1015e684a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "EtaskApiToken",
                "value": "{{PM_SM_TOKEN}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "https://pm.etask.de/API/Client/Url?code=CSSB&appName=Postman-Runner&appVersion=1.0",
              "protocol": "https",
              "host": [
                "pm",
                "etask",
                "de"
              ],
              "path": [
                "API",
                "Client",
                "Url"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "CSSB"
                },
                {
                  "key": "appName",
                  "value": "Postman-Runner"
                },
                {
                  "key": "appVersion",
                  "value": "1.0"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "URLbyCloudcode_BYCS",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "126e44ed-b684-4128-ac2d-09408d5b2010",
                "exec": [
                  "//Check if you get a url th the requested Code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "57509dfc-ae0b-4944-b377-e7c5b85c2991",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "EtaskApiToken",
                "type": "text",
                "value": "{{PM_SM_TOKEN}}"
              }
            ],
            "url": {
              "raw": "https://pm.etask.de/API/Client/Url?code=BYCS&appName=Postman-Runner&appVersion=1.0",
              "protocol": "https",
              "host": [
                "pm",
                "etask",
                "de"
              ],
              "path": [
                "API",
                "Client",
                "Url"
              ],
              "query": [
                {
                  "key": "code",
                  "value": "BYCS"
                },
                {
                  "key": "appName",
                  "value": "Postman-Runner"
                },
                {
                  "key": "appVersion",
                  "value": "1.0"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "_postman_id": "e7d02f3d-c8c9-44f5-b53f-b9c842cc65c3",
      "description": "Delivers a bunch of URLs to some customer test codes"
    },
    {
      "name": "Login/Token",
      "item": [
        {
          "name": "Access Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2436bd61-ae50-4f6a-ab8f-b6c694c7852d",
                "exec": [
                  "// Check if you get a 200 response\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "// Set the eTASK API Token as Var\r",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"API-Token\", jsonData.EtaskApiToken);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "189ec450-0f68-40c5-9d6f-380d994ae588",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "basic",
              "basic": {
                "password": "{{Password}}",
                "username": "{{User}}"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{Portal-URL}}/API/Core/Token?language=en",
              "host": [
                "{{Portal-URL}}"
              ],
              "path": [
                "API",
                "Core",
                "Token"
              ],
              "query": [
                {
                  "key": "language",
                  "value": "en"
                }
              ]
            },
            "description": "Get AccessToken from pm.etask.de to query the customers-url by its cloudcode"
          },
          "response": []
        }
      ],
      "_postman_id": "575d2b3b-5d09-49c5-9df7-a65e248887ba"
    },
    {
      "name": "Servicereport-App",
      "item": [
        {
          "name": "Buildings",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7806b173-acf6-476f-805d-d7337530688f",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var buildingData = JSON.parse(responseBody);\r",
                  "pm.environment.set(\"Buildings\",buildingData);\r",
                  "\r",
                  "//Check if all mandatory fields are filled correct \r",
                  "pm.test(\"Mandatory building fields filled\", () => {\r",
                  "    _.each(buildingData, (arrItem) => {\r",
                  "        //Number\r",
                  "            pm.expect(arrItem).to.have.property('Number');\r",
                  "            pm.expect(arrItem.Number).to.exist;\r",
                  "            pm.expect(arrItem.Number).not.eq(null);\r",
                  "            //pm.expect(arrItem.Number).to.be.a('number');\r",
                  "\r",
                  "        //Name\r",
                  "            pm.expect(arrItem).to.have.property('Name');\r",
                  "            pm.expect(arrItem.Name).to.exist;\r",
                  "            pm.expect(arrItem.Name).not.eq(null);\r",
                  "\r",
                  "        //City\r",
                  "            pm.expect(arrItem).to.have.property('City');\r",
                  "            pm.expect(arrItem.City).to.exist;\r",
                  "            pm.expect(arrItem.City).not.eq(null);\r",
                  "\r",
                  "        //ZipCode\r",
                  "            pm.expect(arrItem).to.have.property('ZipCode');\r",
                  "            pm.expect(arrItem.ZipCode).to.exist;\r",
                  "            pm.expect(arrItem.ZipCode).not.eq(null);\r",
                  "            //pm.expect(arrItem.ZipCode).to.be.a('number');\r",
                  "        \r",
                  "        //StreetNumber\r",
                  "            pm.expect(arrItem).to.have.property('StreetNumber');\r",
                  "            pm.expect(arrItem.StreetNumber).to.exist;\r",
                  "            pm.expect(arrItem.StreetNumber).not.eq(null);\r",
                  "            //pm.expect(arrItem.StreetNumber).to.be.a('number');\r",
                  "        \r",
                  "        //CostCenter\r",
                  "            pm.expect(arrItem).to.have.property('CostCenter');\r",
                  "            pm.expect(arrItem.CostCenter).to.exist;\r",
                  "            pm.expect(arrItem.CostCenter).not.eq(null);\r",
                  "            //pm.expect(arrItem.CostCenter).to.be.a('number');\r",
                  "    })\r",
                  "})\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "6e83da65-ef34-4a6b-99a2-a384eca728e1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "EtaskApiToken",
                "value": "{{API-Token}}",
                "description": "eTASK.Api Token authentication"
              }
            ],
            "url": "{{Portal-URL}}/API/Services/Report/Buildings"
          },
          "response": [
            {
              "id": "098cfefb-3457-4b13-820b-9fcb06ff2244",
              "name": "requested building not found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": "{{baseUrl}}/Services/Report/Buildings"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "5a02911b-1a27-4593-94a1-bf36ff2db974",
              "name": "All useable buildings.",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": "{{baseUrl}}/Services/Report/Buildings"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "[\n {\n  \"Guid\": \"<guid>\",\n  \"Links\": {\n   \"Self\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"UploadDocument\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"UploadImage\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"Download\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"Delete\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   }\n  },\n  \"HasDocumentsSection\": \"<boolean>\",\n  \"HasImagesSection\": \"<boolean>\",\n  \"Code\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"Number\": \"<string>\",\n  \"City\": \"<string>\",\n  \"ZipCode\": \"<string>\",\n  \"StreetNumber\": \"<string>\",\n  \"Street\": \"<string>\",\n  \"CostCenter\": \"<string>\",\n  \"Site\": {\n   \"City\": \"<string>\",\n   \"ZipCode\": \"<string>\",\n   \"Street\": \"<string>\",\n   \"Name\": \"<string>\",\n   \"Code\": \"<string>\"\n  },\n  \"Coordinates\": {\n   \"Longitude\": \"<decimal>\",\n   \"Latitude\": \"<decimal>\"\n  }\n },\n {\n  \"Guid\": \"<guid>\",\n  \"Links\": {\n   \"Self\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"UploadDocument\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"UploadImage\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"Download\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"Delete\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   }\n  },\n  \"HasDocumentsSection\": \"<boolean>\",\n  \"HasImagesSection\": \"<boolean>\",\n  \"Code\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"Number\": \"<string>\",\n  \"City\": \"<string>\",\n  \"ZipCode\": \"<string>\",\n  \"StreetNumber\": \"<string>\",\n  \"Street\": \"<string>\",\n  \"CostCenter\": \"<string>\",\n  \"Site\": {\n   \"City\": \"<string>\",\n   \"ZipCode\": \"<string>\",\n   \"Street\": \"<string>\",\n   \"Name\": \"<string>\",\n   \"Code\": \"<string>\"\n  },\n  \"Coordinates\": {\n   \"Longitude\": \"<decimal>\",\n   \"Latitude\": \"<decimal>\"\n  }\n }\n]"
            },
            {
              "id": "898a1976-8936-4389-a022-0e87d76e6336",
              "name": "see response for further information.",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": "{{baseUrl}}/Services/Report/Buildings"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"Message\": \"<string>\",\n \"InnerException\": {\n  \"value\": \"<Circular reference to #/components/schemas/Exception detected>\"\n },\n \"StackTrace\": \"<string>\",\n \"Source\": \"<string>\",\n \"ErrorCode\": \"<string>\",\n \"ErrorContent\": {\n  \"value\": \"<Circular reference to #/components/schemas/Exception detected>\"\n }\n}"
            }
          ]
        },
        {
          "name": "Rooms",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c54b6138-2967-4f92-9264-8f97200469c3",
                "exec": [
                  "//Request all rooms to a buildingcode from environment var \"Buildings\"\r",
                  "var buildingCodes = pm.environment.get(\"Buildings\");\r",
                  "        for (item in buildingCodes){\r",
                  "            var building =buildingCodes[item];\r",
                  "            pm.environment.set(\"BuildingCode\",building.Code);\r",
                  "                pm.test(\"Status code is 200\", function () {\r",
                  "                pm.response.to.have.status(200);\r",
                  "                });\r",
                  "\r",
                  "        };\r",
                  "\r",
                  "//Check if Code,Name,Number and Floor are delivered as expected\r",
                  "var roomData = JSON.parse(responseBody); \r",
                  "pm.test(\"Mandatory room fields filled\", () => {\r",
                  "    _.each(roomData, (arrItem) => {\r",
                  "        //Code\r",
                  "            pm.expect(arrItem).to.have.property('Code');\r",
                  "            pm.expect(arrItem.Code).to.exist;\r",
                  "            pm.expect(arrItem.Code).not.eq(null);\r",
                  "            //pm.expect(arrItem.Code).to.be.a('number');\r",
                  "\r",
                  "        //Name\r",
                  "            pm.expect(arrItem).to.have.property('Name');\r",
                  "            pm.expect(arrItem.Name).to.exist;\r",
                  "            pm.expect(arrItem.Name).not.eq(null);\r",
                  "            //pm.expect(arrItem.Name).to.be.a('number');\r",
                  "\r",
                  "        //Code\r",
                  "            pm.expect(arrItem).to.have.property('Number');\r",
                  "            pm.expect(arrItem.Number).to.exist;\r",
                  "            pm.expect(arrItem.Number).not.eq(null);\r",
                  "            //pm.expect(arrItem.Number).to.be.a('number');\r",
                  "\r",
                  "        //Floor\r",
                  "            pm.expect(arrItem).to.have.property('Floor');\r",
                  "            pm.expect(arrItem.Floor).to.exist;\r",
                  "            pm.expect(arrItem.Floor).not.eq(null);\r",
                  "            //pm.expect(arrItem.Floor).to.be.a('number');\r",
                  "\r",
                  "\r",
                  "    })\r",
                  "})\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "1dddf43d-401d-45cd-97a1-e25c64aa41ec",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "f36fe9ba-4cc7-4005-8c2a-f559560fd0df",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "EtaskApiToken",
                "value": "{{API-Token}}",
                "description": "eTASK.Api Token authentication"
              }
            ],
            "url": {
              "raw": "{{Portal-URL}}/API/Services/Report/Buildings/:building/Rooms",
              "host": [
                "{{Portal-URL}}"
              ],
              "path": [
                "API",
                "Services",
                "Report",
                "Buildings",
                ":building",
                "Rooms"
              ],
              "query": [
                {
                  "key": "",
                  "value": "",
                  "type": "text",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "building",
                  "value": "{{BuildingCode}}",
                  "type": "string",
                  "description": "(Required) distinct code"
                }
              ]
            }
          },
          "response": [
            {
              "id": "2774d635-8689-41e3-ac93-663ea7a93c5d",
              "name": "All rooms of the building specified (by {code}).",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/Services/Report/Buildings/:building/Rooms",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "Services",
                    "Report",
                    "Buildings",
                    ":building",
                    "Rooms"
                  ],
                  "variable": [
                    {
                      "key": "building"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "[\n {\n  \"Guid\": \"<guid>\",\n  \"Links\": {\n   \"Self\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"UploadDocument\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"UploadImage\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"Download\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"Delete\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   }\n  },\n  \"HasDocumentsSection\": \"<boolean>\",\n  \"HasImagesSection\": \"<boolean>\",\n  \"Code\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"Number\": \"<string>\",\n  \"TypeOfUsage\": \"<string>\",\n  \"Floor\": {\n   \"Code\": \"<string>\",\n   \"Name\": \"<string>\",\n   \"Building\": {\n    \"Guid\": \"<guid>\",\n    \"Links\": {\n     \"Self\": {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"method\": \"<string>\"\n     },\n     \"UploadDocument\": {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"method\": \"<string>\"\n     },\n     \"UploadImage\": {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"method\": \"<string>\"\n     },\n     \"Download\": {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"method\": \"<string>\"\n     },\n     \"Delete\": {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"method\": \"<string>\"\n     }\n    },\n    \"HasDocumentsSection\": \"<boolean>\",\n    \"HasImagesSection\": \"<boolean>\",\n    \"Code\": \"<string>\",\n    \"Name\": \"<string>\",\n    \"Number\": \"<string>\",\n    \"City\": \"<string>\",\n    \"ZipCode\": \"<string>\",\n    \"StreetNumber\": \"<string>\",\n    \"Street\": \"<string>\",\n    \"CostCenter\": \"<string>\",\n    \"Site\": {\n     \"City\": \"<string>\",\n     \"ZipCode\": \"<string>\",\n     \"Street\": \"<string>\",\n     \"Name\": \"<string>\",\n     \"Code\": \"<string>\"\n    },\n    \"Coordinates\": {\n     \"Longitude\": \"<decimal>\",\n     \"Latitude\": \"<decimal>\"\n    }\n   }\n  }\n },\n {\n  \"Guid\": \"<guid>\",\n  \"Links\": {\n   \"Self\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"UploadDocument\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"UploadImage\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"Download\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"Delete\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   }\n  },\n  \"HasDocumentsSection\": \"<boolean>\",\n  \"HasImagesSection\": \"<boolean>\",\n  \"Code\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"Number\": \"<string>\",\n  \"TypeOfUsage\": \"<string>\",\n  \"Floor\": {\n   \"Code\": \"<string>\",\n   \"Name\": \"<string>\",\n   \"Building\": {\n    \"Guid\": \"<guid>\",\n    \"Links\": {\n     \"Self\": {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"method\": \"<string>\"\n     },\n     \"UploadDocument\": {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"method\": \"<string>\"\n     },\n     \"UploadImage\": {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"method\": \"<string>\"\n     },\n     \"Download\": {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"method\": \"<string>\"\n     },\n     \"Delete\": {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"method\": \"<string>\"\n     }\n    },\n    \"HasDocumentsSection\": \"<boolean>\",\n    \"HasImagesSection\": \"<boolean>\",\n    \"Code\": \"<string>\",\n    \"Name\": \"<string>\",\n    \"Number\": \"<string>\",\n    \"City\": \"<string>\",\n    \"ZipCode\": \"<string>\",\n    \"StreetNumber\": \"<string>\",\n    \"Street\": \"<string>\",\n    \"CostCenter\": \"<string>\",\n    \"Site\": {\n     \"City\": \"<string>\",\n     \"ZipCode\": \"<string>\",\n     \"Street\": \"<string>\",\n     \"Name\": \"<string>\",\n     \"Code\": \"<string>\"\n    },\n    \"Coordinates\": {\n     \"Longitude\": \"<decimal>\",\n     \"Latitude\": \"<decimal>\"\n    }\n   }\n  }\n }\n]"
            },
            {
              "id": "42649442-642a-41c7-a36d-6f5c74838b96",
              "name": "not found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/Services/Report/Buildings/:building/Rooms",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "Services",
                    "Report",
                    "Buildings",
                    ":building",
                    "Rooms"
                  ],
                  "variable": [
                    {
                      "key": "building"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "b1321aa6-2a99-40d1-97c6-e8356ec770ae",
              "name": "see response for further information",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/Services/Report/Buildings/:building/Rooms",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "Services",
                    "Report",
                    "Buildings",
                    ":building",
                    "Rooms"
                  ],
                  "variable": [
                    {
                      "key": "building"
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"Message\": \"<string>\",\n \"InnerException\": {\n  \"value\": \"<Circular reference to #/components/schemas/Exception detected>\"\n },\n \"StackTrace\": \"<string>\",\n \"Source\": \"<string>\",\n \"ErrorCode\": \"<string>\",\n \"ErrorContent\": {\n  \"value\": \"<Circular reference to #/components/schemas/Exception detected>\"\n }\n}"
            }
          ]
        },
        {
          "name": "Categories",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "be361b18-9602-4cb3-9048-4e9bc6699486",
                "exec": [
                  "//Check if you get a 200\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//Check if Code and Name are delivered as expected\r",
                  "var categoryData = JSON.parse(responseBody); \r",
                  "pm.environment.set(\"Categories\",categoryData);\r",
                  "pm.test(\"Mandatory category fields filled\", () => {\r",
                  "    _.each(categoryData, (arrItem) => {\r",
                  "        //console.log(arrItem.Code)\r",
                  "        //Code\r",
                  "        pm.expect(arrItem).to.have.property('Code');\r",
                  "        pm.expect(arrItem.Code).to.exist;\r",
                  "        pm.expect(arrItem.Code).not.eq(null);\r",
                  "\r",
                  "        //Name\r",
                  "        pm.expect(arrItem).to.have.property('Name');\r",
                  "        pm.expect(arrItem.Name).to.exist;\r",
                  "        pm.expect(arrItem.Name).not.eq(null);\r",
                  "    })\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "03f09d9d-64c7-4d07-9123-62ab1bcdeb53",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "EtaskApiToken",
                "value": "{{API-Token}}",
                "description": "eTASK.Api Token authentication"
              }
            ],
            "url": "{{Portal-URL}}/API/Services/Report/Categories"
          },
          "response": [
            {
              "id": "6a57b9cd-98e1-42aa-b46f-22104fc6395f",
              "name": "not found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": "{{baseUrl}}/Services/Report/Categories"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "767aacf3-a529-40d5-9459-ac3816e8ac4b",
              "name": "List of all categories that can be used in the report",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": "{{baseUrl}}/Services/Report/Categories"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "[\n {\n  \"Guid\": \"<guid>\",\n  \"Links\": {\n   \"Self\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"UploadDocument\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"UploadImage\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"Download\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"Delete\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   }\n  },\n  \"HasDocumentsSection\": \"<boolean>\",\n  \"HasImagesSection\": \"<boolean>\",\n  \"Code\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Color\": \"<string>\",\n  \"Icon\": \"<byte>\"\n },\n {\n  \"Guid\": \"<guid>\",\n  \"Links\": {\n   \"Self\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"UploadDocument\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"UploadImage\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"Download\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"Delete\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   }\n  },\n  \"HasDocumentsSection\": \"<boolean>\",\n  \"HasImagesSection\": \"<boolean>\",\n  \"Code\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"Description\": \"<string>\",\n  \"Color\": \"<string>\",\n  \"Icon\": \"<byte>\"\n }\n]"
            },
            {
              "id": "9614a24b-814f-4d00-9c39-e9c4aba01be5",
              "name": "see response for further information",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": "{{baseUrl}}/Services/Report/Categories"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"Message\": \"<string>\",\n \"InnerException\": {\n  \"value\": \"<Circular reference to #/components/schemas/Exception detected>\"\n },\n \"StackTrace\": \"<string>\",\n \"Source\": \"<string>\",\n \"ErrorCode\": \"<string>\",\n \"ErrorContent\": {\n  \"value\": \"<Circular reference to #/components/schemas/Exception detected>\"\n }\n}"
            }
          ]
        },
        {
          "name": "Subcategories",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2cf8c1f3-17ff-40b4-b8d1-948ed0a91f90",
                "exec": [
                  "//Check if responsebody is empty\r",
                  "pm.test(\"There is something in the response body :-)\", function () {\r",
                  "    var res = (_.isEmpty(responseBody));\r",
                  "    pm.expect(res).to.be.false\r",
                  "})\r",
                  "\r",
                  "//Request all subcategories to a categorycode from environment var \"Category\"\r",
                  "var categoryCodes = pm.environment.get(\"Categories\");\r",
                  "        for (item in categoryCodes){\r",
                  "            var category = categoryCodes[item];\r",
                  "            pm.environment.set(\"CategoryCode\",category.Code);\r",
                  "            //console.log(category.Code)\r",
                  "                pm.test(\"Status code is 200\", function () {\r",
                  "                pm.response.to.have.status(200);\r",
                  "                });\r",
                  "\r",
                  "        };\r",
                  "\r",
                  "//Check if Code and Name are delivered as expected\r",
                  "var subcategoryData = JSON.parse(responseBody); \r",
                  "pm.test(\"Mandatory subcategory fields filled\", () => {\r",
                  "    _.each(subcategoryData, (arrItem) => {\r",
                  "        console.log(\"hallo\")\r",
                  "        //Code\r",
                  "        pm.expect(arrItem).to.have.property('Code');\r",
                  "        pm.expect(arrItem.Code).to.exist;\r",
                  "        pm.expect(arrItem.Code).not.eq(null);\r",
                  "\r",
                  "        //Name\r",
                  "        pm.expect(arrItem).to.have.property('Name');\r",
                  "        pm.expect(arrItem.Name).to.exist;\r",
                  "        pm.expect(arrItem.Name).not.eq(null);\r",
                  "    })\r",
                  "})\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "d584eff0-318e-4f7b-a4e7-97f6b28f1153",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "EtaskApiToken",
                "value": "{{API-Token}}",
                "description": "eTASK.Api Token authentication"
              }
            ],
            "url": {
              "raw": "{{Portal-URL}}/API/Services/Report/Categories/:category/SubCategories",
              "host": [
                "{{Portal-URL}}"
              ],
              "path": [
                "API",
                "Services",
                "Report",
                "Categories",
                ":category",
                "SubCategories"
              ],
              "variable": [
                {
                  "key": "category",
                  "value": "{{CategoryCode}}",
                  "type": "string",
                  "description": "(Required) distinct code of category"
                }
              ]
            }
          },
          "response": [
            {
              "id": "30109afa-8918-428c-94d5-4a14e0ce9b63",
              "name": "All subcategories of the specified ({code}) category.",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/Services/Report/Categories/:category/SubCategories",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "Services",
                    "Report",
                    "Categories",
                    ":category",
                    "SubCategories"
                  ],
                  "variable": [
                    {
                      "key": "category"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "[\n {\n  \"Guid\": \"<guid>\",\n  \"Links\": {\n   \"Self\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"UploadDocument\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"UploadImage\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"Download\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"Delete\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   }\n  },\n  \"HasDocumentsSection\": \"<boolean>\",\n  \"HasImagesSection\": \"<boolean>\",\n  \"Code\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"Category\": \"<string>\"\n },\n {\n  \"Guid\": \"<guid>\",\n  \"Links\": {\n   \"Self\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"UploadDocument\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"UploadImage\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"Download\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   },\n   \"Delete\": {\n    \"href\": \"<string>\",\n    \"rel\": \"<string>\",\n    \"method\": \"<string>\"\n   }\n  },\n  \"HasDocumentsSection\": \"<boolean>\",\n  \"HasImagesSection\": \"<boolean>\",\n  \"Code\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"Category\": \"<string>\"\n }\n]"
            },
            {
              "id": "8219e2bd-6d64-490c-b603-7774d0eb7d56",
              "name": "not found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/Services/Report/Categories/:category/SubCategories",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "Services",
                    "Report",
                    "Categories",
                    ":category",
                    "SubCategories"
                  ],
                  "variable": [
                    {
                      "key": "category"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "8550c887-9f7d-4032-9829-d89947f7ca97",
              "name": "see response for further information",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/Services/Report/Categories/:category/SubCategories",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "Services",
                    "Report",
                    "Categories",
                    ":category",
                    "SubCategories"
                  ],
                  "variable": [
                    {
                      "key": "category"
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"Message\": \"<string>\",\n \"InnerException\": {\n  \"value\": \"<Circular reference to #/components/schemas/Exception detected>\"\n },\n \"StackTrace\": \"<string>\",\n \"Source\": \"<string>\",\n \"ErrorCode\": \"<string>\",\n \"ErrorContent\": {\n  \"value\": \"<Circular reference to #/components/schemas/Exception detected>\"\n }\n}"
            }
          ]
        },
        {
          "name": "Minimal Date&Time",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d3657d93-86c7-4ca8-8780-ff74830189bc",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "b3f7b2c3-0288-4e54-b56f-e68ca01445a4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "EtaskApiToken",
                "value": "{{API-Token}}",
                "description": "eTASK.Api Token authentication"
              }
            ],
            "url": {
              "raw": "{{Portal-URL}}/API/Services/Report/Categories/:category/MinimalDate/:building",
              "host": [
                "{{Portal-URL}}"
              ],
              "path": [
                "API",
                "Services",
                "Report",
                "Categories",
                ":category",
                "MinimalDate",
                ":building"
              ],
              "variable": [
                {
                  "key": "category",
                  "value": "007_PB",
                  "type": "string"
                },
                {
                  "key": "building",
                  "value": "KORN-Korneuburg",
                  "type": "string",
                  "description": "(Required) distinct code of building"
                }
              ]
            }
          },
          "response": [
            {
              "id": "0f811a78-b88a-4cdb-8034-fe36205b4e46",
              "name": "delivers the minimum possible desired date from the combination of building ({building}) and category ({category})",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/Services/Report/Categories/:category/MinimalDate/:building",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "Services",
                    "Report",
                    "Categories",
                    ":category",
                    "MinimalDate",
                    ":building"
                  ],
                  "variable": [
                    {
                      "key": "category"
                    },
                    {
                      "key": "building"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<dateTime>\""
            },
            {
              "id": "7b0aaf34-274c-4fec-80b1-c0e50fdad454",
              "name": "see response for further information",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/Services/Report/Categories/:category/MinimalDate/:building",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "Services",
                    "Report",
                    "Categories",
                    ":category",
                    "MinimalDate",
                    ":building"
                  ],
                  "variable": [
                    {
                      "key": "category"
                    },
                    {
                      "key": "building"
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"Message\": \"<string>\",\n \"InnerException\": {\n  \"value\": \"<Circular reference to #/components/schemas/Exception detected>\"\n },\n \"StackTrace\": \"<string>\",\n \"Source\": \"<string>\",\n \"ErrorCode\": \"<string>\",\n \"ErrorContent\": {\n  \"value\": \"<Circular reference to #/components/schemas/Exception detected>\"\n }\n}"
            },
            {
              "id": "8e68bb05-7e5c-4f76-a6fa-18128e577abb",
              "name": "minimum possible desired date not found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/Services/Report/Categories/:category/MinimalDate/:building",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "Services",
                    "Report",
                    "Categories",
                    ":category",
                    "MinimalDate",
                    ":building"
                  ],
                  "variable": [
                    {
                      "key": "category"
                    },
                    {
                      "key": "building"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        },
        {
          "name": "Nearest Building to Bremen",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "90b33ad7-97ba-43e1-b035-bef39cd505f1",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "ce7cf841-df73-425c-88a1-4f12250da233",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "EtaskApiToken",
                "value": "{{API-Token}}",
                "description": "eTASK.Api Token authentication"
              }
            ],
            "url": {
              "raw": "{{Portal-URL}}/API/Services/Report/Buildings/:latitude/:longitude",
              "host": [
                "{{Portal-URL}}"
              ],
              "path": [
                "API",
                "Services",
                "Report",
                "Buildings",
                ":latitude",
                ":longitude"
              ],
              "variable": [
                {
                  "key": "latitude",
                  "value": "53.185688",
                  "type": "string",
                  "description": "(Required) of current position"
                },
                {
                  "key": "longitude",
                  "value": "8.662127",
                  "type": "string",
                  "description": "(Required) of current position"
                }
              ]
            }
          },
          "response": [
            {
              "id": "1fc01d21-0021-4246-a88f-092d7edc6e0c",
              "name": "nearest building to the coordinates given",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/Services/Report/Buildings/:latitude/:longitude",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "Services",
                    "Report",
                    "Buildings",
                    ":latitude",
                    ":longitude"
                  ],
                  "variable": [
                    {
                      "key": "latitude"
                    },
                    {
                      "key": "longitude"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"Guid\": \"<guid>\",\n \"Links\": {\n  \"Self\": {\n   \"href\": \"<string>\",\n   \"rel\": \"<string>\",\n   \"method\": \"<string>\"\n  },\n  \"UploadDocument\": {\n   \"href\": \"<string>\",\n   \"rel\": \"<string>\",\n   \"method\": \"<string>\"\n  },\n  \"UploadImage\": {\n   \"href\": \"<string>\",\n   \"rel\": \"<string>\",\n   \"method\": \"<string>\"\n  },\n  \"Download\": {\n   \"href\": \"<string>\",\n   \"rel\": \"<string>\",\n   \"method\": \"<string>\"\n  },\n  \"Delete\": {\n   \"href\": \"<string>\",\n   \"rel\": \"<string>\",\n   \"method\": \"<string>\"\n  }\n },\n \"HasDocumentsSection\": \"<boolean>\",\n \"HasImagesSection\": \"<boolean>\",\n \"Code\": \"<string>\",\n \"Name\": \"<string>\",\n \"Number\": \"<string>\",\n \"City\": \"<string>\",\n \"ZipCode\": \"<string>\",\n \"StreetNumber\": \"<string>\",\n \"Street\": \"<string>\",\n \"CostCenter\": \"<string>\",\n \"Site\": {\n  \"City\": \"<string>\",\n  \"ZipCode\": \"<string>\",\n  \"Street\": \"<string>\",\n  \"Name\": \"<string>\",\n  \"Code\": \"<string>\"\n },\n \"Coordinates\": {\n  \"Longitude\": \"<decimal>\",\n  \"Latitude\": \"<decimal>\"\n }\n}"
            },
            {
              "id": "264198ed-58aa-476c-a5f6-a9586f886e06",
              "name": "see response for further information.",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/Services/Report/Buildings/:latitude/:longitude",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "Services",
                    "Report",
                    "Buildings",
                    ":latitude",
                    ":longitude"
                  ],
                  "variable": [
                    {
                      "key": "latitude"
                    },
                    {
                      "key": "longitude"
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"Message\": \"<string>\",\n \"InnerException\": {\n  \"value\": \"<Circular reference to #/components/schemas/Exception detected>\"\n },\n \"StackTrace\": \"<string>\",\n \"Source\": \"<string>\",\n \"ErrorCode\": \"<string>\",\n \"ErrorContent\": {\n  \"value\": \"<Circular reference to #/components/schemas/Exception detected>\"\n }\n}"
            }
          ]
        },
        {
          "name": "Create a specific service ticket",
          "_postman_id": "d4a06551-8139-45e3-a876-feba630b61e4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "description": "eTASK.Api Token authentication",
                "key": "EtaskApiToken",
                "value": "{{API-Token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\n    \"Category\": \"007_PB\", //Category-Code\n\n    //\"SubCategory\": \"nost\",\n    //\"SubCategoryName\": \"pari\",\n    \"Description\": \"Das ist ein PM-Test\",\n    \"Building\": \"CGN-AKS2\", //Building-Code\n    \"Room\": \"CGN-AKS2-OG01-R101\", //Room-Code\n\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "{{Portal-URL}}/API/Services/Ticket",
            "description": "{\"Category\": \"001 BCF-Test\",\"Description\": \"Beschreibung\",\"Building\": \"CGN-AKS2\"}"
          },
          "response": [
            {
              "id": "efba0293-6d60-4e7e-8de7-feca81061bbe",
              "name": "Das neu erzeugte Ticket",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"Guid\": \"dolor ut esse\",\n    \"Links\": {\n        \"Self\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"UploadDocument\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"UploadImage\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Download\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"Delete\": {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n    },\n    \"HasDocumentsSection\": false,\n    \"HasImagesSection\": false,\n    \"TicketNumber\": \"329$\",\n    \"Category\": \"pari\",\n    \"CategoryName\": \"id U\",\n    \"SubCategory\": \"adip\",\n    \"SubCategoryName\": \"quis\",\n    \"Description\": \"id d\",\n    \"Building\": \"exer\",\n    \"Room\": \"null\",\n    \"Requestor\": \"ex nulla occaecat\",\n    \"ReportingDate\": \"dolor\",\n    \"DesiredDate\": \"amet\",\n    \"Documents\": [\n        {\n            \"ContentType\": \"labo\",\n            \"Size\": 36743470,\n            \"Name\": \"magn\"\n        },\n        {\n            \"ContentType\": \"ipsu\",\n            \"Size\": -21161592,\n            \"Name\": \"dese\"\n        }\n    ],\n    \"Images\": [\n        {\n            \"ContentType\": \"Exce\",\n            \"Size\": 53873517,\n            \"Name\": \"nost\"\n        },\n        {\n            \"ContentType\": \"eius\",\n            \"Size\": -2691124,\n            \"Name\": \"qui \"\n        }\n    ],\n    \"Annotaions\": [\n        {\n            \"Recipients\": \"id fugiat incididunt pariatur nisi\",\n            \"CcRecipients\": \"Ut eli\",\n            \"Date\": \"quis proident id velit\",\n            \"User\": \"velit quis est\",\n            \"Text\": \"officia adipisicing consectetur\",\n            \"Subject\": \"veniam\",\n            \"UserEmail\": \"veniam consectetur\"\n        },\n        {\n            \"Recipients\": \"laborum consectetur exercitation sed\",\n            \"CcRecipients\": \"tempor officia id magna nisi\",\n            \"Date\": \"pariatur Lorem ea sunt\",\n            \"User\": \"do incididunt nostrud eu deserunt\",\n            \"Text\": \"aliquip\",\n            \"Subject\": \"ipsum in ex pariatur\",\n            \"UserEmail\": \"pariatur eu ad\"\n        }\n    ],\n    \"Coordinates\": {\n        \"Longitude\": 45932044.19652063,\n        \"Latitude\": -25480693.556560397\n    }\n}"
                },
                "url": "{{baseUrl}}/Services/Ticket"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"Guid\": \"ex ullamco mollit t\",\n \"Links\": {\n  \"Self\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"UploadDocument\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"UploadImage\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Download\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"Delete\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  }\n },\n \"HasDocumentsSection\": true,\n \"HasImagesSection\": false,\n \"TicketNumber\": \"538g\",\n \"Category\": \"labo\",\n \"CategoryName\": \"comm\",\n \"SubCategory\": \"magn\",\n \"SubCategoryName\": \"aliq\",\n \"Description\": \"Lore\",\n \"Building\": \"labo\",\n \"Room\": \"ut s\",\n \"Requestor\": \"ad\",\n \"ReportingDate\": \"velit incididunt qui\",\n \"DesiredDate\": \"ex aliquip dolor mollit Lorem\",\n \"Documents\": [\n  {\n   \"ContentType\": \"Ut d\",\n   \"Size\": -87632379,\n   \"Name\": \"sed \"\n  },\n  {\n   \"ContentType\": \"in e\",\n   \"Size\": -70949634,\n   \"Name\": \"Duis\"\n  }\n ],\n \"Images\": [\n  {\n   \"ContentType\": \"ex t\",\n   \"Size\": 3867437,\n   \"Name\": \"in e\"\n  },\n  {\n   \"ContentType\": \"offi\",\n   \"Size\": 4998089,\n   \"Name\": \"anim\"\n  }\n ],\n \"Annotaions\": [\n  {\n   \"Recipients\": \"veniam qui Excepteur\",\n   \"CcRecipients\": \"nisi\",\n   \"Date\": \"adipisicing magn\",\n   \"User\": \"sunt proident\",\n   \"Text\": \"deserunt nostrud\",\n   \"Subject\": \"ea non\",\n   \"UserEmail\": \"quis mollit Excepteur\"\n  },\n  {\n   \"Recipients\": \"ad dolo\",\n   \"CcRecipients\": \"id consequat\",\n   \"Date\": \"velit nisi\",\n   \"User\": \"laborum fugiat\",\n   \"Text\": \"et sunt enim nulla\",\n   \"Subject\": \"dolore c\",\n   \"UserEmail\": \"sunt in ut\"\n  }\n ],\n \"Coordinates\": {\n  \"Longitude\": 38914759.52379048,\n  \"Latitude\": 45972778.39136043\n }\n}"
            }
          ]
        }
      ],
      "_postman_id": "2e3ea242-5c78-44ea-8a84-a59c697920a5",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "0110285c-196d-4bdd-bddc-b7ff348cda2a",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "d229cbc5-d296-465a-9b46-24a9201d8b85",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "9f41d5e1-cd1d-4717-9d4b-9684007a2c3a",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "7eaefab2-e40e-43fc-9bcf-9799871bb693",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "id": "3783f338-06b0-4443-8380-9411b7734785",
      "key": "variable",
      "value": "1",
      "type": "string"
    }
  ]
}