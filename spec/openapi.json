{
  "x-generator": "NSwag v12.1.0.0 (NJsonSchema v9.13.28.0 (Newtonsoft.Json v12.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "eTASK Universal BIM API",
    "description": "Welcome to the reference for the eTASK REST API.\r\n\r\neTASK is an application for managing your Real Estate portfolio. We have decided to gain you access also via REST to your data. REST is a web-service protocol that enables an easy and rapid development by using everyday HTTP and JSON technology.\r\n\r\nThe eTASK REST API provides a broad set of operations and resources. The  unified eTASK Universal BIM API enables you to create powerful real estate solutions for a variety of scenarios, e.g.\r\n\r\n* Access and share all information and documents\r\n* Navigate thour your BIM models\r\n* Drive your workflows\r\n* Integrate App on Android oder iOs Devices\r\n* Connect to you sensors or your favourite IoT Platform\r\n\r\nThis API  offers a simple, fast and secure Access, based on the Openapi specification. Write Apps, integrate you data into other systems and digitize you workflow with the help of our API.\r\n\r\nWant to share your opinion on how our API works for you? Tell us how you feel about using our API and what we can do to make it better.\r\n\r\n\r\n# Getting started\r\n\r\n*__Note__: If you need help using eTASK's APIs, then the best place to start is the issue list in the our [Github repository for the API](https://github.com/e-task/EtaskAPI). eTASK's support team for our application isn't able to answer questions about the API. Better, you contact the DEV team via GitHub, if you have a technical question.*\r\n\r\n## HTTP verbs\r\nWhere possible, the API strives to use the following HTTP verbs for each action.\r\n\r\n* __HEAD__ : Can be issued against any resource to get just the HTTP header info.\r\n* __GET__  : Used for retrieving resources.\r\n* __POST__ : Used for creating resources.\r\n* __PUT__   : Used for replacing resources or collections.\r\n* __DELETE__: Used for deleting resources.\r\n\r\n## Request Content-Type\r\nThe Content-Type for POST and PUT requests must be set to application/json, otherwise you may receive a bad request response.\r\n\r\n```\r\nContent-Type: application/json\r\n```\r\n\r\n## Encoding\r\nThe client must include in the header of every request this encoding: \r\n```\r\nAccept-Charset: utf-8\r\n```\r\nThe response will deliver every request in the encoding of UTF-8. \r\n\r\n## Encoding for URL parameters\r\nWhen using GET operation to fetch entries from a form via any REST client, URL parameters may be required. Examples of URL parameters are qualification (q), fields, limit and sort. While using any of these parameters with request URL, these must be encoded properly and then used in the request. Else results may not be as expected.\r\nTo encode URL parameters, use any third party tool or site such as https://www.w3schools.com/html/html_urlencode.asp, where non-encoded URL parameters can be converted into encoded URL parameter string. Use these encoded parameters to send a REST request.\r\nFor example, for sending qualification on a form like this:\r\n```\r\n 'Incident Number' = 'INC000000000701'\r\n```\r\nthe request should be encoded and sent like this:\r\n```\r\n%27Incident+Number%27+%3D+%22INC000000000701%22\r\n```\r\n## Timezones\r\nSome requests allow for specifying timestamps or generate timestamps with time zone information. We apply the following rules, in order of priority, to determine timezone information for API calls. Explicitly provide an ISO 8601 timestamp with timezone information. For API calls that allow for a timestamp to be specified, we use that exact timestamp. The provisioning of a timestamp in every field of type date or datetime is reqired in the API. If, for whatever reason, there is no information about the timezone in the request, the API assumes the timezone '+01:00' in creating the answer. \r\n\r\nSo, this request\r\n\r\n```\r\n2019-02-27T15:05:06\r\n```\r\nwill be processes like this\r\n\r\n```\r\n2019-02-27T15:05:06+01:00\r\n```\r\n\r\nand the time information in the responses will be returned for the timezone '+01:00'.\r\n\r\n## HTTP Status Codes for Success and  Errors\r\nThe response from eTASK will have an HTTP status code that will help you determine the status of the response.  When an error occurs, our API will return an appropriate HTTP status code and an error message description. Our API uses the appropriate HTTP status code to indicate the type of success or the problem that was encountered. \r\n\r\nEvery ressource has documented HTTP status codes for the response with special meaning. Please check the documentation of the ressource you use.\r\n\r\nBelow is a general overview of what those codes mean, along with some suggestions that might help you fix things.\r\n\r\n### 200 Success\r\nThe request has succeeded. The information returned with the response is dependent on the method used in the request.\r\n\r\n### 201 Created\r\nThe request has been fulfilled and resulted in a new resource being created.\r\n\r\n### 400 Bad Request\r\nThis is likely to be caused by a programming error on your part. Check the requirements of the endpoint you're calling in the HTTP API Reference.\r\n\r\n### 401 Unauthorized\r\nThis means that we were not able to authenticate you based on the information provided in the request. Make sure you're sending your access_token and your credentials based on the security specification of our API. The section 'Authentication and API Keys' gives a detailed explanation of how this works.\r\n\r\nIf you're connecting using OAuth, don't forget that tokens can expire. These will need to be refreshed. Not doing so can also result in getting a 401 error.\r\n\r\nIf you need to check your application's system parameters page. This will include the token for your application.\r\n\r\n### 403 Forbidden\r\nYou don't have access to whatever it is you're asking for.\r\n\r\n### 404 Not Found\r\nYou're asking for something that doesn't exist. Check the URL that you're requesting.\r\n\r\n### 406 Not Accessible\r\nThis means it wasn't possible to respond with the format you requested. Check the Accept header that you're sending.\r\n\r\n### 422 Unprocessable Entity\r\nThe request was valid, but one or more of the parameters looks a little screwy. It's possible that you sent data in the wrong format. One example would be providing an array when we expected a string.\r\n\r\n### 429 Too Many Requests\r\nTo keep the amount of spam on eTASK as low as possible, our API limits the rate at which you can perform certain actions. Read the Rate Limits page to find out more.\r\n\r\n### 500 Internal Server Error\r\nUh-oh. Something went wrong on our side. We're sorry. We keep track of these, and we'll try to fix it! If possible, read the server log to get more information about this error.\r\n\r\n### 503 Service Unavailable\r\nThis means that we're having some trouble, and our servers are too busy to handle your request. You'll want to check for these and give your user a chance to retry the request. We keep track of these and try to make sure they don't happen.\r\n\r\n### 504 Gateway Timeout\r\nThis means the request is taking too long. However, it doesn't always mean that we didn't receive your request. We could still be chugging away on the changes you made, and this means that you may want to check before retrying.\r\n\r\n## Cross origin resource sharing\r\nThe API supports Cross Origin Resource Sharing (CORS) for AJAX requests from any origin. You can read the CORS W3C Recommendation, or this intro from the HTML 5 Security Guide.\r\nHere's a sample request sent from a browser hitting http://example.com:\r\n\r\n```\r\ncurl -i 'https://developer.etask.de' -H Origin: 'http://example.com'\r\nHTTP/1.1 302 Found\r\nAccess-Control-Allow-Origin: *\r\nAccess-Control-Expose-Headers: ETag, Link, X-Etask-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\r\n```\r\n\r\nThis is what the CORS preflight request looks like:\r\n```\r\ncurl -i 'https://developer.etask.de' -H Origin: 'http://example.com' -X OPTIONS\r\nHTTP/1.1 204 No Content\r\nAccess-Control-Allow-Origin: *\r\nAccess-Control-Allow-Headers: Authorization, Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since, X-Etask-OTP, X-Requested-With\r\nAccess-Control-Allow-Methods: GET, POST, PATCH, PUT, DELETE\r\nAccess-Control-Expose-Headers: ETag, Link, X-Etask-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\r\nAccess-Control-Max-Age: 86400\r\n```\r\n\r\n## User agent required\r\nAll API requests MUST include a valid User-Agent header. Requests with no User-Agent header will be rejected. We request that you use your eTASK username, or the name of your application, for the User-Agent header value. This allows us to contact you if there are problems.\r\nHere's an example:\r\n\r\n```\r\nUser-Agent: My-Awesome-Etask-App.etask.io\r\n```\r\n\r\ncURL sends a valid User-Agent header by default. If you provide an invalid User-Agent header via cURL (or via an alternative client), you will receive a 403 Forbidden response:\r\n\r\n```\r\ncurl -iH User-Agent: 'https://developer.etask.de/meta'\r\nHTTP/1.0 403 Forbidden\r\nConnection: close\r\nContent-Type: text/html\r\nRequest forbidden by administrative rules.\r\nPlease make sure your request has a User-Agent header.\r\nCheck https://developer.etask.de for other possible causes.\r\n```\r\n\r\n## Conditional requests\r\nMost responses return an ETag header. Many responses also return a Last-Modified header. You can use the values of these headers to make subsequent requests to those resources using the If-None-Match and If-Modified-Since headers, respectively. If the resource has not changed, the server will return a 304 Not Modified.\r\nNote: Making a conditional request and receiving a 304 response does not count against your Rate Limit, so we encourage you to use it whenever possible.\r\n```\r\ncurl -i 'https://developer.etask.de/user'\r\n```\r\n\r\n```\r\nHTTP/1.1 200 OK\r\nCache-Control: private, max-age=60\r\nETag: '644b5b0155e6404a9cc4bd9d8b1ae730'\r\nLast-Modified: Thu, 05 Jul 2012 15:31:30 GMT\r\nStatus: 200 OK\r\nVary: Accept, Authorization, Cookie\r\nX-RateLimit-Limit: 5000\r\nX-RateLimit-Remaining: 4996\r\nX-RateLimit-Reset: 1372700873\r\n```\r\n```\r\ncurl -i 'https://developer.etask.de/user' -H 'If-None-Match: '644b5b0155e6404a9cc4bd9d8b1ae730'\r\n```\r\n```\r\nHTTP/1.1 304 Not Modified\r\nCache-Control: private, max-age=60\r\nETag: '644b5b0155e6404a9cc4bd9d8b1ae730'\r\nLast-Modified: Thu, 05 Jul 2012 15:31:30 GMT\r\nStatus: 304 Not Modified\r\nVary: Accept, Authorization, Cookie\r\nX-RateLimit-Limit: 5000\r\nX-RateLimit-Remaining: 4996\r\nX-RateLimit-Reset: 1372700873\r\n```\r\n```\r\ncurl -i 'https://developer.etask.de/user' -H 'If-Modified-Since: Thu, 05 Jul 2012 15:31:30 GMT'\r\n```\r\n```\r\nHTTP/1.1 304 Not Modified\r\nCache-Control: private, max-age=60\r\nLast-Modified: Thu, 05 Jul 2012 15:31:30 GMT\r\nStatus: 304 Not Modified\r\nVary: Accept, Authorization, Cookie\r\nX-RateLimit-Limit: 5000\r\nX-RateLimit-Remaining: 4996\r\nX-RateLimit-Reset: 1372700873\r\n```\r\n\r\n## Authentication and API Keys\r\nEvery customer of eTASK hat access to the API of the own instance based on his license model.\r\nIn the cloud environment the api is available from the public internet.\r\n\r\n### Server URI\r\nThis API documentation uses the URI https://developer.etask.de as a placeholder for all other eTASK installations. Please replace https://developer.etask.de with the server URI of you eTASK installation. To try out the API, connect directly to your own eTASK installation or contact us to get access to a developer installation.\r\n\r\n### TLS connection\r\nThe API requires connections based on Transport Layer Security (TLS), more known under it's predecessor designation Secure Sockets Layer (SSL). The server MUST provide a valid certificate, that is accepted by the client's computer. If the client's computer does not trust the certificate, the API will return a 403 Forbidden response:\r\n\r\n```\r\ncurl -iH User-Agent: 'https://developer.etask.de/meta'\r\nHTTP/1.0 403 Forbidden\r\nConnection: close\r\nContent-Type: text/html\r\nRequest forbidden by administrative rules.\r\nPlease make sure your server provides a valid TLS certificate.\r\nCheck https://developer.etask.de for other possible causes.\r\n```\r\n\r\nRequests, that do not even use the https protocol will not be answered.\r\n\r\n### Application Key and User Token\r\nEach application that wants to access the API need an individual Application Key per application (e.g. your mobile App).\r\n\r\nIn addition every request is secured by an user token that is created per login and user. This ensures the individual user rights per API ressource.\r\n\r\n### Request an Application Key\r\nPlease visit our [customer portal](https://kundencenter.etask.de) to request an Application API key for your instance. In your submission, please be prepared to provide the following:\r\n*\tYour instance uri\r\n*\tThe 'live date' of your app and feature that integrates with the API. Briefly describe how the eTASK API integrates with your app and provide screenshots of the implementation.\r\n*\tAs per our section 5 A of our terms of service, we require all apps that use the eTASK API to conspicuously display 'Powered By eTASK' attribution marks where the API is utilized. You can find approved official logo marks here. Please provide screenshots of your attribution placement.\r\n\r\n### User Token\r\n\r\nTo obtain a user token, please call the following ressource:\r\n```\r\ncurl -iH User-Agent: 'https://developer.etask.de/API/login'\r\n```\r\n\r\nIf you have any question, please feel free to contact us.  Please submit API corrections via github issues. Please see our terms of service for any restrictions on using the service. We also recommend using the Postman or another client tool for restfull API’s view the API responses.\r\n\r\n## Ressource Names\r\nMost API endpoints provide the same content as their HTML counterparts in the related eTASK FM Portal. For example, the URL /rooms serves a list of rooms, the /api/rooms API provides the same information in JSON format. Please be aware, that the configuration of user rights and other UI related configuration of the FM-Portal can show less information, that the API.\r\n\r\n## Openapi file\r\nThe API is documented, based on the [specification](https://github.com/OAI/OpenAPI-Specification) of the [Openapi Initiative](https://www.openapis.org/) fka as Swagger.\r\n\r\nWe provide direct access to our [Openapi 3.0 file](/docs/openapi.json). Use it in you favourite API tool. \r\n\r\nWe are exited about what you will build upon our API. Have you made anything exciting? __Please share [here](https://twitter.com/etask)__.",
    "termsOfService": "TermsOfService",
    "contact": {
      "name": "eTASK Immobilien Software GmbH",
      "email": "api@etask.de"
    },
    "license": {
      "name": "License",
      "url": "https://www.etask.de/wp-content/uploads/eTASK_AGB.pdf"
    },
    "version": "2019",
    "x-logo": {
      "url": "https://developer.etask.de/Logo_eTASK_300px.png",
      "backgroundColor": "#fafafa",
      "altText": "eTASK logo"
    }
  },
  "servers": [
    {
      "url": "https://dotnet.etask.de/API/"
    },
    {
      "url": "https://dotnet.etask.de/API",
      "description": "Development server of eTASK"
    }
  ],
  "paths": {
    "/AllocationPersonnelToHseqFunctions": {
      "get": {
        "tags": [
          "AllocationPersonnelToHseqFunctions"
        ],
        "summary": "Fetch the list of all 'AllocationPersonnelToHseqFunctions'.",
        "operationId": "AllocationPersonnelToHseqFunctions_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AllocationPersonnelToHseqFunction"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'AllocationPersonnelToHseqFunctions' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "AllocationPersonnelToHseqFunctions"
        ],
        "summary": "Create a new 'AllocationPersonnelToHseqFunction'.",
        "operationId": "AllocationPersonnelToHseqFunctions_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'AllocationPersonnelToHseqFunction' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AllocationPersonnelToHseqFunction"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'AllocationPersonnelToHseqFunction' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AllocationPersonnelToHseqFunction"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'AllocationPersonnelToHseqFunction' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/AllocationPersonnelToHseqFunctions/{id}": {
      "get": {
        "tags": [
          "AllocationPersonnelToHseqFunctions"
        ],
        "summary": "Fetch a 'AllocationPersonnelToHseqFunction' by its identifier.",
        "operationId": "AllocationPersonnelToHseqFunctions_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AllocationPersonnelToHseqFunction"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'AllocationPersonnelToHseqFunction' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "AllocationPersonnelToHseqFunctions"
        ],
        "summary": "Delete a 'AllocationPersonnelToHseqFunction' by given identifier",
        "operationId": "AllocationPersonnelToHseqFunctions_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'AllocationPersonnelToHseqFunction' by given identifier was deleted"
          },
          "400": {
            "description": "'AllocationPersonnelToHseqFunction' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "AllocationPersonnelToHseqFunctions"
        ],
        "summary": "Update an specified 'AllocationPersonnelToHseqFunction' by given identifier.",
        "operationId": "AllocationPersonnelToHseqFunctions_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'AllocationPersonnelToHseqFunction' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AllocationPersonnelToHseqFunction"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'AllocationPersonnelToHseqFunction' by given identifier"
          },
          "404": {
            "description": "'AllocationPersonnelToHseqFunction' not found!"
          },
          "400": {
            "description": "if 'AllocationPersonnelToHseqFunction' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/DataSourcesOfPersonDatas": {
      "get": {
        "tags": [
          "DataSourcesOfPersonDatas"
        ],
        "summary": "Fetch the list of all 'DataSourcesOfPersonDatas'.",
        "operationId": "DataSourcesOfPersonDatas_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/DataSourcesOfPersonData"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'DataSourcesOfPersonDatas' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "DataSourcesOfPersonDatas"
        ],
        "summary": "Create a new 'DataSourcesOfPersonData'.",
        "operationId": "DataSourcesOfPersonDatas_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'DataSourcesOfPersonData' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DataSourcesOfPersonData"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'DataSourcesOfPersonData' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DataSourcesOfPersonData"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'DataSourcesOfPersonData' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/DataSourcesOfPersonDatas/{id}": {
      "get": {
        "tags": [
          "DataSourcesOfPersonDatas"
        ],
        "summary": "Fetch a 'DataSourcesOfPersonData' by its identifier.",
        "operationId": "DataSourcesOfPersonDatas_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DataSourcesOfPersonData"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'DataSourcesOfPersonData' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "DataSourcesOfPersonDatas"
        ],
        "summary": "Delete a 'DataSourcesOfPersonData' by given identifier",
        "operationId": "DataSourcesOfPersonDatas_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'DataSourcesOfPersonData' by given identifier was deleted"
          },
          "400": {
            "description": "'DataSourcesOfPersonData' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "DataSourcesOfPersonDatas"
        ],
        "summary": "Update an specified 'DataSourcesOfPersonData' by given identifier.",
        "operationId": "DataSourcesOfPersonDatas_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'DataSourcesOfPersonData' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DataSourcesOfPersonData"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'DataSourcesOfPersonData' by given identifier"
          },
          "404": {
            "description": "'DataSourcesOfPersonData' not found!"
          },
          "400": {
            "description": "if 'DataSourcesOfPersonData' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Salutations": {
      "get": {
        "tags": [
          "Salutations"
        ],
        "summary": "Fetch the list of all 'Salutations'.",
        "operationId": "Salutations_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/Salutation"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Salutations' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "Salutations"
        ],
        "summary": "Create a new 'Salutation'.",
        "operationId": "Salutations_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Salutation' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Salutation"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Salutation' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Salutation"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'Salutation' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Salutations/{id}": {
      "get": {
        "tags": [
          "Salutations"
        ],
        "summary": "Fetch a 'Salutation' by its identifier.",
        "operationId": "Salutations_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Salutation"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'Salutation' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Salutations"
        ],
        "summary": "Delete a 'Salutation' by given identifier",
        "operationId": "Salutations_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'Salutation' by given identifier was deleted"
          },
          "400": {
            "description": "'Salutation' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "Salutations"
        ],
        "summary": "Update an specified 'Salutation' by given identifier.",
        "operationId": "Salutations_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Salutation' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Salutation"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'Salutation' by given identifier"
          },
          "404": {
            "description": "'Salutation' not found!"
          },
          "400": {
            "description": "if 'Salutation' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/RentalMonths": {
      "get": {
        "tags": [
          "RentalMonths"
        ],
        "summary": "Fetch the list of all 'RentalMonths'.",
        "operationId": "RentalMonths_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/RentalMonth"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'RentalMonths' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "RentalMonths"
        ],
        "summary": "Create a new 'RentalMonth'.",
        "operationId": "RentalMonths_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'RentalMonth' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RentalMonth"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'RentalMonth' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/RentalMonth"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'RentalMonth' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/RentalMonths/{id}": {
      "get": {
        "tags": [
          "RentalMonths"
        ],
        "summary": "Fetch a 'RentalMonth' by its identifier.",
        "operationId": "RentalMonths_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/RentalMonth"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'RentalMonth' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "RentalMonths"
        ],
        "summary": "Delete a 'RentalMonth' by given identifier",
        "operationId": "RentalMonths_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'RentalMonth' by given identifier was deleted"
          },
          "400": {
            "description": "'RentalMonth' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "RentalMonths"
        ],
        "summary": "Update an specified 'RentalMonth' by given identifier.",
        "operationId": "RentalMonths_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'RentalMonth' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RentalMonth"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'RentalMonth' by given identifier"
          },
          "404": {
            "description": "'RentalMonth' not found!"
          },
          "400": {
            "description": "if 'RentalMonth' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/EanCategories": {
      "get": {
        "tags": [
          "EanCategories"
        ],
        "summary": "Fetch the list of all 'EanCategories'.",
        "operationId": "EanCategories_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/EanCategory"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'EanCategories' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "EanCategories"
        ],
        "summary": "Create a new 'EanCategory'.",
        "operationId": "EanCategories_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'EanCategory' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EanCategory"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'EanCategory' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/EanCategory"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'EanCategory' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/EanCategories/{id}": {
      "get": {
        "tags": [
          "EanCategories"
        ],
        "summary": "Fetch a 'EanCategory' by its identifier.",
        "operationId": "EanCategories_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/EanCategory"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'EanCategory' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "EanCategories"
        ],
        "summary": "Delete a 'EanCategory' by given identifier",
        "operationId": "EanCategories_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'EanCategory' by given identifier was deleted"
          },
          "400": {
            "description": "'EanCategory' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "EanCategories"
        ],
        "summary": "Update an specified 'EanCategory' by given identifier.",
        "operationId": "EanCategories_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'EanCategory' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EanCategory"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'EanCategory' by given identifier"
          },
          "404": {
            "description": "'EanCategory' not found!"
          },
          "400": {
            "description": "if 'EanCategory' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/EanCategories/ByCode/{code}": {
      "get": {
        "tags": [
          "EanCategories"
        ],
        "summary": "Fetch a single 'EanCategory' based on its code.",
        "operationId": "EanCategories_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identfied by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/EanCategory"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'EanCategories' found!"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/InternalOrderEans": {
      "get": {
        "tags": [
          "InternalOrderEans"
        ],
        "summary": "Fetch the list of all 'InternalOrderEans'.",
        "operationId": "InternalOrderEans_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/InternalOrderEan"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'InternalOrderEans' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "InternalOrderEans"
        ],
        "summary": "Create a new 'InternalOrderEan'.",
        "operationId": "InternalOrderEans_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'InternalOrderEan' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/InternalOrderEan"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'InternalOrderEan' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InternalOrderEan"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'InternalOrderEan' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/InternalOrderEans/{id}": {
      "get": {
        "tags": [
          "InternalOrderEans"
        ],
        "summary": "Fetch a 'InternalOrderEan' by its identifier.",
        "operationId": "InternalOrderEans_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InternalOrderEan"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'InternalOrderEan' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "InternalOrderEans"
        ],
        "summary": "Delete a 'InternalOrderEan' by given identifier",
        "operationId": "InternalOrderEans_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'InternalOrderEan' by given identifier was deleted"
          },
          "400": {
            "description": "'InternalOrderEan' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "InternalOrderEans"
        ],
        "summary": "Update an specified 'InternalOrderEan' by given identifier.",
        "operationId": "InternalOrderEans_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'InternalOrderEan' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/InternalOrderEan"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'InternalOrderEan' by given identifier"
          },
          "404": {
            "description": "'InternalOrderEan' not found!"
          },
          "400": {
            "description": "if 'InternalOrderEan' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/InternalOrderEans/ByCode/{code}": {
      "get": {
        "tags": [
          "InternalOrderEans"
        ],
        "summary": "Fetch a single 'InternalOrderEan' based on its code.",
        "operationId": "InternalOrderEans_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identfied by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/InternalOrderEan"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'InternalOrderEans' found!"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/PaidOvertimeHours": {
      "get": {
        "tags": [
          "PaidOvertimeHours"
        ],
        "summary": "Fetch the list of all 'PaidOvertimeHours'.",
        "operationId": "PaidOvertimeHours_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/PaidOvertimeHour"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'PaidOvertimeHours' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "PaidOvertimeHours"
        ],
        "summary": "Create a new 'PaidOvertimeHour'.",
        "operationId": "PaidOvertimeHours_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'PaidOvertimeHour' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaidOvertimeHour"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'PaidOvertimeHour' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PaidOvertimeHour"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'PaidOvertimeHour' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/PaidOvertimeHours/{id}": {
      "get": {
        "tags": [
          "PaidOvertimeHours"
        ],
        "summary": "Fetch a 'PaidOvertimeHour' by its identifier.",
        "operationId": "PaidOvertimeHours_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PaidOvertimeHour"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'PaidOvertimeHour' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "PaidOvertimeHours"
        ],
        "summary": "Delete a 'PaidOvertimeHour' by given identifier",
        "operationId": "PaidOvertimeHours_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'PaidOvertimeHour' by given identifier was deleted"
          },
          "400": {
            "description": "'PaidOvertimeHour' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "PaidOvertimeHours"
        ],
        "summary": "Update an specified 'PaidOvertimeHour' by given identifier.",
        "operationId": "PaidOvertimeHours_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'PaidOvertimeHour' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaidOvertimeHour"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'PaidOvertimeHour' by given identifier"
          },
          "404": {
            "description": "'PaidOvertimeHour' not found!"
          },
          "400": {
            "description": "if 'PaidOvertimeHour' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/ProjectStaffs": {
      "get": {
        "tags": [
          "ProjectStaffs"
        ],
        "summary": "Fetch the list of all 'ProjectStaffs'.",
        "operationId": "ProjectStaffs_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/ProjectStaff"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'ProjectStaffs' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProjectStaffs"
        ],
        "summary": "Create a new 'ProjectStaff'.",
        "operationId": "ProjectStaffs_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'ProjectStaff' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ProjectStaff"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'ProjectStaff' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ProjectStaff"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'ProjectStaff' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/ProjectStaffs/{id}": {
      "get": {
        "tags": [
          "ProjectStaffs"
        ],
        "summary": "Fetch a 'ProjectStaff' by its identifier.",
        "operationId": "ProjectStaffs_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ProjectStaff"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'ProjectStaff' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ProjectStaffs"
        ],
        "summary": "Delete a 'ProjectStaff' by given identifier",
        "operationId": "ProjectStaffs_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'ProjectStaff' by given identifier was deleted"
          },
          "400": {
            "description": "'ProjectStaff' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProjectStaffs"
        ],
        "summary": "Update an specified 'ProjectStaff' by given identifier.",
        "operationId": "ProjectStaffs_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'ProjectStaff' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ProjectStaff"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'ProjectStaff' by given identifier"
          },
          "404": {
            "description": "'ProjectStaff' not found!"
          },
          "400": {
            "description": "if 'ProjectStaff' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/ProjectStaffs/ByCode/{code}": {
      "get": {
        "tags": [
          "ProjectStaffs"
        ],
        "summary": "Fetch a single 'ProjectStaff' based on its code.",
        "operationId": "ProjectStaffs_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identfied by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/ProjectStaff"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'ProjectStaffs' found!"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/ProjectStaffs/ByPerson/{personalId}": {
      "get": {
        "tags": [
          "ProjectStaffs"
        ],
        "summary": "Fetches a single 'ProjectStaff' by identified by underlaying 'Personal' identifier.",
        "operationId": "ProjectStaffs_GetByPersonalId",
        "parameters": [
          {
            "name": "personalId",
            "in": "path",
            "required": true,
            "description": "The personal identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ProjectStaff"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "ProjectStaff does not exist"
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Exception"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/OrderItems": {
      "get": {
        "tags": [
          "OrderItems"
        ],
        "summary": "Fetch the list of all 'OrderItems'.",
        "operationId": "OrderItems_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/OrderItem"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'OrderItems' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "OrderItems"
        ],
        "summary": "Create a new 'OrderItem'.",
        "operationId": "OrderItems_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'OrderItem' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/OrderItem"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'OrderItem' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/OrderItem"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'OrderItem' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/OrderItems/{id}": {
      "get": {
        "tags": [
          "OrderItems"
        ],
        "summary": "Fetch a 'OrderItem' by its identifier.",
        "operationId": "OrderItems_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/OrderItem"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'OrderItem' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "OrderItems"
        ],
        "summary": "Delete a 'OrderItem' by given identifier",
        "operationId": "OrderItems_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'OrderItem' by given identifier was deleted"
          },
          "400": {
            "description": "'OrderItem' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "OrderItems"
        ],
        "summary": "Update an specified 'OrderItem' by given identifier.",
        "operationId": "OrderItems_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'OrderItem' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/OrderItem"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'OrderItem' by given identifier"
          },
          "404": {
            "description": "'OrderItem' not found!"
          },
          "400": {
            "description": "if 'OrderItem' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/EtaskEntities": {
      "get": {
        "tags": [
          "EtaskEntities"
        ],
        "summary": "Fetch the list of all 'EtaskEntities'.",
        "operationId": "EtaskEntities_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/EtaskEntity"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'EtaskEntities' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "EtaskEntities"
        ],
        "summary": "Create a new 'EtaskEntity'.",
        "operationId": "EtaskEntities_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'EtaskEntity' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EtaskEntity"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'EtaskEntity' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/EtaskEntity"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'EtaskEntity' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/EtaskEntities/{id}": {
      "get": {
        "tags": [
          "EtaskEntities"
        ],
        "summary": "Fetch a 'EtaskEntity' by its identifier.",
        "operationId": "EtaskEntities_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/EtaskEntity"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'EtaskEntity' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "EtaskEntities"
        ],
        "summary": "Delete a 'EtaskEntity' by given identifier",
        "operationId": "EtaskEntities_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'EtaskEntity' by given identifier was deleted"
          },
          "400": {
            "description": "'EtaskEntity' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "EtaskEntities"
        ],
        "summary": "Update an specified 'EtaskEntity' by given identifier.",
        "operationId": "EtaskEntities_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'EtaskEntity' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EtaskEntity"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'EtaskEntity' by given identifier"
          },
          "404": {
            "description": "'EtaskEntity' not found!"
          },
          "400": {
            "description": "if 'EtaskEntity' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/AllocationMeterToMeterGroups": {
      "get": {
        "tags": [
          "AllocationMeterToMeterGroups"
        ],
        "summary": "Fetch the list of all 'AllocationMeterToMeterGroups'.",
        "operationId": "AllocationMeterToMeterGroups_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AllocationMeterToMeterGroup"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'AllocationMeterToMeterGroups' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "AllocationMeterToMeterGroups"
        ],
        "summary": "Create a new 'AllocationMeterToMeterGroup'.",
        "operationId": "AllocationMeterToMeterGroups_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'AllocationMeterToMeterGroup' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AllocationMeterToMeterGroup"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'AllocationMeterToMeterGroup' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AllocationMeterToMeterGroup"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'AllocationMeterToMeterGroup' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/AllocationMeterToMeterGroups/{id}": {
      "get": {
        "tags": [
          "AllocationMeterToMeterGroups"
        ],
        "summary": "Fetch a 'AllocationMeterToMeterGroup' by its identifier.",
        "operationId": "AllocationMeterToMeterGroups_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AllocationMeterToMeterGroup"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'AllocationMeterToMeterGroup' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "AllocationMeterToMeterGroups"
        ],
        "summary": "Delete a 'AllocationMeterToMeterGroup' by given identifier",
        "operationId": "AllocationMeterToMeterGroups_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'AllocationMeterToMeterGroup' by given identifier was deleted"
          },
          "400": {
            "description": "'AllocationMeterToMeterGroup' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "AllocationMeterToMeterGroups"
        ],
        "summary": "Update an specified 'AllocationMeterToMeterGroup' by given identifier.",
        "operationId": "AllocationMeterToMeterGroups_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'AllocationMeterToMeterGroup' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AllocationMeterToMeterGroup"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'AllocationMeterToMeterGroup' by given identifier"
          },
          "404": {
            "description": "'AllocationMeterToMeterGroup' not found!"
          },
          "400": {
            "description": "if 'AllocationMeterToMeterGroup' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/AllocationsRoomsToSupplyZones": {
      "get": {
        "tags": [
          "AllocationsRoomsToSupplyZones"
        ],
        "summary": "Fetch the list of all 'AllocationsRoomsToSupplyZones'.",
        "operationId": "AllocationsRoomsToSupplyZones_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AllocationsRoomsToSupplyZone"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'AllocationsRoomsToSupplyZones' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "AllocationsRoomsToSupplyZones"
        ],
        "summary": "Create a new 'AllocationsRoomsToSupplyZone'.",
        "operationId": "AllocationsRoomsToSupplyZones_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'AllocationsRoomsToSupplyZone' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AllocationsRoomsToSupplyZone"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'AllocationsRoomsToSupplyZone' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AllocationsRoomsToSupplyZone"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'AllocationsRoomsToSupplyZone' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/AllocationsRoomsToSupplyZones/{id}": {
      "get": {
        "tags": [
          "AllocationsRoomsToSupplyZones"
        ],
        "summary": "Fetch a 'AllocationsRoomsToSupplyZone' by its identifier.",
        "operationId": "AllocationsRoomsToSupplyZones_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AllocationsRoomsToSupplyZone"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'AllocationsRoomsToSupplyZone' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "AllocationsRoomsToSupplyZones"
        ],
        "summary": "Delete a 'AllocationsRoomsToSupplyZone' by given identifier",
        "operationId": "AllocationsRoomsToSupplyZones_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'AllocationsRoomsToSupplyZone' by given identifier was deleted"
          },
          "400": {
            "description": "'AllocationsRoomsToSupplyZone' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "AllocationsRoomsToSupplyZones"
        ],
        "summary": "Update an specified 'AllocationsRoomsToSupplyZone' by given identifier.",
        "operationId": "AllocationsRoomsToSupplyZones_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'AllocationsRoomsToSupplyZone' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AllocationsRoomsToSupplyZone"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'AllocationsRoomsToSupplyZone' by given identifier"
          },
          "404": {
            "description": "'AllocationsRoomsToSupplyZone' not found!"
          },
          "400": {
            "description": "if 'AllocationsRoomsToSupplyZone' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/AssignmentTechnicalDetailToMeters": {
      "get": {
        "tags": [
          "AssignmentTechnicalDetailToMeters"
        ],
        "summary": "Fetch the list of all 'AssignmentTechnicalDetailToMeters'.",
        "operationId": "AssignmentTechnicalDetailToMeters_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/AssignmentTechnicalDetailToMeter"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'AssignmentTechnicalDetailToMeters' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "AssignmentTechnicalDetailToMeters"
        ],
        "summary": "Create a new 'AssignmentTechnicalDetailToMeter'.",
        "operationId": "AssignmentTechnicalDetailToMeters_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'AssignmentTechnicalDetailToMeter' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AssignmentTechnicalDetailToMeter"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'AssignmentTechnicalDetailToMeter' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AssignmentTechnicalDetailToMeter"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'AssignmentTechnicalDetailToMeter' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/AssignmentTechnicalDetailToMeters/{id}": {
      "get": {
        "tags": [
          "AssignmentTechnicalDetailToMeters"
        ],
        "summary": "Fetch a 'AssignmentTechnicalDetailToMeter' by its identifier.",
        "operationId": "AssignmentTechnicalDetailToMeters_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AssignmentTechnicalDetailToMeter"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'AssignmentTechnicalDetailToMeter' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "AssignmentTechnicalDetailToMeters"
        ],
        "summary": "Delete a 'AssignmentTechnicalDetailToMeter' by given identifier",
        "operationId": "AssignmentTechnicalDetailToMeters_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'AssignmentTechnicalDetailToMeter' by given identifier was deleted"
          },
          "400": {
            "description": "'AssignmentTechnicalDetailToMeter' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "AssignmentTechnicalDetailToMeters"
        ],
        "summary": "Update an specified 'AssignmentTechnicalDetailToMeter' by given identifier.",
        "operationId": "AssignmentTechnicalDetailToMeters_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'AssignmentTechnicalDetailToMeter' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AssignmentTechnicalDetailToMeter"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'AssignmentTechnicalDetailToMeter' by given identifier"
          },
          "404": {
            "description": "'AssignmentTechnicalDetailToMeter' not found!"
          },
          "400": {
            "description": "if 'AssignmentTechnicalDetailToMeter' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/MeterHierarchies": {
      "get": {
        "tags": [
          "MeterHierarchies"
        ],
        "summary": "Fetch the list of all 'MeterHierarchies'.",
        "operationId": "MeterHierarchies_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/MeterHierarchy"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'MeterHierarchies' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "MeterHierarchies"
        ],
        "summary": "Create a new 'MeterHierarchy'.",
        "operationId": "MeterHierarchies_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'MeterHierarchy' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/MeterHierarchy"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'MeterHierarchy' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MeterHierarchy"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'MeterHierarchy' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/MeterHierarchies/{id}": {
      "get": {
        "tags": [
          "MeterHierarchies"
        ],
        "summary": "Fetch a 'MeterHierarchy' by its identifier.",
        "operationId": "MeterHierarchies_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MeterHierarchy"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'MeterHierarchy' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "MeterHierarchies"
        ],
        "summary": "Delete a 'MeterHierarchy' by given identifier",
        "operationId": "MeterHierarchies_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'MeterHierarchy' by given identifier was deleted"
          },
          "400": {
            "description": "'MeterHierarchy' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "MeterHierarchies"
        ],
        "summary": "Update an specified 'MeterHierarchy' by given identifier.",
        "operationId": "MeterHierarchies_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'MeterHierarchy' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/MeterHierarchy"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'MeterHierarchy' by given identifier"
          },
          "404": {
            "description": "'MeterHierarchy' not found!"
          },
          "400": {
            "description": "if 'MeterHierarchy' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/MeterReadings": {
      "get": {
        "tags": [
          "MeterReadings"
        ],
        "summary": "Fetch the list of all 'MeterReadings'.",
        "operationId": "MeterReadings_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/MeterReading"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'MeterReadings' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "MeterReadings"
        ],
        "summary": "Create a new 'MeterReading'.",
        "operationId": "MeterReadings_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'MeterReading' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/MeterReading"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'MeterReading' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MeterReading"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'MeterReading' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/MeterReadings/{id}": {
      "get": {
        "tags": [
          "MeterReadings"
        ],
        "summary": "Fetch a 'MeterReading' by its identifier.",
        "operationId": "MeterReadings_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MeterReading"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'MeterReading' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "MeterReadings"
        ],
        "summary": "Delete a 'MeterReading' by given identifier",
        "operationId": "MeterReadings_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'MeterReading' by given identifier was deleted"
          },
          "400": {
            "description": "'MeterReading' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "MeterReadings"
        ],
        "summary": "Update an specified 'MeterReading' by given identifier.",
        "operationId": "MeterReadings_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'MeterReading' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/MeterReading"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'MeterReading' by given identifier"
          },
          "404": {
            "description": "'MeterReading' not found!"
          },
          "400": {
            "description": "if 'MeterReading' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Meters": {
      "get": {
        "tags": [
          "Meters"
        ],
        "summary": "Fetch the list of all 'Meters'.",
        "operationId": "Meters_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/Meter"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Meters' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "Meters"
        ],
        "summary": "Create a new 'Meter'.",
        "operationId": "Meters_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Meter' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Meter"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Meter' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Meter"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'Meter' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Meters/{id}": {
      "get": {
        "tags": [
          "Meters"
        ],
        "summary": "Fetch a 'Meter' by its identifier.",
        "operationId": "Meters_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Meter"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'Meter' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Meters"
        ],
        "summary": "Delete a 'Meter' by given identifier",
        "operationId": "Meters_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'Meter' by given identifier was deleted"
          },
          "400": {
            "description": "'Meter' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "Meters"
        ],
        "summary": "Update an specified 'Meter' by given identifier.",
        "operationId": "Meters_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Meter' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Meter"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'Meter' by given identifier"
          },
          "404": {
            "description": "'Meter' not found!"
          },
          "400": {
            "description": "if 'Meter' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Meters/ByCode/{code}": {
      "get": {
        "tags": [
          "Meters"
        ],
        "summary": "Fetch a single 'Meter' based on its code.",
        "operationId": "Meters_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identfied by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/Meter"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Meters' found!"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/HseqFunctions": {
      "get": {
        "tags": [
          "HseqFunctions"
        ],
        "summary": "Fetch the list of all 'HseqFunctions'.",
        "operationId": "HseqFunctions_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/HseqFunction"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'HseqFunctions' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "HseqFunctions"
        ],
        "summary": "Create a new 'HseqFunction'.",
        "operationId": "HseqFunctions_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'HseqFunction' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/HseqFunction"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'HseqFunction' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/HseqFunction"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'HseqFunction' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/HseqFunctions/{id}": {
      "get": {
        "tags": [
          "HseqFunctions"
        ],
        "summary": "Fetch a 'HseqFunction' by its identifier.",
        "operationId": "HseqFunctions_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/HseqFunction"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'HseqFunction' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "HseqFunctions"
        ],
        "summary": "Delete a 'HseqFunction' by given identifier",
        "operationId": "HseqFunctions_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'HseqFunction' by given identifier was deleted"
          },
          "400": {
            "description": "'HseqFunction' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "HseqFunctions"
        ],
        "summary": "Update an specified 'HseqFunction' by given identifier.",
        "operationId": "HseqFunctions_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'HseqFunction' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/HseqFunction"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'HseqFunction' by given identifier"
          },
          "404": {
            "description": "'HseqFunction' not found!"
          },
          "400": {
            "description": "if 'HseqFunction' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/HseqFunctions/ByCode/{code}": {
      "get": {
        "tags": [
          "HseqFunctions"
        ],
        "summary": "Fetch a single 'HseqFunction' based on its code.",
        "operationId": "HseqFunctions_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identfied by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/HseqFunction"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'HseqFunctions' found!"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Applications": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Fetch the list of all 'Applications'.",
        "operationId": "Applications_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/Application"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Applications' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Create a new 'Application'.",
        "operationId": "Applications_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Application' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Application"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Application' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Application"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'Application' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Applications/{id}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Fetch a 'Application' by its identifier.",
        "operationId": "Applications_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Application"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'Application' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "Delete a 'Application' by given identifier",
        "operationId": "Applications_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'Application' by given identifier was deleted"
          },
          "400": {
            "description": "'Application' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "Applications"
        ],
        "summary": "Update an specified 'Application' by given identifier.",
        "operationId": "Applications_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Application' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Application"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'Application' by given identifier"
          },
          "404": {
            "description": "'Application' not found!"
          },
          "400": {
            "description": "if 'Application' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Applications/ByCode/{code}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Fetch a single 'Application' based on its code.",
        "operationId": "Applications_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identfied by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/Application"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Applications' found!"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Buildings": {
      "get": {
        "tags": [
          "Buildings"
        ],
        "summary": "Fetch the list of all 'Buildings'.",
        "operationId": "Buildings_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/Building"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Buildings' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "Buildings"
        ],
        "summary": "Create a new 'Building'.",
        "operationId": "Buildings_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Building' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Building"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Building' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Building"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'Building' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Buildings/{id}": {
      "get": {
        "tags": [
          "Buildings"
        ],
        "summary": "Fetch a 'Building' by its identifier.",
        "operationId": "Buildings_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Building"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'Building' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Buildings"
        ],
        "summary": "Delete a 'Building' by given identifier",
        "operationId": "Buildings_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'Building' by given identifier was deleted"
          },
          "400": {
            "description": "'Building' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "Buildings"
        ],
        "summary": "Update an specified 'Building' by given identifier.",
        "operationId": "Buildings_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Building' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Building"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'Building' by given identifier"
          },
          "404": {
            "description": "'Building' not found!"
          },
          "400": {
            "description": "if 'Building' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Buildings/ByCode/{code}": {
      "get": {
        "tags": [
          "Buildings"
        ],
        "summary": "Fetch a single 'Building' based on its code.",
        "operationId": "Buildings_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identfied by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/Building"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Buildings' found!"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Buildings/{id}/Picture": {
      "get": {
        "tags": [
          "Buildings"
        ],
        "summary": "Get a picture of building",
        "operationId": "Buildings_GetBuildingPicture",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The building Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "size",
            "in": "query",
            "required": true,
            "description": "Image size: 0-Original, 1-Medium, 2-Small.",
            "schema": {
              "$ref": "#/components/schemas/ImageSize"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Photo of the building",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Building"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Photo of the building not found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/CompanyAddresses": {
      "get": {
        "tags": [
          "CompanyAddresses"
        ],
        "summary": "Fetch the list of all 'CompanyAddresses'.",
        "operationId": "CompanyAddresses_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'CompanyAddresses' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "CompanyAddresses"
        ],
        "summary": "Create a new 'CompanyAddress'.",
        "operationId": "CompanyAddresses_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'CompanyAddress' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'CompanyAddress' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CompanyAddress"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'CompanyAddress' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/CompanyAddresses/{id}": {
      "get": {
        "tags": [
          "CompanyAddresses"
        ],
        "summary": "Fetch a 'CompanyAddress' by its identifier.",
        "operationId": "CompanyAddresses_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CompanyAddress"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'CompanyAddress' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "CompanyAddresses"
        ],
        "summary": "Delete a 'CompanyAddress' by given identifier",
        "operationId": "CompanyAddresses_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'CompanyAddress' by given identifier was deleted"
          },
          "400": {
            "description": "'CompanyAddress' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "CompanyAddresses"
        ],
        "summary": "Update an specified 'CompanyAddress' by given identifier.",
        "operationId": "CompanyAddresses_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'CompanyAddress' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'CompanyAddress' by given identifier"
          },
          "404": {
            "description": "'CompanyAddress' not found!"
          },
          "400": {
            "description": "if 'CompanyAddress' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/CompanyAddresses/ByCode/{code}": {
      "get": {
        "tags": [
          "CompanyAddresses"
        ],
        "summary": "Fetch a single 'CompanyAddress' based on its code.",
        "operationId": "CompanyAddresses_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identfied by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'CompanyAddresses' found!"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/CostCenters": {
      "get": {
        "tags": [
          "CostCenters"
        ],
        "summary": "Fetch the list of all 'CostCenters'.",
        "operationId": "CostCenters_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'CostCenters' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "CostCenters"
        ],
        "summary": "Create a new 'CostCenter'.",
        "operationId": "CostCenters_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'CostCenter' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'CostCenter' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CostCenter"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'CostCenter' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/CostCenters/{id}": {
      "get": {
        "tags": [
          "CostCenters"
        ],
        "summary": "Fetch a 'CostCenter' by its identifier.",
        "operationId": "CostCenters_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CostCenter"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'CostCenter' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "CostCenters"
        ],
        "summary": "Delete a 'CostCenter' by given identifier",
        "operationId": "CostCenters_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'CostCenter' by given identifier was deleted"
          },
          "400": {
            "description": "'CostCenter' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "CostCenters"
        ],
        "summary": "Update an specified 'CostCenter' by given identifier.",
        "operationId": "CostCenters_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'CostCenter' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'CostCenter' by given identifier"
          },
          "404": {
            "description": "'CostCenter' not found!"
          },
          "400": {
            "description": "if 'CostCenter' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/CostCenters/ByCode/{code}": {
      "get": {
        "tags": [
          "CostCenters"
        ],
        "summary": "Fetch a single 'CostCenter' based on its code.",
        "operationId": "CostCenters_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identfied by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'CostCenters' found!"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Floors": {
      "get": {
        "tags": [
          "Floors"
        ],
        "summary": "Fetch the list of all 'Floors'.",
        "operationId": "Floors_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/Floor"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Floors' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "Floors"
        ],
        "summary": "Create a new 'Floor'.",
        "operationId": "Floors_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Floor' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Floor"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Floor' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Floor"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'Floor' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Floors/{id}": {
      "get": {
        "tags": [
          "Floors"
        ],
        "summary": "Fetch a 'Floor' by its identifier.",
        "operationId": "Floors_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Floor"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'Floor' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Floors"
        ],
        "summary": "Delete a 'Floor' by given identifier",
        "operationId": "Floors_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'Floor' by given identifier was deleted"
          },
          "400": {
            "description": "'Floor' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "Floors"
        ],
        "summary": "Update an specified 'Floor' by given identifier.",
        "operationId": "Floors_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Floor' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Floor"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'Floor' by given identifier"
          },
          "404": {
            "description": "'Floor' not found!"
          },
          "400": {
            "description": "if 'Floor' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Floors/ByCode/{code}": {
      "get": {
        "tags": [
          "Floors"
        ],
        "summary": "Fetch a single 'Floor' based on its code.",
        "operationId": "Floors_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identfied by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/Floor"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Floors' found!"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Persons": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "Fetch the list of all 'Persons'.",
        "operationId": "Persons_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/Person"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Persons' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "Persons"
        ],
        "summary": "Create a new 'Person'.",
        "operationId": "Persons_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Person' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Person' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Person"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'Person' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Persons/{id}": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "Fetch a 'Person' by its identifier.",
        "operationId": "Persons_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Person"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'Person' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Persons"
        ],
        "summary": "Delete a 'Person' by given identifier",
        "operationId": "Persons_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'Person' by given identifier was deleted"
          },
          "400": {
            "description": "'Person' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "Persons"
        ],
        "summary": "Update an specified 'Person' by given identifier.",
        "operationId": "Persons_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Person' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'Person' by given identifier"
          },
          "404": {
            "description": "'Person' not found!"
          },
          "400": {
            "description": "if 'Person' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Persons/ByEmail/{email}": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "Get list of persons by email",
        "operationId": "Persons_GetByEmail",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "description": "Email of the person(s) in the format email@example.de",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of related objects, that shall be returned additionally",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of persons specified by requested email address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/Person"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No person exists with such an eMail addresss"
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Exception"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Persons/ByLogin/{LoginName}": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "Get user by loginname",
        "operationId": "Persons_GetByLoginName",
        "parameters": [
          {
            "name": "LoginName",
            "in": "path",
            "required": true,
            "description": "LoginName of the user as a string",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of related objects, that shall be returned additionally",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a persons specified by requested LoginName",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Person"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Person does not exist"
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Exception"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Rooms": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "summary": "Fetch the list of all 'Rooms'.",
        "operationId": "Rooms_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/Room"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Rooms' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "Rooms"
        ],
        "summary": "Create a new 'Room'.",
        "operationId": "Rooms_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Room' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Room"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Room' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Room"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'Room' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Rooms/{id}": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "summary": "Fetch a 'Room' by its identifier.",
        "operationId": "Rooms_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Room"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'Room' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Rooms"
        ],
        "summary": "Delete a 'Room' by given identifier",
        "operationId": "Rooms_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'Room' by given identifier was deleted"
          },
          "400": {
            "description": "'Room' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "Rooms"
        ],
        "summary": "Update an specified 'Room' by given identifier.",
        "operationId": "Rooms_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Room' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Room"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'Room' by given identifier"
          },
          "404": {
            "description": "'Room' not found!"
          },
          "400": {
            "description": "if 'Room' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Rooms/ByCode/{code}": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "summary": "Fetch a single 'Room' based on its code.",
        "operationId": "Rooms_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identfied by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/Room"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Rooms' found!"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Sites": {
      "get": {
        "tags": [
          "Sites"
        ],
        "summary": "Fetch the list of all 'Sites'.",
        "operationId": "Sites_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/Site"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Sites' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "Sites"
        ],
        "summary": "Create a new 'Site'.",
        "operationId": "Sites_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Site' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Site"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Site' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Site"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'Site' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Sites/{id}": {
      "get": {
        "tags": [
          "Sites"
        ],
        "summary": "Fetch a 'Site' by its identifier.",
        "operationId": "Sites_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Site"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'Site' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sites"
        ],
        "summary": "Delete a 'Site' by given identifier",
        "operationId": "Sites_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'Site' by given identifier was deleted"
          },
          "400": {
            "description": "'Site' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "Sites"
        ],
        "summary": "Update an specified 'Site' by given identifier.",
        "operationId": "Sites_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Site' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Site"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'Site' by given identifier"
          },
          "404": {
            "description": "'Site' not found!"
          },
          "400": {
            "description": "if 'Site' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Sites/ByCode/{code}": {
      "get": {
        "tags": [
          "Sites"
        ],
        "summary": "Fetch a single 'Site' based on its code.",
        "operationId": "Sites_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identfied by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/Site"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Sites' found!"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/BimSoftwares": {
      "get": {
        "tags": [
          "BimSoftwares"
        ],
        "summary": "Fetch the list of all 'BimSoftwares'.",
        "operationId": "BimSoftwares_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/BimSoftware"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'BimSoftwares' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "BimSoftwares"
        ],
        "summary": "Create a new 'BimSoftware'.",
        "operationId": "BimSoftwares_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'BimSoftware' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BimSoftware"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'BimSoftware' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BimSoftware"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'BimSoftware' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/BimSoftwares/{id}": {
      "get": {
        "tags": [
          "BimSoftwares"
        ],
        "summary": "Fetch a 'BimSoftware' by its identifier.",
        "operationId": "BimSoftwares_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BimSoftware"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'BimSoftware' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "BimSoftwares"
        ],
        "summary": "Delete a 'BimSoftware' by given identifier",
        "operationId": "BimSoftwares_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'BimSoftware' by given identifier was deleted"
          },
          "400": {
            "description": "'BimSoftware' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "BimSoftwares"
        ],
        "summary": "Update an specified 'BimSoftware' by given identifier.",
        "operationId": "BimSoftwares_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'BimSoftware' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BimSoftware"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'BimSoftware' by given identifier"
          },
          "404": {
            "description": "'BimSoftware' not found!"
          },
          "400": {
            "description": "if 'BimSoftware' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Models": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Fetch the list of all 'Models'.",
        "operationId": "Models_GetAll",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/Model"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Models' found!"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Create a new 'Model'.",
        "operationId": "Models_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Model' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Model"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Model' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Model"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "if given 'Model' is invalid"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Models/{id}": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Fetch a 'Model' by its identifier.",
        "operationId": "Models_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Model"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "'Model' not found!"
          },
          "400": {
            "description": "Parameter missing 'id'"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Models"
        ],
        "summary": "Delete a 'Model' by given identifier",
        "operationId": "Models_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "'Model' by given identifier was deleted"
          },
          "400": {
            "description": "'Model' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "Models"
        ],
        "summary": "Update an specified 'Model' by given identifier.",
        "operationId": "Models_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Model' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Model"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "updates an specified 'Model' by given identifier"
          },
          "404": {
            "description": "'Model' not found!"
          },
          "400": {
            "description": "if 'Model' is not valid"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Models/ByCode/{code}": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Fetch a single 'Model' based on its code.",
        "operationId": "Models_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identfied by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/Model"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Models' found!"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Login": {
      "get": {
        "tags": [
          "Login"
        ],
        "summary": "Login int eTask-Api.\n ",
        "operationId": "Login_GetToken",
        "parameters": [
          {
            "name": "emailAddress",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "authenticationProvider",
            "in": "query",
            "description": "0: FM-Portal, 1: ActiveDirectory ",
            "schema": {
              "$ref": "#/components/schemas/AuthenticationProvider"
            },
            "x-position": 3,
            "default": 0
          }
        ],
        "responses": {
          "200": {
            "description": "EtaskApiToken token",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Token"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "invalid user or password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Hseq/Sites": {
      "get": {
        "tags": [
          "Hseq"
        ],
        "summary": "Get a list of all sites that have at minimum one HSEQ function attached\n ",
        "operationId": "Hseq_GetAllSites",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "a list of all sites that have at minimum one HSEQ function attached",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Building"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Sites not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Hseq/Sites/{id}/Buildings": {
      "get": {
        "tags": [
          "Hseq"
        ],
        "summary": "Get a list of all sites that have at minimum one HSEQ function attached",
        "operationId": "Hseq_GetBuildingsforSitesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns buildings",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Building"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Site not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Hseq/Sites/{id}/BuildingsCount": {
      "get": {
        "tags": [
          "Hseq"
        ],
        "summary": "Get a number of buildings in site that have at minimum one HSEQ function attached",
        "operationId": "Hseq_GetSiteBuildingsCount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns buildings",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Building"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Site not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Hseq/Buildings": {
      "get": {
        "tags": [
          "Hseq"
        ],
        "summary": "Get a list of all buildings that have at minimum one HSEQ function attached",
        "operationId": "Hseq_GetAllBuildings",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "a list of all buildings that have at minimum one HSEQ function attached",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Building"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Buildings not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Hseq/Buildings/{code}": {
      "get": {
        "tags": [
          "Hseq"
        ],
        "summary": "Get a list of all buildings that have at minimum one HSEQ function attached",
        "operationId": "Hseq_SearchBuildings",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "a list of all buildings that have at minimum one HSEQ function attached",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Building"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Buildings not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Hseq/Sites/{code}": {
      "get": {
        "tags": [
          "Hseq"
        ],
        "summary": "Get a list of all sites that have at minimum one HSEQ function attached",
        "operationId": "Hseq_SearchSites",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "a list of all buildings that have at minimum one HSEQ function attached",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Building"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Buildings not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    },
    "/Hseq/Building/{id}/Persons": {
      "get": {
        "tags": [
          "Hseq"
        ],
        "summary": "Get a list of personnel with HseqFunctions for the Building",
        "operationId": "Hseq_GetAllPersons",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "building id that have at minimum one HSEQ function attached.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "a list of personnel with HseqFunctions",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Building"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "personnel not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiException"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_token": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AllocationPersonnelToHseqFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AllocationPersonnelToHseqFunctionBase"
          },
          {
            "type": "object",
            "description": "Here you assign employees to the HSE function they perform. This enables you to\nassign the employee in participant scheduling to a course in the area of the\nexisting HSE function. If the HSE function is a basic function, all employees\ncan participate in a training course in their area. An additional assignment of\nemployees to the basic function is therefore not necessary, but may be useful\nfor organizational purposes, since the employees actually hold the HSE function\nduring the assignment.\n\nSystemName: AllocationPersonnelToHseqFunction\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T",
            "additionalProperties": false
          }
        ]
      },
      "AllocationPersonnelToHseqFunctionBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "HseqFunction",
          "Person",
          "InEmergencyCalllist",
          "Visible"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "-- SUMMARY MISSING --\n\nLabel: HSEQ_FUNCTION_ASSIGNMENT_ID\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T.HSEQ_FUNKTION_ZUORDNUNG_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "HseqFunction": {
            "description": "HSE Function\n\nLabel: HSE Function\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T.HSEQ_FUNKTION_ID\nDbType: int NOT NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/HseqFunction"
              }
            ]
          },
          "Person": {
            "description": "Staff Member\n\nLabel: Staff Member\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T.PERSONAL_ID\nDbType: int NOT NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Person"
              }
            ]
          },
          "AppointmentSince": {
            "type": "string",
            "description": "Specify the date of the official appointment of the Commissioner.\n\nLabel: Appointment since\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T.HSE_ERNENNUNG_AB\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "DispatchOfAguformtoworkscouncilon": {
            "type": "string",
            "description": "Enter the date on which the \"Registration and deregistration form for\nrepresentatives for occupational safety, health and environmental protection\"\n(AGU) was sent to the works council.\n\nLabel: Dispatch of AGU form to works council on\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T.VERSAND_AGU_AM\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "InEmergencyCalllist": {
            "type": "boolean",
            "description": "Specify here whether this person is published in the emergency call list.\n\nLabel: in emergency call list\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T.SICHTBAR_NOTRUFLISTE\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "LoggedOutOn": {
            "type": "string",
            "description": "Specify the date from which the representative is no longer appointed to the HSE\nfunction.\n\nLabel: Logged out on\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T.ABGEMELDET_AM\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "MarkedOn": {
            "type": "string",
            "description": "Enter the date from which the person responsible for the HSE function is\nflagged.\n\nLabel: Marked on\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T.HSE_VORGEMERKT_AM\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "ReceiptOfAguformfromworkscouncilon": {
            "type": "string",
            "description": "Enter the date on which the \"Registration and deregistration form for\nrepresentatives for occupational safety, health and environmental protection\"\n(AGU) completed by the works council is available.\n\nLabel: Receipt of AGU form from works council on\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T.EINGANG_AGU_AM\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "RequirementsForHsefunctionfulfilledsince": {
            "type": "string",
            "description": "Specify here the date from which the agent fulfills all requirements for the HSE\nfunction.\n\nLabel: Requirements for HSE function fulfilled since\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T.HSE_FUNKTION_OK_AB\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "Visible": {
            "type": "boolean",
            "description": "visible?\n\nLabel: visible?\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T.SICHTBAR\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T.CREATE_DATE\nDbType: datetime NULL\nDbDefault: (getdate())",
            "format": "date-time",
            "nullable": true
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T.CREATED_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T.CHANGE_DATE\nDbType: datetime NULL\nDbDefault: (getdate())",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_ZUORDNUNG_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "HseqFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HseqFunctionBase"
          },
          {
            "type": "object",
            "description": "Use this form to create HSE functions or responsibilities (for example, \"first\nresponder\" or \"waste manager\") and assign employees to these functions. You can\nalso specify the intervals for the training courses based on the existing HSE\nfunction and define the HSE function as the basic function. The training courses\nbelonging to the function are listed in the lower part of the form.\n\nSystemName: HseqFunction\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T",
            "additionalProperties": false
          }
        ]
      },
      "HseqFunctionBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "Person",
          "BasicHseFunction",
          "Code",
          "DisplayInFloorplan",
          "LegalObligationToReport",
          "Name"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "-- SUMMARY MISSING --\n\nLabel: HSEQ_FUNCTION_ID\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.HSEQ_FUNKTION_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "Person": {
            "description": "Coordinator\n\nLabel: Coordinator\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.SCHULUNG_KOORDINATOR_ID\nDbType: int NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Person"
              }
            ]
          },
          "BasicHseFunction": {
            "type": "boolean",
            "description": "Basic HSE Function\n\nLabel: Basic HSE Function\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.BASIS_FUNKTION\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "BasicTrainingIntervalmonths": {
            "type": "integer",
            "description": "Basic Training Interval [Months]\n\nLabel: Basic Training Interval [Months]\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.INTERVALL_GRUNDSCHULUNG\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "Code": {
            "type": "string",
            "description": "Code\n\nLabel: Code\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.HSEQ_FUNKTION_CODE\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "Description": {
            "type": "string",
            "description": "Enter a detailed description of the HSE function.\n\nLabel: delineation\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.BESCHREIBUNG\nDbType: text(8000) NULL\nDbDefault: ",
            "nullable": true
          },
          "DisplayInFloorplan": {
            "type": "boolean",
            "description": "Specifies whether the HSE function is to be displayed in the floor plan.\n\nLabel: Display in floor plan?\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.ETAGENPLAN_ANZEIGE\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "FollowUpTrainingIntervalMonths": {
            "type": "integer",
            "description": "Follow-Up Training Interval [Months]\n\nLabel: Follow-Up Training Interval [Months]\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.INTERVALL_FOLGESCHULUNG\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "LegalFoundationForOrder": {
            "type": "string",
            "description": "Legal Foundation for Order\n\nLabel: Legal Foundation for Order\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.GRUNDLAGE_BESTELLUNG\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "LegalObligationToReport": {
            "type": "boolean",
            "description": "Legal Obligation to Report\n\nLabel: Legal Obligation to Report\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.MELDEPFLICHT\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "Name": {
            "type": "string",
            "description": "Name\n\nLabel: Name\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.HSEQ_FUNKTION_BEZEICHNUNG\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "NotificationInterval": {
            "type": "integer",
            "description": "Notification Interval\n\nLabel: Notification Interval\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.MELDEINTERVALL\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "Remark": {
            "type": "string",
            "description": "Remark\n\nLabel: Remark\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.BEMERKUNG\nDbType: nvarchar(200) NULL\nDbDefault: ",
            "maxLength": 200,
            "nullable": true
          },
          "ReminderLeadTimeMonths": {
            "type": "integer",
            "description": "Specify the lead time for a reminder for the next follow-up training in months.\n\nLabel: Reminder Lead Time[Months]\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.INTERVALL_ERINNERUNG\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "RequiredQualification": {
            "type": "string",
            "description": "Required Qualification\n\nLabel: Required Qualification\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.ERFORDERLICHE_AUSBILDUNG\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "SortingInFloorPlan": {
            "type": "integer",
            "description": "Enter the position at which the HSE function is to be displayed in the floor\nplan.\n\nLabel: Sorting in the floor plan\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.ETAGENPLAN_SORTIERUNG\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.CREATED_FROM\nDbType: nvarchar(50) NOT NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.CHANGE_DATE\nDbType: datetime NULL\nDbDefault: (getdate())",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: PS_HSEQ_FUNKTION_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "Person": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PersonBase"
          },
          {
            "type": "object",
            "description": "Use this form to create employee records to keep track of your staff. You can\nthen select the persons entered here in various forms in the FM portal to assign\ntasks to them, for example. Enter data to identify the employee and his or her\ncontact data. Assign the employee to the room in which he or she works. Manage\nthe employee's access data and rights within the FM portal. Assign the inventory\nto the employee that he or she uses and that is displayed on his or her\npersonalized start page. When using eTASK. key management, the keys handed out\nto the employee are displayed. When using eTASK. employee examinations, the\ncompany medical examinations in which the employee participated are listed.\n\nSystemName: Person\nin DEBUG only\nDbName: PS_PERSONAL_T",
            "additionalProperties": false
          }
        ]
      },
      "PersonBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "Salutation",
          "EMail",
          "GivenName",
          "Inactive",
          "PersonnelNumberPrimary",
          "SurName"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Personnel ID (system-wise)\n\nLabel: ID\nin DEBUG only\nDbName: PS_PERSONAL_T.PERSONAL_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "CostCenterPrimary": {
            "description": "Select the cost center used to settle the costs of the employee's services.\n\nLabel: Cost Center 1\nin DEBUG only\nDbName: PS_PERSONAL_T.KOSTENSTELLE_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CostCenter"
              }
            ]
          },
          "CostCenterSecondary": {
            "description": "Select a second cost center used to settle the costs of the employee's services.\n\nLabel: Cost Center 2\nin DEBUG only\nDbName: PS_PERSONAL_T.KOSTENSTELLE2_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CostCenter"
              }
            ]
          },
          "Department": {
            "type": "integer",
            "description": "Select the department in which the employee works.\n\nLabel: Organization\nin DEBUG only\nDbName: PS_PERSONAL_T.ABTEILUNG_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "PersonType": {
            "type": "integer",
            "description": "Select the personnel type assigned to the employee.\n\nLabel: Personnel Type\nin DEBUG only\nDbName: PS_PERSONAL_T.PERSONALTYP_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "PersonWorkflowTicket": {
            "type": "string",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: PS_PERSONAL_T.TICKET_UID\nDbType: uniqueidentifier NULL\nDbDefault: ",
            "format": "guid",
            "nullable": true
          },
          "Salutation": {
            "description": "Select the form of address to be used for this employee.\n\nLabel: Form of Address\nin DEBUG only\nDbName: PS_PERSONAL_T.ANREDE_ID\nDbType: int NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Salutation"
              }
            ]
          },
          "Site": {
            "description": "Displays the location in which the employee works.\n\nLabel: Location\nin DEBUG only\nDbName: PS_PERSONAL_T.STANDORT_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Site"
              }
            ]
          },
          "SourceOfPersonData": {
            "description": "Select the origin of the personnel data. \"SAP\" means that the personnel data is\nregularly updated via eTASK.PersonnelDataImport. This parameter influences the\npersonnel data import in general after each FM-Portal configuration. \"Local\"\nmeans that the personnel data is only managed in FM-Portal.\n\nLabel: Data Origin\nin DEBUG only\nDbName: PS_PERSONAL_T.HERKUNFT_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataSourcesOfPersonData"
              }
            ]
          },
          "Superior": {
            "description": "Selection of the employee's superior.\n\nLabel: superior\nin DEBUG only\nDbName: PS_PERSONAL_T.VORGESETZTER_PERSONAL_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Person"
              }
            ]
          },
          "DateOfBirth": {
            "type": "string",
            "description": "Select the employee's date of birth from the adjacent date picker.\n\nLabel: Date of Birth\nin DEBUG only\nDbName: PS_PERSONAL_T.GEBURTSDATUM\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "DateOfEmployment": {
            "type": "string",
            "description": "Select the employee's employment start date.\n\nLabel: Date of Employment\nin DEBUG only\nDbName: PS_PERSONAL_T.EINTRITTS_TERMIN\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "DoorLabelText": {
            "type": "string",
            "description": "Here you can specify an additional text that can be printed on a door label in\naddition to the name.\n\nLabel: Door label text\nin DEBUG only\nDbName: PS_PERSONAL_T.TUERSCHILD_TEXT\nDbType: nvarchar(255) NULL\nDbDefault: ",
            "maxLength": 255,
            "nullable": true
          },
          "EMail": {
            "type": "string",
            "description": "Enter the employee's email address.\n\nLabel: E-Mail\nin DEBUG only\nDbName: PS_PERSONAL_T.EMAIL\nDbType: varchar(96) NULL\nDbDefault: ",
            "maxLength": 96,
            "minLength": 1
          },
          "ExitDate": {
            "type": "string",
            "description": "Select the employee's employment end date.\n\nLabel: Exit Date\nin DEBUG only\nDbName: PS_PERSONAL_T.AUSTRITTS_TERMIN\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "FaxNumber": {
            "type": "string",
            "readOnly": true,
            "description": "Displays the fax number on which the employee can be reached during the day. To\nchange the number, set the required number to the first position further below\nin the \"Contact data\" information area.\n\nLabel: Fax No.\nin DEBUG only\nDbName: PS_PERSONAL_T.TELEFAX\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "GivenName": {
            "type": "string",
            "description": "Enter the employee's first name.\n\nLabel: First Name\nin DEBUG only\nDbName: PS_PERSONAL_T.VORNAME\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "Inactive": {
            "type": "boolean",
            "description": "Indicate whether the employee is currently inactive.\n\nLabel: Inactive\nin DEBUG only\nDbName: PS_PERSONAL_T.INAKTIV\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "LdapImportIdentifier": {
            "type": "string",
            "readOnly": true,
            "description": "This column is used for the adjustment during the LDAP import of a user.\n\nLabel: LDAP Import Identifier\nin DEBUG only\nDbName: PS_PERSONAL_T.LDAP_OBJECTSID\nDbType: varchar(256) NULL\nDbDefault: ",
            "maxLength": 256,
            "nullable": true
          },
          "Location": {
            "type": "string",
            "description": "Enter the name of the city in which the staff member lives.\n\nLabel: Location\nin DEBUG only\nDbName: PS_PERSONAL_T.PS_ORT_PRIVAT\nDbType: nvarchar(150) NULL\nDbDefault: ",
            "maxLength": 150,
            "nullable": true
          },
          "Locked": {
            "type": "boolean",
            "description": "If this check mark is set, the employee can no longer log on to the eTASK\nportal. Depending on the system configuration, the check mark can be set\nautomatically if the employee has logged on several times without success.\n\nLabel: Locked\nin DEBUG only\nDbName: PS_PERSONAL_T.GESPERRT\nDbType: bit NULL\nDbDefault: ",
            "nullable": true
          },
          "LoginFailed": {
            "type": "string",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: PS_PERSONAL_T.ANMELDUNG_FEHLGESCHLAGEN\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "LoginName": {
            "type": "string",
            "description": "Enter the user name which the employee should use to log onto FM-Portal.\n\nLabel: User Name\nin DEBUG only\nDbName: PS_PERSONAL_T.USERNAME\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "MobilePhoneNo": {
            "type": "string",
            "readOnly": true,
            "description": "Displays the mobile phone number on which the employee can be reached during the\nday. To change the number, set the required number to the first position further\nbelow in the \"Contact data\" information area.\n\nLabel: Mobile Phone No.\nin DEBUG only\nDbName: PS_PERSONAL_T.TELEFON_MOBIL\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "NumerOfFailedLoginAttempts": {
            "type": "integer",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: PS_PERSONAL_T.ANMELDUNG_FEHLVERSUCHE\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "Password": {
            "type": "string",
            "description": "Set an option which enables the password used by the employee to log onto\nFM-Portal to be kept or changed.\n\nLabel: Password\nin DEBUG only\nDbName: PS_PERSONAL_T.PASSWORD\nDbType: varchar(255) NULL\nDbDefault: ",
            "maxLength": 255,
            "nullable": true
          },
          "PasswordExpiresOn": {
            "type": "string",
            "readOnly": true,
            "description": "This entry can be used to limit the validity of a password, regardless of your\nsystem configuration settings.\n\nLabel: Password expires on\nin DEBUG only\nDbName: PS_PERSONAL_T.KENNWORT_GUELTIG_BIS\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "PasswordNeverExpires": {
            "type": "boolean",
            "description": "Specify whether the employee's local password is to be permanently valid or\nwhether it runs according to the system configuration rules.\n\nLabel: Password never expires\nin DEBUG only\nDbName: PS_PERSONAL_T.KENNWORT_PERMANENT\nDbType: bit NULL\nDbDefault: ",
            "nullable": true
          },
          "PersonnelNumberPrimary": {
            "type": "string",
            "description": "Enter the employee's personnel number.\n\nLabel: Personnel Number\nin DEBUG only\nDbName: PS_PERSONAL_T.PERSONAL_CODE\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "PersonnelNumberSecondary": {
            "type": "string",
            "description": "Enter the employee's CPID.\n\nLabel: CPID\nin DEBUG only\nDbName: PS_PERSONAL_T.PERSONALKENNUNG\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "PhoneNumberOffice": {
            "type": "string",
            "readOnly": true,
            "description": "Displays the landline on which the employee can be reached during the day. To\nchange the number, set the required number to the first position further below\nin the \"Contact data\" information area.\n\nLabel: Phone No.\nin DEBUG only\nDbName: PS_PERSONAL_T.TELEFON\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "PhoneNumberPrivate": {
            "type": "string",
            "description": "Enter the staff member's private phone number.\n\nLabel: Phone No.\nin DEBUG only\nDbName: PS_PERSONAL_T.PS_TELEFON_PRIVAT\nDbType: varchar(20) NULL\nDbDefault: ",
            "maxLength": 20,
            "nullable": true
          },
          "Pseudonym": {
            "type": "string",
            "description": "The employee's pseudonym can be entered here if, for example, he or she uses a\nstage name or is not recorded in the personnel database with his or her call\nname.\n\nLabel: Pseudonym / Artist name\nin DEBUG only\nDbName: PS_PERSONAL_T.PSEUDONYM\nDbType: nvarchar(100) NULL\nDbDefault: ",
            "maxLength": 100,
            "nullable": true
          },
          "Remark": {
            "type": "string",
            "description": "Enter a comment about the employee.\n\nLabel: Remark\nin DEBUG only\nDbName: PS_PERSONAL_T.BEMERKUNG\nDbType: varchar(255) NULL\nDbDefault: ",
            "maxLength": 255,
            "nullable": true
          },
          "SocialSecurityNumber": {
            "type": "string",
            "description": "Enter the employee's social security number.\n\nLabel: Social Security Number\nin DEBUG only\nDbName: PS_PERSONAL_T.SOZIALVERSICHERUNGSNUMMER\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "StreetAddress": {
            "type": "string",
            "description": "Enter the street address and street number of the staff member's home address.\n\nLabel: Street Address\nin DEBUG only\nDbName: PS_PERSONAL_T.PS_STRASSE_PRIVAT\nDbType: nvarchar(150) NULL\nDbDefault: ",
            "maxLength": 150,
            "nullable": true
          },
          "SurName": {
            "type": "string",
            "description": "Enter the employee's surname.\n\nLabel: Surname\nin DEBUG only\nDbName: PS_PERSONAL_T.NACHNAME\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "Title": {
            "type": "string",
            "description": "Enter the employee's title (e.g., \"PhD\").\n\nLabel: Title\nin DEBUG only\nDbName: PS_PERSONAL_T.TITEL\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "ZipCode": {
            "type": "string",
            "description": "Enter the postal code of the staff member's home address.\n\nLabel: Postal Code\nin DEBUG only\nDbName: PS_PERSONAL_T.PS_PLZ_PRIVAT\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: PS_PERSONAL_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: PS_PERSONAL_T.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: PS_PERSONAL_T.CREATED_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: PS_PERSONAL_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: PS_PERSONAL_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: PS_PERSONAL_T.CHANGE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: PS_PERSONAL_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: PS_PERSONAL_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "CostCenter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CostCenterBase"
          },
          {
            "type": "object",
            "description": "Here you can create data records for cost centers in your company. The entered\ncost centers can be selected later in many places of the FM portal.\n\nSystemName: CostCenter\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T",
            "additionalProperties": false
          }
        ]
      },
      "CostCenterBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "CompanyAddress",
          "Billable",
          "CanBePostedTo",
          "Code",
          "Name"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.KOSTENSTELLE_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "Buildings": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Buildings"
              }
            ]
          },
          "CompanyAddress": {
            "description": "Select the company in which the cost center is valid.\n\nLabel: Company\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.FIRMA_ID\nDbType: int NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyAddress"
              }
            ]
          },
          "CostCenterType": {
            "type": "integer",
            "description": "Cost Center Type\n\nLabel: Cost Center Type\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.KST_TYP_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "Department": {
            "type": "integer",
            "description": "Select the department to which this cost center is assigned.\n\nLabel: Department\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.ABTEILUNG_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "BackgroundColor": {
            "type": "integer",
            "description": "Enter the number of the background color in CAD visualization (from\n\"0\" to \"119\").\n\nLabel: Background Color\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.HINTERGRUNDFARBE\nDbType: int NULL\nDbDefault: (CONVERT([int],(120)*rand(),(0)))",
            "format": "int32",
            "nullable": true
          },
          "Billable": {
            "type": "boolean",
            "description": "Indicate whether the cost center is basically deemed to be projectable. Uncheck\nthe checkbox if the cost center is temporarily not projectable.\n\nLabel: Billable\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.KOSTENSTELLE_SP_PL\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "CanBePostedTo": {
            "type": "boolean",
            "description": "Set the check mark to indicate that costs can be posted to this cost center. In\ncase the cost center is blocked for postings, uncheck the box.\n\nLabel: can be posted to?\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.KOSTENSTELLE_SP_IST\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "Code": {
            "type": "string",
            "description": "Enter the abbreviation for the cost center. Use the abbreviation already used\nin-house by your company.\n\nLabel: Code\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.KOSTENSTELLE_CODE\nDbType: varchar(30) NOT NULL\nDbDefault: ",
            "maxLength": 30,
            "minLength": 1
          },
          "CompanyCode": {
            "type": "string",
            "description": "Enter the name of the accounting area in which the cost center is valid.\n\nLabel: Company Code\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.KOSTENSTELLE_BUCHUNGSKREIS\nDbType: varchar(10) NULL\nDbDefault: ",
            "maxLength": 10,
            "nullable": true
          },
          "ExternalCode": {
            "type": "string",
            "readOnly": true,
            "description": "In the case of an import or export of the cost center, the external code is\nstored here.\n\nLabel: External Code\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.EXTERNAL_CODE\nDbType: varchar(30) NULL\nDbDefault: ",
            "maxLength": 30,
            "nullable": true
          },
          "ForegroundColor": {
            "type": "integer",
            "description": "Enter the number of the foreground color in CAD visualization (from\n\"0\" to \"119\").\n\nLabel: Foreground Color\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.VORDERGRUNDFARBE\nDbType: int NULL\nDbDefault: (CONVERT([int],(120)*rand(),(0)))",
            "format": "int32",
            "nullable": true
          },
          "Hierarchy": {
            "type": "string",
            "description": "If the cost center is structured hierarchically, the higher-level cost center\ncan be entered here.\n\nLabel: Hierarchy\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.KOSTENSTELLE_HIERARCHIE\nDbType: varchar(30) NULL\nDbDefault: ",
            "maxLength": 30,
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Enter the full name of the cost center.\n\nLabel: Name\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.KOSTENSTELLE_BEZEICHNUNG\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "Pattern": {
            "type": "integer",
            "description": "Enter the number of the pattern in CAD visualization (from \"1\" to\n\"77\").\n\nLabel: Pattern\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.SCHRAFFUR\nDbType: int NULL\nDbDefault: ((12))",
            "format": "int32",
            "nullable": true
          },
          "PersonInChargeForCostcenter": {
            "type": "string",
            "description": "Staff number of person in charge\n\nLabel: Person in charge / Personnel number\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.KOSTENSTELLE_VERANTWORTLICHER2\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "PersonResponsibleForCostcenter": {
            "type": "string",
            "description": "Select the person responsible for the cost center from the combobox.\n\nLabel: Person Responsible for Cost Center\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.KOSTENSTELLE_VERANTWORTLICHER1\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "ValidFrom": {
            "type": "string",
            "description": "Select the date from which the cost center is valid and bookable. You can also\nmanually enter the date in dd.mm.yyyy format.\n\nLabel: Valid from\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.KOSTENSTELLE_GUELTIG_AB\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "ValidTo": {
            "type": "string",
            "description": "Select the date from which the cost center is no longer valid or bookable. You\ncan also manually enter the date in dd.mm.yyyy format.\n\nLabel: Valid to\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.KOSTENSTELLE_GUELTIG_BIS\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.CREATED_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.CHANGE_DATE\nDbType: datetime NULL\nDbDefault: (getdate())",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: FL_KOSTENSTELLE_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "Buildings": {
        "type": "object",
        "description": "Collection of Building",
        "additionalProperties": false
      },
      "CompanyAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CompanyAddressBase"
          },
          {
            "type": "object",
            "description": "Enter data records for all external companies with which the FM department\ncooperates. These data records are available in many places of the FM portal\n(e.g. to identify the contractor in eTASK Maintenance). Assign the company a\ntype, a trade, address and communication details, and company employee data.\nEvaluate the company (adherence to delivery dates, price loyalty, etc.) to\ndocument the relationship of trust. Upload documents concerning this company.\nWhen using eTASK.CAD, the company's identification in CAD plans is also\ndocumented here. When using eTASK. contractor logon, the company's employees are\nregistered who have temporary access to the building for work. If eTASK\ndeficiency management is used, the construction projects in which the company is\nthe client are assigned to the company.\n\nSystemName: CompanyAddress\nin DEBUG only\nDbName: FL_FIRMA_T",
            "additionalProperties": false
          }
        ]
      },
      "CompanyAddressBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "ActivationForRegistrationManagement",
          "CompanyName",
          "ContactPersonMailContact",
          "Customer",
          "ExportFlag",
          "IsInternalCompany",
          "Lessee",
          "Lessor",
          "Manufacturer",
          "Orderer",
          "Owner",
          "ServiceProvider",
          "ShowInEmergencyList",
          "Supplier"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ID\n\nLabel: ID\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "AddressType": {
            "type": "integer",
            "description": "Address Type\n\nLabel: Address Type\nin DEBUG only\nDbName: FL_FIRMA_T.ADRERSSE_FUER_STAMM_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "CostCenter": {
            "description": "Select the cost center that the company belongs to.\n\nLabel: Cost Center\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_KOSTENSTELLE_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CostCenter"
              }
            ]
          },
          "Trade": {
            "type": "integer",
            "description": "Select the trade to which the company should be assigned.\n\nLabel: Trade\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_GEWERK_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "AccountingSystem": {
            "type": "string",
            "description": "Enter the name of the in-house accounting system which performs the company's\nbookkeeping.\n\nLabel: Accounting System\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_ABRECHNUNGSSYSTEM\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "ActivationForRegistrationManagement": {
            "type": "boolean",
            "description": "Indicate whether electronic personnel tracking should be activated for the\ncompany.\n\nLabel: Activation for Registration Management\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_FREMDFIRMA\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "AreaCode": {
            "type": "string",
            "description": "Enter the area code for the company's telephone number (e.g. \"221\" for\nCologne).\n\nLabel: Area Code\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_VORW\nDbType: varchar(10) NULL\nDbDefault: ",
            "maxLength": 10,
            "nullable": true
          },
          "BackgroundColor": {
            "type": "integer",
            "description": "Enter the number of the background color in CAD visualization (from\n\"0\" to \"119\").\n\nLabel: Background Color\nin DEBUG only\nDbName: FL_FIRMA_T.HINTERGRUNDFARBE\nDbType: int NULL\nDbDefault: (CONVERT([int],(120)*rand(),(0)))",
            "format": "int32",
            "nullable": true
          },
          "Code": {
            "type": "string",
            "description": "Enter an abbreviation for the company. We recommend that you do not use a\nsequential numeric code but that you use an abbreviation from which the full\ncompany name can be derived.\n\nLabel: Code\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_CODE\nDbType: varchar(50) NULL\nDbDefault: ('kein Code')",
            "maxLength": 50,
            "nullable": true
          },
          "CollectedBy": {
            "type": "string",
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: FL_FIRMA_T.ERFVON\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "CollectionDate": {
            "type": "string",
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: FL_FIRMA_T.ERFASST_AM\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "CompanyName": {
            "type": "string",
            "description": "Enter the full company name.\n\nLabel: Company Name\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_BEZEICHNUNG\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "CompanyName2": {
            "type": "string",
            "description": "Company Name (2nd Row)\n\nLabel: Company Name (2nd Row)\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_BEZEICHNUNG_2\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "CompanyName3": {
            "type": "string",
            "description": "Company Name (3rd Row)\n\nLabel: Company Name (3rd Row)\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_BEZEICHNUNG_3\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "CompanyNameOnDoorplate": {
            "type": "string",
            "description": "Company Name on Door Plate\n\nLabel: Company Name on Door Plate\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMENBEZEICHNUNG_TUERSCHILD\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "ContactPerson": {
            "type": "string",
            "description": "Enter the name of the main contact person.\n\nLabel: Contact Person\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_ANSPRECHPARTNER\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "ContactPersonMailContact": {
            "type": "boolean",
            "description": "Specifies whether the main contact person is to be activated for electronic\ninvoicing.\n\nLabel: invoice dispatch\nin DEBUG only\nDbName: FL_FIRMA_T.ANSPRECHPARTNER_E_MAIL_VERSAND\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "ContactPersonPhoneNumber": {
            "type": "string",
            "description": "Enter the contact person's telephone number.\n\nLabel: Phone No.\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_ANSPRECHPARTNER_TELEFON\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "ContractorNumber": {
            "type": "string",
            "description": "Contractor No.\n\nLabel: Contractor No.\nin DEBUG only\nDbName: FL_FIRMA_T.UNTERNEHMER_NR\nDbType: varchar(10) NULL\nDbDefault: ",
            "maxLength": 10,
            "nullable": true
          },
          "Country": {
            "type": "string",
            "description": "Country\n\nLabel: Country\nin DEBUG only\nDbName: FL_FIRMA_T.LAND\nDbType: varchar(60) NULL\nDbDefault: ",
            "maxLength": 60,
            "nullable": true
          },
          "CountryDialCode": {
            "type": "string",
            "description": "Enter the country dialing code for the company's telephone number (e.g.\n\"0049\" for Germany).\n\nLabel: Country Dialing Code\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_LVORW\nDbType: varchar(10) NULL\nDbDefault: ",
            "maxLength": 10,
            "nullable": true
          },
          "Customer": {
            "type": "boolean",
            "description": "Indicate whether the company is a customer of your company\n\nLabel: Customer\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_KUNDE\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "Department": {
            "type": "string",
            "description": "Department\n\nLabel: Department\nin DEBUG only\nDbName: FL_FIRMA_T.ABTEILUNG\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "EMailAddress": {
            "type": "string",
            "description": "Enter the contact person's email address.\n\nLabel: E-Mail Address\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_ANSPRECHPARTNER_EMAIL\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "EmailBusinessContact": {
            "type": "string",
            "description": "E-Mail\n\nLabel: E-Mail\nin DEBUG only\nDbName: FL_FIRMA_T.E_MAIL_GESCHAEFTLICH\nDbType: varchar(100) NULL\nDbDefault: ",
            "maxLength": 100,
            "nullable": true
          },
          "EmailPersonalContact": {
            "type": "string",
            "description": "-- SUMMARY MISSING --\n\nLabel: E_MAIL_CONTACT PERSON\nin DEBUG only\nDbName: FL_FIRMA_T.E_MAIL_ANSPRECHPARTNER\nDbType: varchar(100) NULL\nDbDefault: ",
            "maxLength": 100,
            "nullable": true
          },
          "ExportFlag": {
            "type": "number",
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: FL_FIRMA_T.EXPORTIEREN\nDbType: numeric NOT NULL\nDbDefault: ((0))",
            "format": "decimal"
          },
          "ExternalId": {
            "type": "integer",
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: FL_FIRMA_T.DOMUS_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "FaxNumber": {
            "type": "string",
            "description": "Enter the company's fax number without the country or area code.\n\nLabel: Fax No.\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_TELEFAX\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "ForegroundColor": {
            "type": "integer",
            "description": "Enter the number of the foreground color in CAD visualization (from\n\"0\" to \"119\").\n\nLabel: Foreground Color\nin DEBUG only\nDbName: FL_FIRMA_T.FARBE\nDbType: int NULL\nDbDefault: (CONVERT([int],(120)*rand(),(0)))",
            "format": "int32",
            "nullable": true
          },
          "Function": {
            "type": "string",
            "description": "Function\n\nLabel: Function\nin DEBUG only\nDbName: FL_FIRMA_T.FUNKTION\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Gender": {
            "type": "string",
            "description": "Madam/Sir\n\nLabel: Madam/Sir\nin DEBUG only\nDbName: FL_FIRMA_T.GESCHLECHT\nDbType: varchar(5) NULL\nDbDefault: ",
            "maxLength": 5,
            "nullable": true
          },
          "GivenName": {
            "type": "string",
            "description": "First Name\n\nLabel: First Name\nin DEBUG only\nDbName: FL_FIRMA_T.VORNAME\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Group": {
            "type": "string",
            "description": "Group\n\nLabel: Group\nin DEBUG only\nDbName: FL_FIRMA_T.GRUPPE\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "GroupCode": {
            "type": "string",
            "description": "Enter the group of companies that the company belongs to.\n\nLabel: Group Code\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_KONZERNGRUPPE\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "IsInternalCompany": {
            "type": "boolean",
            "description": "Indicate whether the company is an in-house company (e.g. an in-house\ndepartment).\n\nLabel: Internal Company\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_INTERN\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "LastContactmeeting": {
            "type": "string",
            "description": "Last Contact/Meeting\n\nLabel: Last Contact/Meeting\nin DEBUG only\nDbName: FL_FIRMA_T.LETZTER_BESUCHTERMIN\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last Name\n\nLabel: Last Name\nin DEBUG only\nDbName: FL_FIRMA_T.NACHNAME\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Lessee": {
            "type": "boolean",
            "description": "Indicate whether the company has leased rooms from your company.\n\nLabel: Lessee\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_MIETER\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "Lessor": {
            "type": "boolean",
            "description": "Indicate whether the company leases out any premises used by your company.\n\nLabel: Lessor\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_VERMIETER\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "LetterSalutation": {
            "type": "string",
            "description": "-- SUMMARY MISSING --\n\nLabel: letter salutation\nin DEBUG only\nDbName: FL_FIRMA_T.BRIEFANREDE\nDbType: nvarchar(50) NULL\nDbDefault: (N'Sehr geehrte Damen und Herren')",
            "maxLength": 50,
            "nullable": true
          },
          "MailingAddress": {
            "type": "string",
            "description": "If created, used for correspondence instead of other address lines.\n\nLabel: Mailing Address\nin DEBUG only\nDbName: FL_FIRMA_T.POSTANSCHRIFT\nDbType: varchar(400) NULL\nDbDefault: ",
            "maxLength": 400,
            "nullable": true
          },
          "Manufacturer": {
            "type": "boolean",
            "description": "Indicate whether the company manufactures any installations used by your\ncompany.\n\nLabel: Manufacturer\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_HERSTELLER\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "MobilePhoneNo": {
            "type": "string",
            "description": "Enter the contact person's mobile phone number.\n\nLabel: Mobile Phone No.\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_ANSPRECHPARTNER_HANDY\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "NextContactMeeting": {
            "type": "string",
            "description": "Next Contact/Meeting\n\nLabel: Next Contact/Meeting\nin DEBUG only\nDbName: FL_FIRMA_T.NAECHSTER_BESUCHSTERMIN\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Orderer": {
            "type": "boolean",
            "description": "Indicate whether the company is a contracting entity for your company.\n\nLabel: Orderer\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_AUFTRAGGEBER\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "OurCustomerNo": {
            "type": "string",
            "description": "Our Customer No.\n\nLabel: Our Customer No.\nin DEBUG only\nDbName: FL_FIRMA_T.UNSERE_KUNDEN_NR\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Owner": {
            "type": "boolean",
            "description": "Indicate whether the company owns any assets or objects used by your company.\n\nLabel: Proprietor\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_EIGENTUEMER\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "PartnerNo": {
            "type": "string",
            "description": "Enter the company’s partner number.\n\nLabel: Partner-No.\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_PARTNERNUMMER\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Pattern": {
            "type": "integer",
            "description": "Enter the number of the pattern in CAD visualization (from \"1\" to\n\"77\").\n\nLabel: Pattern\nin DEBUG only\nDbName: FL_FIRMA_T.SCHRAFFUR\nDbType: int NULL\nDbDefault: ((12))",
            "format": "int32",
            "nullable": true
          },
          "PhoneMobile": {
            "type": "string",
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: FL_FIRMA_T.MOBILTELEFON\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "PhoneNo": {
            "type": "string",
            "description": "Enter the company's telephone number without the country or area code.\n\nLabel: Phone No.\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_TELEFON\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "PhoneNoOfficial": {
            "type": "string",
            "description": "Phone No. (official)\n\nLabel: Phone No. (official)\nin DEBUG only\nDbName: FL_FIRMA_T.TELEFON_GESCHAEFTLICH\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "PhoneNoPrivate": {
            "type": "string",
            "description": "Phone No. (private)\n\nLabel: Phone No. (private)\nin DEBUG only\nDbName: FL_FIRMA_T.TELEFON_PRIVAT\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "PhoneNumberCentral": {
            "type": "string",
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: FL_FIRMA_T.TELEFON_ZENTRALE\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "PoBox": {
            "type": "string",
            "description": "Enter a P.O. box for this company.\n\nLabel: P.O. Box\nin DEBUG only\nDbName: FL_FIRMA_T.POSTFACH\nDbType: varchar(15) NULL\nDbDefault: ",
            "maxLength": 15,
            "nullable": true
          },
          "PostalCode": {
            "type": "string",
            "description": "Enter the post code in the company's address.\n\nLabel: Postal Code\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_PLZ\nDbType: varchar(12) NULL\nDbDefault: ",
            "maxLength": 12,
            "nullable": true
          },
          "PostalCode2": {
            "type": "string",
            "description": "Enter the postcode for the P.O. box, if different to the general address.\n\nLabel: Postal Code of P.O. Box\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_PLZ_2\nDbType: varchar(12) NULL\nDbDefault: ",
            "maxLength": 12,
            "nullable": true
          },
          "Remarks": {
            "type": "string",
            "description": "Remarks\n\nLabel: Remarks\nin DEBUG only\nDbName: FL_FIRMA_T.BEMERKUNG\nDbType: varchar(255) NULL\nDbDefault: ",
            "maxLength": 255,
            "nullable": true
          },
          "RemarksAdditional": {
            "type": "string",
            "description": "Remarks\n\nLabel: Remarks\nin DEBUG only\nDbName: FL_FIRMA_T.WEITERE_BEMERKUNGEN\nDbType: varchar(255) NULL\nDbDefault: ",
            "maxLength": 255,
            "nullable": true
          },
          "SalesTaxId": {
            "type": "string",
            "description": "Enter the company's European sales tax made up of the country code (e.g.\n\"DE\" for Germany) and max. 12 more alphanumerical characters.\n\nLabel: Sales tax ID\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_USTID\nDbType: varchar(12) NULL\nDbDefault: ",
            "maxLength": 12,
            "nullable": true
          },
          "ServiceProvider": {
            "type": "boolean",
            "description": "Indicate whether the company is a service provider for your company.\n\nLabel: Service provider\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_DIENSTLEISTER\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "ShowInEmergencyList": {
            "type": "boolean",
            "description": "Specify here whether this company should be displayed in the company emergency\nlist.\n\nLabel: Show in emergency list\nin DEBUG only\nDbName: FL_FIRMA_T.ANZEIGE_NOTFALLISTE\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "Status": {
            "type": "string",
            "description": "Status\n\nLabel: Status\nin DEBUG only\nDbName: FL_FIRMA_T.STATUS\nDbType: varchar(255) NULL\nDbDefault: ",
            "maxLength": 255,
            "nullable": true
          },
          "StreetAddress": {
            "type": "string",
            "description": "Enter the company's street address.\n\nLabel: Street Address\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_STRASSE\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Superior": {
            "type": "string",
            "description": "Superior\n\nLabel: Superior\nin DEBUG only\nDbName: FL_FIRMA_T.VORGESETZTER\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Supplier": {
            "type": "boolean",
            "description": "Indicate whether the company is a supplier for your company.\n\nLabel: Supplier\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_LIEFERANT\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "TextEmergencyList": {
            "type": "string",
            "description": "Here you can specify the malfunction for which the company is to be displayed on\nthe company emergency list (e.g. \"Heating fault clearance\").\n\nLabel: information text\nin DEBUG only\nDbName: FL_FIRMA_T.TEXT_NOTFALLISTE\nDbType: nvarchar(250) NULL\nDbDefault: ",
            "maxLength": 250,
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "Title\n\nLabel: Title\nin DEBUG only\nDbName: FL_FIRMA_T.TITEL\nDbType: varchar(30) NULL\nDbDefault: ",
            "maxLength": 30,
            "nullable": true
          },
          "TitleForm": {
            "type": "string",
            "description": "Title Form\n\nLabel: Title Form\nin DEBUG only\nDbName: FL_FIRMA_T.ANREDE\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Town": {
            "type": "string",
            "description": "Enter the town in the company's address.\n\nLabel: Location\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_ORT\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "UserNameFmPortal": {
            "type": "string",
            "description": "Enter the user name used by the company to receive and edit tickets in the\nAperture Workflow Portal.\n\nLabel: User Name FM-Portal\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_BENUTZER\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Website": {
            "type": "string",
            "description": "Enter the company's website address (e.g. \"http://www.etask.de\")\n\nLabel: Website\nin DEBUG only\nDbName: FL_FIRMA_T.FIRMA_HOMEPAGE\nDbType: varchar(200) NULL\nDbDefault: ",
            "maxLength": 200,
            "nullable": true
          },
          "WebSitePrivate": {
            "type": "string",
            "description": "Web Site (private)\n\nLabel: Web Site (private)\nin DEBUG only\nDbName: FL_FIRMA_T.INTERNET_PRIVAT\nDbType: varchar(100) NULL\nDbDefault: ",
            "maxLength": 100,
            "nullable": true
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: FL_FIRMA_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: FL_FIRMA_T.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: FL_FIRMA_T.CREATED_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: FL_FIRMA_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: FL_FIRMA_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: FL_FIRMA_T.CHANGE_DATE\nDbType: datetime NULL\nDbDefault: (getdate())",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: FL_FIRMA_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: FL_FIRMA_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "Salutation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SalutationBase"
          },
          {
            "type": "object",
            "description": "This list contains all salutatory texts that can be defined as salutations for\nan employee in the \"Personnel\" form. These salutatory texts are already included\nin the delivery of eTASK.FM Portal.\n\nSystemName: Salutation\nin DEBUG only\nDbName: PS_ANREDE_T",
            "additionalProperties": false
          }
        ]
      },
      "SalutationBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "FormOfAddress"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "-- SUMMARY MISSING --\n\nLabel: ANREDE_ID\nin DEBUG only\nDbName: PS_ANREDE_T.ANREDE_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "FormOfAddress": {
            "type": "string",
            "description": "Enter the address text (e.g., \"Mrs.\").\n\nLabel: Form of Address\nin DEBUG only\nDbName: PS_ANREDE_T.ANREDE_BEZEICHNUNG\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: PS_ANREDE_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: PS_ANREDE_T.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: PS_ANREDE_T.CREATED_FROM\nDbType: nvarchar(50) NOT NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: PS_ANREDE_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: PS_ANREDE_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: PS_ANREDE_T.CHANGE_DATE\nDbType: datetime NULL\nDbDefault: (getdate())",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: PS_ANREDE_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: PS_ANREDE_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "Site": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SiteBase"
          },
          {
            "type": "object",
            "description": "Create data records for the different locations of your organization. These\nlocations represent locations of companies and branches and can be selected\nlater, for example in forms for buildings, in order to clearly determine their\nlocation. The \"Locations\" form shows the buildings already assigned to the\nlocation. This assignment of buildings cannot be changed here, but only in the\n\"Buildings\" form. When using eTASK. open spaces, the list of all parking spaces\nat the location is also displayed.\n\nSystemName: Site\nin DEBUG only\nDbName: FL_STANDORT_T",
            "additionalProperties": false
          }
        ]
      },
      "SiteBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "Country",
          "City",
          "Code",
          "Name",
          "Street",
          "ZipCode"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "TRANSLATION MISSING\n\nLabel: ID\nin DEBUG only\nDbName: FL_STANDORT_T.STANDORT_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "Buildings": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Buildings"
              }
            ]
          },
          "Country": {
            "type": "integer",
            "description": "Select the country of the location.\n\nLabel: Country\nin DEBUG only\nDbName: FL_STANDORT_T.LAND_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32"
          },
          "HierarchicalLevel": {
            "type": "integer",
            "description": "Select the hierarchical level 3 of the location\n\nLabel: Hierarchical Level 3\nin DEBUG only\nDbName: FL_STANDORT_T.BEZIRKSDIREKTION_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "ManagerCompanyAddress": {
            "description": "To be texted by jens.coosmann@etask.de\n\nLabel: Administrator\nin DEBUG only\nDbName: FL_STANDORT_T.VERWALTER\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyAddress"
              }
            ]
          },
          "ManagerContactPerson": {
            "description": "Select the administrator’s contact person.\n\nLabel: Contact Person\nin DEBUG only\nDbName: FL_STANDORT_T.VERWALTER_PERSONAL_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Person"
              }
            ]
          },
          "OwnerCompanyAddress": {
            "description": "Select the proprietor.\n\nLabel: Proprietor\nin DEBUG only\nDbName: FL_STANDORT_T.EIGENTUEMER\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyAddress"
              }
            ]
          },
          "OwnerContactPerson": {
            "description": "Select the proprietor’s contact person.\n\nLabel: Contact Person\nin DEBUG only\nDbName: FL_STANDORT_T.EIGENTUEMER_PERSONAL_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Person"
              }
            ]
          },
          "PortfolioCategory": {
            "type": "integer",
            "description": "Select the portfolio category to which the present location belongs.\n\nLabel: Category\nin DEBUG only\nDbName: FL_STANDORT_T.CASHFLOW_PORTFOLIO_KATEGORIE\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "PortfolioGroup": {
            "type": "integer",
            "description": "Select the portfolio cluster to which the location belongs.\n\nLabel: Portfolio Cluster\nin DEBUG only\nDbName: FL_STANDORT_T.CASHFLOW_PORTFOLIO_CLUSTER\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "PortfolioType": {
            "type": "integer",
            "description": "Select the portfolio’s portfolio type to which the present location belongs.\n\nLabel: Type\nin DEBUG only\nDbName: FL_STANDORT_T.CASHFLOW_PORTFOLIO_TYP\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "CadastralRegisterNo": {
            "type": "string",
            "description": "Enter the location's cadastral register no.\n\nLabel: Cadastral Register No.\nin DEBUG only\nDbName: FL_STANDORT_T.LI_BUCHNUMMER\nDbType: varchar(5) NULL\nDbDefault: ",
            "maxLength": 5,
            "nullable": true
          },
          "CadOid": {
            "type": "string",
            "description": "TRANSLATION MISSING\n\nLabel: OID\nin DEBUG only\nDbName: FL_STANDORT_T.STANDORT_OID\nDbType: varchar(18) NULL\nDbDefault: ",
            "maxLength": 18,
            "nullable": true
          },
          "City": {
            "type": "string",
            "description": "Enter the city from the location's main address.\n\nLabel: City\nin DEBUG only\nDbName: FL_STANDORT_T.STANDORT_ORT\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "Code": {
            "type": "string",
            "description": "Enter an abbreviation for the location (e.g. an abbreviation for the location\nmade up of three letters; \"MUC\" for \"Munich\",\n\"BER\" for \"Berlin\"). The location's code forms the first\npart of the codes of all buildings, floors, rooms, and work stations situated at\nthe location.\n\nLabel: Code\nin DEBUG only\nDbName: FL_STANDORT_T.STANDORT_CODE\nDbType: varchar(10) NOT NULL\nDbDefault: ",
            "maxLength": 10,
            "minLength": 1
          },
          "ContactPerson": {
            "type": "string",
            "description": "Enter the name of the main contact person of the location for all issues\ninvolving neighboring parties.\n\nLabel: Contact Person\nin DEBUG only\nDbName: FL_STANDORT_T.STANDORT_PERSON\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "CostCenter": {
            "type": "string",
            "description": "Enter the cost centers to be used for assessing the financial planning system.\n\nLabel: Cost Center\nin DEBUG only\nDbName: FL_STANDORT_T.CASHFLOW_KOSTENSTELLE\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "DoNotCalculateOperatingCosts": {
            "type": "boolean",
            "description": "Indicates whether the operating costs for this site should not be calculated.\n\nLabel: Do not calculate operating costs\nin DEBUG only\nDbName: FL_STANDORT_T.BK_NICHT_BERECHNEN\nDbType: bit NULL\nDbDefault: ((0))",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Enter the primary email address of the location.\n\nLabel: E-Mail\nin DEBUG only\nDbName: FL_STANDORT_T.STANDORT_EMAIL\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "FloorSpaceRatio": {
            "type": "number",
            "description": "Enter the location’s floor space ratio.\n\nLabel: Floor Space Ratio\nin DEBUG only\nDbName: FL_STANDORT_T.GFZ\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "IfcGlobalId": {
            "type": "string",
            "description": "To be texted by jens.coosmann@etask.de\n\nLabel: IFC_GLOBALID\nin DEBUG only\nDbName: FL_STANDORT_T.IFC_GLOBALID\nDbType: nvarchar(22) NULL\nDbDefault: ",
            "maxLength": 22,
            "nullable": true
          },
          "Latitude": {
            "type": "string",
            "description": "Enter the latitude of the location (e.g. the entrance area) for easier\nvisualization in map services (such as Google Maps).\n\nLabel: Latitude\nin DEBUG only\nDbName: FL_STANDORT_T.BREITENGRAD\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Longitude": {
            "type": "string",
            "description": "Enter the longitude of the location for easier visualization in map services\n(such as Google Maps).\n\nLabel: Longitude\nin DEBUG only\nDbName: FL_STANDORT_T.LAENGENGRAD\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Enter a detailed name for the location. The abbreviation entered here is the\nstart of the code for all buildings, rooms, floors and workstations created for\nthis location.\n\nLabel: Name\nin DEBUG only\nDbName: FL_STANDORT_T.STANDORT_BEZEICHNUNG\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "Parcel": {
            "type": "string",
            "description": "Enter the name of the parcel on which the location is built.\n\nLabel: Parcel\nin DEBUG only\nDbName: FL_STANDORT_T.FLURSTUECK\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Phone1": {
            "type": "string",
            "description": "Enter the primary phone number of the location (main office).\n\nLabel: Phone 1\nin DEBUG only\nDbName: FL_STANDORT_T.STANDORT_TEL_1\nDbType: varchar(25) NULL\nDbDefault: ",
            "maxLength": 25,
            "nullable": true
          },
          "Phone2": {
            "type": "string",
            "description": "Enter an alternative phone number for the location.\n\nLabel: Phone 2\nin DEBUG only\nDbName: FL_STANDORT_T.STANDORT_TEL_2\nDbType: varchar(25) NULL\nDbDefault: ",
            "maxLength": 25,
            "nullable": true
          },
          "ProfitCenter": {
            "type": "string",
            "description": "Enter the profit center to be used for carrying out assessments in the financial\nplanning system.\n\nLabel: Profit Center\nin DEBUG only\nDbName: FL_STANDORT_T.CASHFLOW_PROFITCENTER\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Remark": {
            "type": "string",
            "description": "Enter a comment or a note for recording more information about the location.\n\nLabel: Remarks\nin DEBUG only\nDbName: FL_STANDORT_T.STANDORT_KOMMENTAR\nDbType: varchar(1000) NULL\nDbDefault: ",
            "maxLength": 1000,
            "nullable": true
          },
          "SiteCoverageIndex": {
            "type": "number",
            "description": "Enter the location’s site coverage index.\n\nLabel: Site Coverage Index\nin DEBUG only\nDbName: FL_STANDORT_T.GRZ\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "Street": {
            "type": "string",
            "description": "Enter the street name of the location. The street and house number should be\nentered one after the other (e.g. . \"North street 45\".\n\nLabel: Street Address\nin DEBUG only\nDbName: FL_STANDORT_T.STANDORT_STRASSE\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "TimeZone": {
            "type": "string",
            "description": "Time Zone\n\nLabel: Time Zone\nin DEBUG only\nDbName: FL_STANDORT_T.TIMEZONE_ID\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "ZipCode": {
            "type": "string",
            "description": "Enter the postal code of the location's main address.\n\nLabel: Postal code\nin DEBUG only\nDbName: FL_STANDORT_T.STANDORT_PLZ\nDbType: varchar(10) NULL\nDbDefault: ",
            "maxLength": 10,
            "minLength": 1
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: FL_STANDORT_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: FL_STANDORT_T.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: FL_STANDORT_T.CREATED_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: FL_STANDORT_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: FL_STANDORT_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: FL_STANDORT_T.CHANGE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: FL_STANDORT_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: FL_STANDORT_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "DataSourcesOfPersonData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataSourcesOfPersonDataBase"
          },
          {
            "type": "object",
            "description": "Manage data origins using this form. Enter various sources of personnel data\nhere if they are imported by a third party system.\n\nSystemName: DataSourcesOfPersonData\nin DEBUG only\nDbName: PS_HERKUNFT_T",
            "additionalProperties": false
          }
        ]
      },
      "DataSourcesOfPersonDataBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "SourceName"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ID\n\nLabel: ID\nin DEBUG only\nDbName: PS_HERKUNFT_T.HERKUNFT_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "SourceName": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: PS_HERKUNFT_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: PS_HERKUNFT_T.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: PS_HERKUNFT_T.CREATED_FROM\nDbType: nvarchar(50) NOT NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: PS_HERKUNFT_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: PS_HERKUNFT_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: PS_HERKUNFT_T.CHANGE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: PS_HERKUNFT_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: PS_HERKUNFT_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "ApiException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ExceptionBase"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ExceptionBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Exception"
          },
          {
            "type": "object",
            "description": "Basis class for all exceptions that can be thrown by a business object",
            "additionalProperties": false
          }
        ]
      },
      "Exception": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Message": {
            "type": "string",
            "nullable": true
          },
          "InnerException": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Exception"
              }
            ]
          },
          "StackTrace": {
            "type": "string",
            "nullable": true
          },
          "Source": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RentalMonth": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RentalMonthBase"
          },
          {
            "type": "object",
            "description": "This list contains the months provided by the system (day, number of\ndays/month).\n\nSystemName: RentalMonth\nin DEBUG only\nDbName: VM_MONATE_STAMMDATEN",
            "additionalProperties": false
          }
        ]
      },
      "RentalMonthBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "DaysInMonth",
          "FirstDayMonth",
          "LastDayMonth",
          "Month"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "[de]VM_MONATE_STAMMDATEN_ID\n\nLabel: VM_MONTHS_MASTER_DATA_ID\nin DEBUG only\nDbName: VM_MONATE_STAMMDATEN.VM_MONATE_STAMMDATEN_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "DaysInMonth": {
            "type": "number",
            "description": "[de]Tage\n\nLabel: period\nin DEBUG only\nDbName: VM_MONATE_STAMMDATEN.M_TAGE\nDbType: numeric NOT NULL\nDbDefault: ",
            "format": "decimal"
          },
          "FirstDayMonth": {
            "type": "string",
            "description": "[de]Von\n\nLabel: From\nin DEBUG only\nDbName: VM_MONATE_STAMMDATEN.M_VON\nDbType: datetime NOT NULL\nDbDefault: ",
            "format": "date-time",
            "minLength": 1
          },
          "LastDayMonth": {
            "type": "string",
            "description": "[de]Bis\n\nLabel: Until\nin DEBUG only\nDbName: VM_MONATE_STAMMDATEN.M_BIS\nDbType: datetime NOT NULL\nDbDefault: ",
            "format": "date-time",
            "minLength": 1
          },
          "Month": {
            "type": "string",
            "description": "[de]Monat\n\nLabel: month\nin DEBUG only\nDbName: VM_MONATE_STAMMDATEN.MONAT\nDbType: varchar(7) NOT NULL\nDbDefault: ",
            "maxLength": 7,
            "minLength": 1
          },
          "MonthName": {
            "type": "string",
            "description": "[de]Name\n\nLabel: moniker\nin DEBUG only\nDbName: VM_MONATE_STAMMDATEN.MONAT_NAME\nDbType: varchar(15) NULL\nDbDefault: ",
            "maxLength": 15,
            "nullable": true
          },
          "Vat": {
            "type": "number",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: VM_MONATE_STAMMDATEN.MWST\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "VatReduced": {
            "type": "number",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: VM_MONATE_STAMMDATEN.MWST_ERMAESSIGT\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: VM_MONATE_STAMMDATEN.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: VM_MONATE_STAMMDATEN.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: VM_MONATE_STAMMDATEN.CREATED_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: VM_MONATE_STAMMDATEN.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: VM_MONATE_STAMMDATEN.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: VM_MONATE_STAMMDATEN.CHANGE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: VM_MONATE_STAMMDATEN.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: VM_MONATE_STAMMDATEN.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "EanCategory": {
        "type": "object",
        "description": "Use this form to create categories for internal settlement numbers so that you\ncan specify them later.\n\nSystemName: EanCategory\nin DEBUG only\nDbName: PM_EAN_KATEGORIE_T",
        "additionalProperties": false
      },
      "InternalOrderEan": {
        "type": "object",
        "description": "Use this form to create internal payroll numbers (EANs) that your employees can\nuse to run payroll for their hours. Also make various settings for billing the\nhours.\n\nSystemName: InternalOrderEan\nin DEBUG only\nDbName: PM_EAN_T",
        "additionalProperties": false
      },
      "PaidOvertimeHour": {
        "type": "object",
        "description": "Manage the overtime hours paid out to employees of your company.\n\nSystemName: PaidOvertimeHour\nin DEBUG only\nDbName: PM_MITARBEITER_UEBERSTUNDEN_T",
        "additionalProperties": false
      },
      "ProjectStaff": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProjectStaffBase"
          },
          {
            "type": "object",
            "description": "Create data records for the employees in your company so that you can manage\nthem within project management. Enter the personal data and the bank details for\npayroll. Write down information on working hours and the employee's leave times.\n\nSystemName: ProjectStaff\nin DEBUG only\nDbName: PM_MITARBEITER_T",
            "additionalProperties": false,
            "properties": {
              "WorkingTimeAccount": {
                "description": "Gets or sets the working time account.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WorkingTimeAccount"
                  }
                ]
              }
            }
          }
        ]
      },
      "WorkingTimeAccount": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Workplace": {
            "type": "string",
            "description": "Gets or sets the workplace of the projectstaff",
            "nullable": true
          },
          "TotalTargetHours": {
            "type": "number",
            "description": "Gets or sets the total target hours.",
            "format": "double"
          },
          "TotalWorkedHours": {
            "type": "number",
            "description": "Gets or sets the total worked hours.",
            "format": "double"
          },
          "TotalHoursDifference": {
            "type": "number",
            "description": "Gets difference TotalTargetHours - TotalWorkedHours",
            "format": "double"
          },
          "OvertimeHours": {
            "type": "number",
            "description": "Gets or sets the overtime hours.",
            "format": "double"
          },
          "OvertimePaid": {
            "type": "number",
            "description": "Gets or sets the paid overtime.",
            "format": "double"
          },
          "RemainingVacationLastYear": {
            "type": "number",
            "description": "Gets remaining vacation from last year",
            "format": "double"
          },
          "TotalVacationThisYear": {
            "type": "number",
            "description": "Gets vacation entitlement this year",
            "format": "double"
          },
          "VacationEntitlement": {
            "type": "number",
            "description": "Gets total vacation this year",
            "format": "double"
          },
          "RemainingVacation": {
            "type": "number",
            "description": "Gets or sets the remaining vacation.",
            "format": "double"
          },
          "TakenVacationThisYear": {
            "type": "number",
            "description": "Gets taken Vacation this year",
            "format": "double"
          },
          "TakenVacationThisMonth": {
            "type": "number",
            "description": "Gets taken Vacation this month",
            "format": "double"
          }
        }
      },
      "ProjectStaffBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "Company",
          "Person",
          "Persontype",
          "City",
          "Code",
          "DateOfStaffentry",
          "Group",
          "HourlyAccount",
          "PortalLogin",
          "ProjectManager",
          "Salutation",
          "StreetWithNumber",
          "Timesheets",
          "ZipCode"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ID\n\nLabel: ID\nin DEBUG only\nDbName: PM_MITARBEITER_T.PERSONAL_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "PaidOvertimeHours": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaidOvertimeHours"
              }
            ]
          },
          "Company": {
            "description": "Selection of the company for which the employee works.\n\nLabel: business concern\nin DEBUG only\nDbName: PM_MITARBEITER_T.FIRMA_ID\nDbType: int NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyAddress"
              }
            ]
          },
          "Person": {
            "description": "Selection of the employee These entries come from the personnel list.\n\nLabel: coworker\nin DEBUG only\nDbName: PM_MITARBEITER_T.PERSONALID\nDbType: int NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Person"
              }
            ]
          },
          "Persontype": {
            "type": "integer",
            "description": "Personnel type\n\nLabel: Personnel type\nin DEBUG only\nDbName: PM_MITARBEITER_T.PERSONALTYP_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32"
          },
          "Room": {
            "description": "Room\n\nLabel: Room\nin DEBUG only\nDbName: PM_MITARBEITER_T.RAUM_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Room"
              }
            ]
          },
          "AccountNumber": {
            "type": "string",
            "description": "Account number\n\nLabel: Account number\nin DEBUG only\nDbName: PM_MITARBEITER_T.KONTONUMMER\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "ActivedirectoryAccount": {
            "type": "string",
            "description": "ActiveDirectory Account\n\nLabel: ActiveDirectory Account\nin DEBUG only\nDbName: PM_MITARBEITER_T.AD_ACCOUNT\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Bank": {
            "type": "string",
            "description": "Bank\n\nLabel: Bank\nin DEBUG only\nDbName: PM_MITARBEITER_T.BANK\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "BankCode": {
            "type": "string",
            "description": "Bank code\n\nLabel: Bank code\nin DEBUG only\nDbName: PM_MITARBEITER_T.BLZ\nDbType: varchar(10) NULL\nDbDefault: ",
            "maxLength": 10,
            "nullable": true
          },
          "City": {
            "type": "string",
            "description": "City\n\nLabel: City\nin DEBUG only\nDbName: PM_MITARBEITER_T.ORT\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "Code": {
            "type": "string",
            "description": "Code\n\nLabel: Code\nin DEBUG only\nDbName: PM_MITARBEITER_T.PERSONAL_CODE\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "DateOfStaffentry": {
            "type": "string",
            "description": "Date of staff entry\n\nLabel: Date of staff entry\nin DEBUG only\nDbName: PM_MITARBEITER_T.EINTRITTSDATUM\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "minLength": 1
          },
          "ExitDate": {
            "type": "string",
            "description": "Exit Date\n\nLabel: Exit Date\nin DEBUG only\nDbName: PM_MITARBEITER_T.AUSTRITTSDATUM\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "readOnly": true,
            "description": "First name\n\nLabel: First name\nin DEBUG only\nDbName: PM_MITARBEITER_T.VORNAME\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Group": {
            "type": "string",
            "description": "Group\n\nLabel: Group\nin DEBUG only\nDbName: PM_MITARBEITER_T.GRUPPE\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "HolidayAccountPer06090": {
            "type": "number",
            "description": "Enter the employee's remaining leave at the time when the FM module\neTASK.project management was set up.\n\nLabel: Vacation account on installation date\nin DEBUG only\nDbName: PM_MITARBEITER_T.URLAUBSKONTO_060930\nDbType: float NULL\nDbDefault: ((0))",
            "format": "double",
            "nullable": true
          },
          "HourlyAccount": {
            "type": "boolean",
            "description": "TRANSLATION MISSING\n\nLabel: TRANSLATION MISSING\nin DEBUG only\nDbName: PM_MITARBEITER_T.STUNDENKONTO\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "HourlyRate": {
            "type": "number",
            "description": "Hourly rate\n\nLabel: Hourly rate\nin DEBUG only\nDbName: PM_MITARBEITER_T.STUNDENSATZ_SK\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "IntranetId": {
            "type": "integer",
            "description": "-- SUMMARY MISSING --\n\nLabel: INTRANET_ID\nin DEBUG only\nDbName: PM_MITARBEITER_T.INTRANET_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "readOnly": true,
            "description": "Last name\n\nLabel: Last name\nin DEBUG only\nDbName: PM_MITARBEITER_T.NACHNAME\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "PortalLogin": {
            "type": "string",
            "description": "Portal Login\n\nLabel: Portal Login\nin DEBUG only\nDbName: PM_MITARBEITER_T.MITARBEITER_PORTAL_LOGIN\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "ProjectManager": {
            "type": "boolean",
            "description": "Project manager\n\nLabel: Project manager\nin DEBUG only\nDbName: PM_MITARBEITER_T.PROJEKTLEITER\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "ProjectStaffPer06090": {
            "type": "number",
            "description": "Enter the employee's overtime hours at the time when the FM module eTASK.project\nmanagement was set up.\n\nLabel: Hourly account on installation date\nin DEBUG only\nDbName: PM_MITARBEITER_T.STUNDENKONTO_060930\nDbType: float NULL\nDbDefault: ((0))",
            "format": "double",
            "nullable": true
          },
          "Salutation": {
            "type": "string",
            "description": "Salutation\n\nLabel: Salutation\nin DEBUG only\nDbName: PM_MITARBEITER_T.BRIEFANREDE\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "StreetWithNumber": {
            "type": "string",
            "description": "Street, Street number\n\nLabel: Street, Street number\nin DEBUG only\nDbName: PM_MITARBEITER_T.STRASSE\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "Timesheets": {
            "type": "boolean",
            "description": "Timesheets\n\nLabel: Timesheets\nin DEBUG only\nDbName: PM_MITARBEITER_T.PFLEGE_LEISTUNGSNACHWEISE\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "Title": {
            "type": "string",
            "readOnly": true,
            "description": "Title\n\nLabel: Title\nin DEBUG only\nDbName: PM_MITARBEITER_T.ANREDE\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "VacationDaysyear": {
            "type": "integer",
            "description": "Vacation days / year\n\nLabel: Vacation days / year\nin DEBUG only\nDbName: PM_MITARBEITER_T.ANZAHL_URLAUBSTAGE_PA\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "WeeklyHoursOfwork": {
            "type": "integer",
            "description": "Weekly hours of work\n\nLabel: Weekly hours of work\nin DEBUG only\nDbName: PM_MITARBEITER_T.WOCHENARBEITSZEIT\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "ZipCode": {
            "type": "string",
            "description": "Postal code\n\nLabel: Postal code\nin DEBUG only\nDbName: PM_MITARBEITER_T.PLZ\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: PM_MITARBEITER_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: PM_MITARBEITER_T.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: PM_MITARBEITER_T.CREATED_FROM\nDbType: nvarchar(50) NOT NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: PM_MITARBEITER_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: PM_MITARBEITER_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: PM_MITARBEITER_T.CHANGE_DATE\nDbType: datetime NULL\nDbDefault: (getdate())",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: PM_MITARBEITER_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: PM_MITARBEITER_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "PaidOvertimeHours": {
        "type": "object",
        "description": "Collection of PaidOvertimeHour",
        "additionalProperties": false
      },
      "Room": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RoomBase"
          },
          {
            "type": "object",
            "description": "Manage data records for each individual room in the building to ensure complete\nspace management. Only the room area entered here influences the areas of floors\nand buildings. Spatial data sets are the basis for many other components of the\nFM portal and other eTASK products. They are used, for example, to make room\nbookings or to assign employees and objects to them. First select the floor on\nwhich the room is located. Then assign a room number and the space usage of the\nroom according to DIN 277 (or according to in-house standards) to each room. Add\ninformation on the settlement of space costs, the floor space of the room, and\nthe number of work centers available in the room. Then assign the current\nreservation (work center and employee) to the room. Upload a photo of the room\nand manage information on the structural condition of the room (flooring,\ntraffic load, etc.). Add one or more cost centers for the room and data to\ncommunication devices that are available in the room. Finally, you can create or\nview data records for objects in the room. When using eTASK.CAD, the room is\ndisplayed in the floor plan after clicking on the magnifying glass icon. When\nusing eTASK Furniture, all furniture in the room is displayed or added. The same\napplies when using eTASK.equipment/IT for the IT devices in the room. If eTASK.\ndefect management is connected, all construction defects found in the room are\nalso displayed.\n\nSystemName: Room\nin DEBUG only\nDbName: FL_RAUM_T",
            "additionalProperties": false
          }
        ]
      },
      "RoomBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "Floor",
          "UsageTypeDin277",
          "CanBeHeated",
          "Daylight",
          "ElectricitySupply",
          "Elevator",
          "FalseCeiling",
          "FloorDrainage",
          "GuaranteedMinimumRent",
          "Lettable",
          "RentableInComplexContract",
          "Reservable",
          "RoomNumber"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "TRANSLATION MISSING\n\nLabel: Room ID\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "CeilingCovering": {
            "type": "integer",
            "description": "Select the ceiling covering.\n\nLabel: Ceiling Covering\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_DECKENBELAG_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "CompanyAddressOfOwner": {
            "description": "Select the owner of the room if different to the owner of the building.\n\nLabel: Owner\nin DEBUG only\nDbName: FL_RAUM_T.EIGENTUEMER_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyAddress"
              }
            ]
          },
          "CostCenter": {
            "description": "If not building cost center\n\nLabel: Different cost center\nin DEBUG only\nDbName: FL_RAUM_T.KOSTENSTELLE_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CostCenter"
              }
            ]
          },
          "Floor": {
            "description": "Select the floor on which the room is located.\n\nLabel: Floor\nin DEBUG only\nDbName: FL_RAUM_T.ETAGE_ID\nDbType: int NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Floor"
              }
            ]
          },
          "FloorCovering": {
            "type": "integer",
            "description": "Select the room's floor covering.\n\nLabel: Floor Covering\nin DEBUG only\nDbName: FL_RAUM_T.BODENBELAG_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "InternalUsageType": {
            "type": "integer",
            "description": "Select the room usage type defined in-house.\n\nLabel: Internal Usage Type\nin DEBUG only\nDbName: FL_RAUM_T.NUTZUNGSFALL_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "Landlord": {
            "readOnly": true,
            "description": "Select the lessor of the room.\n\nLabel: Lessor\nin DEBUG only\nDbName: FL_RAUM_T.VERMIETER_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyAddress"
              }
            ]
          },
          "PrimaryUsageStatus": {
            "type": "integer",
            "description": "Select the primary usage status.\n\nLabel: Primary Utilization Status\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_NUTZUNGSSTATUS_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "ReservedForTenancyAgreement": {
            "type": "integer",
            "description": "Option to rent for\n\nLabel: Option to rent for\nin DEBUG only\nDbName: FL_RAUM_T.RESERVIERT_FUER_MIETVERTRAG_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "RoomGroup": {
            "type": "integer",
            "description": "Select the room group to which the room belongs.\n\nLabel: Room Group\nin DEBUG only\nDbName: FL_RAUM_T.RAUMGRUPPE_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "SecondaryUsageStatus": {
            "type": "integer",
            "description": "Select the secondary usage status.\n\nLabel: Secondary Utilization Status\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_NUTZUNGSSTATUS_2_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "SpaceAllocation": {
            "type": "integer",
            "description": "Select the higher level instance to which the room space is assigned and which\nshould be charged with the room costs (e.g. the costs for using a corridor on a\nfloor are split between all residents on that floor).\n\nLabel: Space Allocation\nin DEBUG only\nDbName: FL_RAUM_T.FLAECHEN_ZUTEILUNG_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "SpaceCategory": {
            "type": "integer",
            "description": "Select the space type.\n\nLabel: Space Type\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_FLAECHENTYP_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "SpaceServiceType": {
            "type": "integer",
            "description": "To be texted by jens.coosmann@etask.de\n\nLabel: activity type\nin DEBUG only\nDbName: FL_RAUM_T.LEISTUNGSART_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "SurchargeForActivityType": {
            "type": "integer",
            "description": "To be texted by jens.coosmann@etask.de\n\nLabel: Surcharge for activity type\nin DEBUG only\nDbName: FL_RAUM_T.LEISTUNGSART_ZUSCHLAG_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "Tenant": {
            "readOnly": true,
            "description": "Select the company which has leased the room.\n\nLabel: Lessee\nin DEBUG only\nDbName: FL_RAUM_T.MIETER_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyAddress"
              }
            ]
          },
          "UsageTypeDin277": {
            "type": "integer",
            "description": "Select the room usage type according to DIN 277-2.\n\nLabel: Usage Type (DIN 277-2)\nin DEBUG only\nDbName: FL_RAUM_T.NUTZUNGSART_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32"
          },
          "WallCovering": {
            "type": "integer",
            "description": "Select the wall covering.\n\nLabel: Wall Covering\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_WANDBELAG_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "Acoustics": {
            "type": "string",
            "description": "Enter information about the room's acoustics.\n\nLabel: Acoustics\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_AKUSTIK\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "AlternativeCode": {
            "type": "string",
            "readOnly": true,
            "description": "Enter an alternative code for the room if your company uses a different code\nsystem to the one allocated by FM-Portal.\n\nLabel: Alternative Code\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_CODE_VARIANTE_1\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Area": {
            "type": "number",
            "description": "Enter the room's floor space in square meters. If using eTASK.CAD this field is\nautomatically filled in with the space data from Aperture Client.\n\nLabel: Floor Space [m²]\nin DEBUG only\nDbName: FL_RAUM_T.FLAECHE\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "Barcode": {
            "type": "string",
            "description": "If your company uses eTASK.Inventory, enter the barcode for the room.\n\nLabel: Bar Code\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_BARCODE\nDbType: varchar(30) NULL\nDbDefault: ",
            "maxLength": 30,
            "nullable": true
          },
          "CadOid": {
            "type": "string",
            "readOnly": true,
            "description": "necessary for Aperture visualization\n\nLabel: Object ID\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_OID\nDbType: varchar(18) NULL\nDbDefault: ",
            "maxLength": 18,
            "nullable": true
          },
          "CanBeHeated": {
            "type": "boolean",
            "description": "Indicate whether the room can be heated.\n\nLabel: Can Be Heated\nin DEBUG only\nDbName: FL_RAUM_T.BEHEIZBAR\nDbType: bit NOT NULL\nDbDefault: ((-1))"
          },
          "CategoryDescription": {
            "type": "string",
            "description": "Category\n\nLabel: Category\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_KATEGORIE_LANG\nDbType: nvarchar(25) NULL\nDbDefault: ",
            "maxLength": 25,
            "nullable": true
          },
          "CeilingArea": {
            "type": "number",
            "description": "If the ceiling dimensions are specified, the area can be calculated\nautomatically.\n\nLabel: Ceiling area[m²]\nin DEBUG only\nDbName: FL_RAUM_T.DECKENFLAECHE\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "CeilingAttributes": {
            "type": "string",
            "description": "Indication of ceiling attributes such as e.g. fire retardant, with fill etc.)\n\nLabel: ceiling attributes\nin DEBUG only\nDbName: FL_RAUM_T.DECKENATTRIBUTE\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "CeilingDepth": {
            "type": "number",
            "description": "Indication of the ceiling length\n\nLabel: Length/Depth[m]\nin DEBUG only\nDbName: FL_RAUM_T.DECKENTIEFE\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "CeilingLoadBearingCapacity": {
            "type": "number",
            "description": "Specification of the permissible ceiling load\n\nLabel: Ceiling load[kN/m²]\nin DEBUG only\nDbName: FL_RAUM_T.DECKENLAST\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "CeilingMaterial": {
            "type": "string",
            "description": "Indication of the ceiling material\n\nLabel: stock\nin DEBUG only\nDbName: FL_RAUM_T.DECKENMATERIAL\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "CeilingSystem": {
            "type": "string",
            "description": "Indication of the ceiling system (e.g. removable)\n\nLabel: ceiling system\nin DEBUG only\nDbName: FL_RAUM_T.DECKENSYSTEM\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "CeilingWidth": {
            "type": "number",
            "description": "Indication of ceiling width\n\nLabel: Width[m]\nin DEBUG only\nDbName: FL_RAUM_T.DECKENBREITE\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "Circumference": {
            "type": "number",
            "description": "Enter a value for the room’s circumference.\n\nLabel: Circumference [m]\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_UMFANG\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "CleanlinessClass": {
            "type": "string",
            "description": "Cleanliness Class\n\nLabel: Cleanliness Class\nin DEBUG only\nDbName: FL_RAUM_T.REINHEITS_KLASSE\nDbType: varchar(3) NULL\nDbDefault: ",
            "maxLength": 3,
            "nullable": true
          },
          "Code": {
            "type": "string",
            "readOnly": true,
            "description": "Displays the room code which is automatically generated by the system when saved\nfor the first time. The room code consists of the code for the selected floor on\nwhich the room is located as well as the room number.\n\nLabel: Code\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_CODE\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "CurrentCondition": {
            "type": "string",
            "description": "Current condition\n\nLabel: Current condition\nin DEBUG only\nDbName: FL_RAUM_T.FB_ZUSTAND\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "DateOfLaying": {
            "type": "string",
            "description": "Date of laying\n\nLabel: Date of laying\nin DEBUG only\nDbName: FL_RAUM_T.FB_VERLEGEDATUM\nDbType: smalldatetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "Daylight": {
            "type": "boolean",
            "description": "Indicate whether the room is provided with daylight.\n\nLabel: Daylight\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_TAGESLICHT\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "DescriptionOfLocation": {
            "type": "string",
            "description": "Description of Location\n\nLabel: Description of Location\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_LAGEBESCHREIBUNG\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "ElectricitySupply": {
            "type": "boolean",
            "description": "Electricity Supply\n\nLabel: Electricity Supply\nin DEBUG only\nDbName: FL_RAUM_T.ELEKTROANSCHLUSS\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "Elevator": {
            "type": "boolean",
            "description": "Elevator?\n\nLabel: Elevator?\nin DEBUG only\nDbName: FL_RAUM_T.NUTZUNG_AUFZUG\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "EscapeRoute": {
            "type": "integer",
            "description": "Escape Route\n\nLabel: Escape Route\nin DEBUG only\nDbName: FL_RAUM_T.FLUCHTWEG\nDbType: smallint NULL\nDbDefault: ",
            "nullable": true
          },
          "FalseCeiling": {
            "type": "boolean",
            "description": "Please check this box if the room has a suspended ceiling.\n\nLabel: false ceiling\nin DEBUG only\nDbName: FL_RAUM_T.UNTERDECKE\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "FloorDrainage": {
            "type": "boolean",
            "description": "Floor drainage\n\nLabel: Floor drainage\nin DEBUG only\nDbName: FL_RAUM_T.FB_ENTWAESSERUNG\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "FloorStructure": {
            "type": "string",
            "description": "Floor structure\n\nLabel: Floor structure\nin DEBUG only\nDbName: FL_RAUM_T.FB_AUFBAU\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "GuaranteedMinimumRent": {
            "type": "boolean",
            "description": "Guaranteed Minimum Rent\n\nLabel: Guaranteed Minimum Rent\nin DEBUG only\nDbName: FL_RAUM_T.MIETGARANTIE\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "HeatableSurfacem178": {
            "type": "number",
            "description": "Heatable Surface [m²]\n\nLabel: Heatable Surface [m²]\nin DEBUG only\nDbName: FL_RAUM_T.BEHEIZBARE_FLAECHE\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "IfcGlobalId": {
            "type": "string",
            "description": "To be texted by jens.coosmann@etask.de\n\nLabel: IFC_GLOBALID\nin DEBUG only\nDbName: FL_RAUM_T.IFC_GLOBALID\nDbType: nvarchar(22) NULL\nDbDefault: ",
            "maxLength": 22,
            "nullable": true
          },
          "ImputedAreaForSpaceDistribution": {
            "type": "number",
            "readOnly": true,
            "description": "Imputed Area for Space Distribution\n\nLabel: Imputed Area for Space Distribution\nin DEBUG only\nDbName: FL_RAUM_T.CALC_FLAECHE\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "LeasePricePerSquaremeter": {
            "type": "number",
            "description": "Enter the lease price of the room per square meter.\n\nLabel: Lease Price / m²\nin DEBUG only\nDbName: FL_RAUM_T.MIETPREIS_QM\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "Lettable": {
            "type": "boolean",
            "description": "Indicate whether the room is lettable.\n\nLabel: Lettable\nin DEBUG only\nDbName: FL_RAUM_T.VERMIETBAR\nDbType: bit NOT NULL\nDbDefault: ((-1))"
          },
          "LightExposureMax": {
            "type": "string",
            "description": "Enter the maximum lighting in lux.\n\nLabel: Max. Light Exposure [lx]\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_BELICHTUNG_MIN\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "LightExposureMin": {
            "type": "string",
            "description": "Enter the minimum lighting in lux.\n\nLabel: Min. Light Exposure [lx]\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_BELICHTUNG_MAX\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "LimitAirPurity": {
            "type": "string",
            "description": "Enter the maximum limit of air purity in pollution particles per cubic meter.\n\nLabel: Limit Air Purity\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_REINHEIT\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "LimitHumidity": {
            "type": "string",
            "description": "Enter the maximum limit for relative humidity as a percentage.\n\nLabel: Limit Humidity [%]\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_LUFTFEUCHTIGKEIT\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "LimitNoiseLevel": {
            "type": "string",
            "description": "Enter the maximum noise level in dBA.\n\nLabel: Limit Noise Level [dBA]\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_LAERMPEGEL\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "LoadBearingCapacity": {
            "type": "number",
            "description": "Indication of the carrying capacity of the floor\n\nLabel: Carrying capacity [kN/sqm]\nin DEBUG only\nDbName: FL_RAUM_T.TRAGFAEHIGKEIT\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "MaterialNumber": {
            "type": "string",
            "description": "Enter the material number\n\nLabel: material number\nin DEBUG only\nDbName: FL_RAUM_T.VERRECHNUNG_RAUM\nDbType: varchar(25) NULL\nDbDefault: ",
            "maxLength": 25,
            "nullable": true
          },
          "Name": {
            "type": "string",
            "maxLength": 50,
            "nullable": true
          },
          "NavvisCode": {
            "type": "string",
            "description": "To be texted by jens.coosmann@etask.de\n\nLabel: NAVVIS Code\nin DEBUG only\nDbName: FL_RAUM_T.NAVVIS_CODE\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "NetRoomSurface": {
            "type": "number",
            "readOnly": true,
            "description": "Net Room Surface [m²]\n\nLabel: Net Room Surface [m²]\nin DEBUG only\nDbName: FL_RAUM_T.R_FLAECHE_NETTO\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "NumberOnDoorplate": {
            "type": "string",
            "description": "Enter the room number on an already existing door plate if this deviates from\nthe selected system for the building as presented in the room code.\n\nLabel: Number on Door Plate\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_NR\nDbType: varchar(23) NULL\nDbDefault: ",
            "maxLength": 23,
            "nullable": true
          },
          "OptionToRentUntil": {
            "type": "string",
            "description": "Option to rent until\n\nLabel: Option to rent until\nin DEBUG only\nDbName: FL_RAUM_T.RESERVIERT_BIS\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "PolygonArea": {
            "type": "number",
            "readOnly": true,
            "description": "CAD polygon space\n\nLabel: Polygon Area [m²]\nin DEBUG only\nDbName: FL_RAUM_T.R_FLAECHE\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "QuantityOfWorkplaces": {
            "type": "integer",
            "description": "Enter a number for the amount of work stations available in the room.\n\nLabel: Amount of Work Stations\nin DEBUG only\nDbName: FL_RAUM_T.ANZAHL_ARBEITSPLAETZE\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "RawCeilingHeight": {
            "type": "number",
            "description": "Indication of the raw ceiling height\n\nLabel: Raw ceiling height[m]\nin DEBUG only\nDbName: FL_RAUM_T.ROHDECKENHOEHE\nDbType: decimal NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "Remark": {
            "type": "string",
            "description": "Enter comments or information about the room.\n\nLabel: Remarks\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_BEMERKUNG\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Remark1": {
            "type": "string",
            "description": "Remarks\n\nLabel: Remarks\nin DEBUG only\nDbName: FL_RAUM_T.BEMERKUNG1\nDbType: nvarchar(500) NULL\nDbDefault: ",
            "maxLength": 500,
            "nullable": true
          },
          "Remark5": {
            "type": "string",
            "description": "Here you can enter additional notes and remarks on the ceiling.\n\nLabel: remarks\nin DEBUG only\nDbName: FL_RAUM_T.BEMERKUNG5\nDbType: nvarchar(500) NULL\nDbDefault: ",
            "maxLength": 500,
            "nullable": true
          },
          "Remark6": {
            "type": "string",
            "description": "Comments\n\nLabel: Comments\nin DEBUG only\nDbName: FL_RAUM_T.BEMERKUNG6\nDbType: nvarchar(500) NULL\nDbDefault: ",
            "maxLength": 500,
            "nullable": true
          },
          "RentableArea": {
            "type": "number",
            "description": "Record the room’s rentable area here.\n\nLabel: Rentable Area [m²]\nin DEBUG only\nDbName: FL_RAUM_T.M_FLAECHE\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "RentableAreaFactor": {
            "type": "number",
            "description": "Enter the factor used to calculate the rentable area. The basis for the\ncalculation is the room's surface area.\n\nLabel: Rentable Area Factor\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_MIETFLAECHE_FAKTOR\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "RentableAreaWithinTheRentableZone": {
            "type": "number",
            "readOnly": true,
            "description": "Rentable Area within the Rentable Zone [m²]\n\nLabel: Rentable Area within the Rentable Zone [m²]\nin DEBUG only\nDbName: FL_RAUM_T.M_FLAECHE_MIETBEREICH\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "RentableInComplexContract": {
            "type": "boolean",
            "description": "Rentable in complex manner?\n\nLabel: Rentable in complex manner?\nin DEBUG only\nDbName: FL_RAUM_T.KOMPLEX_VERMIETBAR\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "Reservable": {
            "type": "boolean",
            "description": "Reservable?\n\nLabel: Reservable?\nin DEBUG only\nDbName: FL_RAUM_T.RESERVIERBAR\nDbType: bit NOT NULL\nDbDefault: ((-1))"
          },
          "RoomHeight": {
            "type": "number",
            "description": "Room Height [m]\n\nLabel: Room Height [m]\nin DEBUG only\nDbName: FL_RAUM_T.R_HOEHE\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "RoomNumber": {
            "type": "string",
            "description": "Enter the number of the room.\n\nLabel: Room Number\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_NUMMER\nDbType: varchar(10) NULL\nDbDefault: ",
            "maxLength": 10,
            "minLength": 1
          },
          "RoomType": {
            "type": "string",
            "description": "Room Type\n\nLabel: Room Type\nin DEBUG only\nDbName: FL_RAUM_T.RAUMTYP\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "RoomVolume": {
            "type": "number",
            "description": "Room Volume [m³]\n\nLabel: Room Volume [m³]\nin DEBUG only\nDbName: FL_RAUM_T.R_VOLUMEN\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "StandardNoOfpowersockets": {
            "type": "number",
            "description": "Standard No. of Power Sockets\n\nLabel: Standard No. of Power Sockets\nin DEBUG only\nDbName: FL_RAUM_T.ANZ_STECKD_STANDARD\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "SubstractedAream178": {
            "type": "number",
            "description": "Enter the subtraction area used as the polygon area subtraction to determine the\nfloor space.\n\nLabel: Substracted Area [m²]\nin DEBUG only\nDbName: FL_RAUM_T.ABZ_FLAECHE\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "SuperficialLoad": {
            "type": "number",
            "description": "Indication of the superficial load of the floor\n\nLabel: Superficial load [kN/sqm]\nin DEBUG only\nDbName: FL_RAUM_T.VERKEHRSLAST\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "TargetTemperatureSummer": {
            "type": "string",
            "description": "Enter the room's target temperature during the summer (May to September) in\ndegrees Celsius.\n\nLabel: Target Temperature Summer [°C]\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_SOLL_TEMPERATUR_SOMMER\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "TargetTemperatureWinter": {
            "type": "string",
            "description": "Enter the room's target temperature during the winter (October to April) in\ndegrees Celsius.\n\nLabel: Target Temperature Winter [°C]\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_SOLL_TEMPERATUR_WINTER\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "TenantId": {
            "type": "string",
            "readOnly": true,
            "description": "Tenant ID\n\nLabel: Tenant ID\nin DEBUG only\nDbName: FL_RAUM_T.VERTRAG_KENNZEICHEN\nDbType: varchar(10) NULL\nDbDefault: ",
            "maxLength": 10,
            "nullable": true
          },
          "UnusedArea": {
            "type": "number",
            "description": "Provide the unassigned space of the room in sqm.\n\nLabel: Unassigned/available Space [m²]\nin DEBUG only\nDbName: FL_RAUM_T.FLAECHE_FREI\nDbType: float NULL\nDbDefault: ",
            "format": "double",
            "nullable": true
          },
          "VentilationRate": {
            "type": "string",
            "description": "Enter the air change rate of the room.\n\nLabel: Ventilation\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_LUFTWECHSEL\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "WallArea": {
            "type": "number",
            "description": "Indication of the wall area\n\nLabel: Wall area[m²]\nin DEBUG only\nDbName: FL_RAUM_T.WAND_FLAECHE\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "WallMaterial": {
            "type": "string",
            "description": "Specifies the material of the wall.\n\nLabel: wall material\nin DEBUG only\nDbName: FL_RAUM_T.WAND_MATERIAL\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "WorkingLoad": {
            "type": "string",
            "description": "Enter the maximum working load in kilograms per square meter.\n\nLabel: Working Load [kg/m²]\nin DEBUG only\nDbName: FL_RAUM_T.RAUM_VERKEHRSLAST\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: FL_RAUM_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: FL_RAUM_T.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: FL_RAUM_T.CREATED_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: FL_RAUM_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: FL_RAUM_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: FL_RAUM_T.CHANGE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: FL_RAUM_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: FL_RAUM_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "Floor": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FloorBase"
          },
          {
            "type": "object",
            "description": "Use this form to manage the floors of the buildings by first assigning the\nbuilding in which the floor is located and then entering further information for\nidentifying the floor (name, level, area, etc.). Then assign all rooms on the\nfloor. If eTASK.CAD is also used, the floor plan is displayed in a new tab after\nclicking on the magnifying glass icon. In the \"CAD drawings\" area you can upload\nexisting CAD plans of the floor on the project side.\n\nSystemName: Floor\nin DEBUG only\nDbName: FL_ETAGE_T",
            "additionalProperties": false
          }
        ]
      },
      "FloorBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "Building",
          "Level",
          "Name",
          "Number",
          "SpaceGross"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "TRANSLATION MISSING\n\nLabel: ID\nin DEBUG only\nDbName: FL_ETAGE_T.ETAGE_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "Rooms": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Rooms"
              }
            ]
          },
          "Building": {
            "description": "Select the building in which the floor is located.\n\nLabel: Building\nin DEBUG only\nDbName: FL_ETAGE_T.GEBAEUDE_ID\nDbType: int NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Building"
              }
            ]
          },
          "BuildingPart": {
            "type": "integer",
            "description": "Select the part of the building in which the floor is located.\n\nLabel: Building Part\nin DEBUG only\nDbName: FL_ETAGE_T.GEBAEUDEBAUTEIL_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "SpacePool": {
            "type": "integer",
            "description": "Selecting the Pooled Space\n\nLabel: pooled space\nin DEBUG only\nDbName: FL_ETAGE_T.FLAECHENPOOL_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "Code": {
            "type": "string",
            "readOnly": true,
            "description": "Displays the floor code which is automatically generated from the code of the\nbuilding in which the floor is located.\n\nLabel: Code\nin DEBUG only\nDbName: FL_ETAGE_T.ETAGE_CODE\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "HeightNet": {
            "type": "number",
            "description": "Indication of the net storey height in meters.\n\nLabel: Net floor height[m]\nin DEBUG only\nDbName: FL_ETAGE_T.GESCHOSS_HOEHE_NETTO\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "HeightRelativeToReferenceHeight": {
            "type": "number",
            "description": "Distance from the zero height of the building to the top edge of the finished\nfloor on the ground floor in meters.\n\nLabel: Height to ground floor OK FFB[m]\nin DEBUG only\nDbName: FL_ETAGE_T.HOEHE_ZU_REFERENZ_HOEHE\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "IfcGlobalId": {
            "type": "string",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: FL_ETAGE_T.IFC_GLOBALID\nDbType: nvarchar(22) NULL\nDbDefault: ",
            "maxLength": 22,
            "nullable": true
          },
          "Level": {
            "type": "integer",
            "description": "Enter a number defining on which level of the building the floor is located. The\nlowest level (e.g. the basement) is always level \"1\". The floors in menu item\n\"Properties/CAD\" are also sorted according to the information entered here.\n\nLabel: Floor Number\nin DEBUG only\nDbName: FL_ETAGE_T.EBENE\nDbType: int NOT NULL\nDbDefault: ((0))",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1
          },
          "NavvisCode": {
            "type": "string",
            "description": "To be texted by jens.coosmann@etask.de\n\nLabel: NAVVIS Code\nin DEBUG only\nDbName: FL_ETAGE_T.NAVVIS_CODE\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Number": {
            "type": "string",
            "description": "Enter a unique abbreviation for the story on which the floor is located (e.g.\n\"2nd\" for \"Second Floor\").\n\nLabel: Floor\nin DEBUG only\nDbName: FL_ETAGE_T.ETAGE_NUMMER\nDbType: varchar(10) NULL\nDbDefault: ",
            "maxLength": 10,
            "minLength": 1
          },
          "SpaceGross": {
            "type": "number",
            "description": "Enter the floor's gross surface area in square meters.\n\nLabel: Gross Total Area [m²]\nin DEBUG only\nDbName: FL_ETAGE_T.FLAECHE_BGF\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal"
          },
          "SpacePerDesk": {
            "type": "number",
            "description": "Enter the standard space per work station on the present floor in square meters.\n\nLabel: Standard Space per Work Station [m²]\nin DEBUG only\nDbName: FL_ETAGE_T.NORM_QM_AP\nDbType: numeric NULL\nDbDefault: ((8))",
            "format": "decimal",
            "nullable": true
          },
          "StoreyGrossHeight": {
            "type": "number",
            "description": "Indication of the gross floor height in metres.\n\nLabel: Gross floor height[m]\nin DEBUG only\nDbName: FL_ETAGE_T.GESCHOSS_HOEHE_BRUTTO\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: FL_ETAGE_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: FL_ETAGE_T.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: FL_ETAGE_T.CREATED_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: FL_ETAGE_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: FL_ETAGE_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: FL_ETAGE_T.CHANGE_DATE\nDbType: datetime NULL\nDbDefault: (getdate())",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: FL_ETAGE_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: FL_ETAGE_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "Rooms": {
        "type": "object",
        "description": "Collection of Room",
        "additionalProperties": false
      },
      "Building": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BuildingBase"
          },
          {
            "type": "object",
            "description": "Create data records for the various buildings in the organization. Enter\ninformation on the identification (assignment of a location and a building\nnumber and description) and address of the building as well as the building\ndescription. See at a glance how the current use of space (according to DIN 277)\nis distributed in the building. Assign the floors in the building. If you also\nuse eTASK Maintenance, all maintenance contracts concluded with external or\ninternal service providers for this building are displayed.\n\nSystemName: Building\nin DEBUG only\nDbName: FL_GEBAEUDE_T",
            "additionalProperties": false
          }
        ]
      },
      "BuildingBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "CostCenter",
          "Site",
          "AirConditioning",
          "BillingOnFlatfeeBasis",
          "ChemicalWasteWater",
          "City",
          "ColdWaterSupply",
          "DistilledWater",
          "ExternalHeatingExpensesSettlement",
          "FireDetectionSystem",
          "FireExtinguishingTechnology",
          "GeneralWasteWater",
          "HotWaterSupply",
          "InDepthSurvey",
          "IntrusionDetectionSystem",
          "LightningProtection",
          "Name",
          "Number",
          "OutgoingAir",
          "PressurizedAir",
          "ProcessCoolingWater",
          "ProtectionOfHistoricalmonuments",
          "Rentable",
          "SprinklerSystem",
          "Street",
          "StreetNumber",
          "TechnicalExhaustAir",
          "Vacuum",
          "Ventilation",
          "WastewaterDisposal",
          "ZipCode"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "TRANSLATION MISSING\n\nLabel: ID\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "Floors": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Floors"
              }
            ]
          },
          "AccountingUnit": {
            "type": "integer",
            "description": "Select the accounting unit to which this building belongs.\n\nLabel: Commercial Unit\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_WIRTSCHAFTSEINHEIT_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "ActivityType": {
            "type": "integer",
            "description": "To be texted by jens.coosmann@etask.de\n\nLabel: activity type\nin DEBUG only\nDbName: FL_GEBAEUDE_T.LEISTUNGSART_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "BuildingGroup": {
            "type": "integer",
            "description": "Select the building group to which the building is to be assigned.\n\nLabel: Building Group\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDEGRUPPE_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "ConstructionType": {
            "type": "integer",
            "description": "Select the construction type of the building.\n\nLabel: Construction Type\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDEBAUART_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "CostCenter": {
            "description": "Select the cost center which is to be charged with the costs for the building.\n\nLabel: Cost Center\nin DEBUG only\nDbName: FL_GEBAEUDE_T.KOSTENSTELLE_ID\nDbType: int NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CostCenter"
              }
            ]
          },
          "DegreeDayNumberWeatherStation": {
            "type": "integer",
            "description": "Selection of the nearest weather station.\n\nLabel: meteorological station\nin DEBUG only\nDbName: FL_GEBAEUDE_T.ZA_GRADTAGSZAHLEN_WETTERSTATION_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "Department": {
            "type": "integer",
            "description": "Select the department to which the building should be allocated.\n\nLabel: Department\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_ABTEILUNG_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "Function": {
            "type": "integer",
            "description": "Select the function of the building.\n\nLabel: Function\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDEFUNKTION_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "LifeCyclephase": {
            "type": "integer",
            "description": "-- SUMMARY MISSING --\n\nLabel: Building Life Cycle Phase\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_LEBENSZYKLUSPHASE_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "LocationPolicy": {
            "type": "integer",
            "description": "Select the location concept.\n\nLabel: Concept\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_STANDORTKONZEPT\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "MaintenanceContractType": {
            "type": "integer",
            "description": "Select the type of contract.\n\nLabel: Contract type\nin DEBUG only\nDbName: FL_GEBAEUDE_T.VERTRAGSART_GEBAUEDE_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "Manager": {
            "description": "Select the works manager responsible for the building.\n\nLabel: Chief Operating Officer\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_BETRIEBSLEITER_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Person"
              }
            ]
          },
          "OpcPerLocationContingencyRisk": {
            "type": "integer",
            "description": "Selection of the cost element for the default risk.\n\nLabel: Cost element default risk\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_BK_AUSFALLWAGNIS_KOSTENART_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "OperationalCostsPerlocationManagement": {
            "type": "integer",
            "description": "Selection of the cost element for the administrator fee.\n\nLabel: Cost element administrator fee\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_BK_VERWALTUNG_KOSTENART_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "OperationalSpace": {
            "type": "integer",
            "description": "Selection of the associated operating area\n\nLabel: factory space\nin DEBUG only\nDbName: FL_GEBAEUDE_T.BETRIEBSFLAECHE_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "OwnerAddress": {
            "description": "Selection of the building owner\n\nLabel: building owner\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_EIGENTUEMER_FIRMA_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyAddress"
              }
            ]
          },
          "Property": {
            "type": "integer",
            "description": "Select the property on which the building is located.\n\nLabel: Property\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GRUNDSTUECK_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "PropertyType": {
            "type": "integer",
            "description": "Select the property type of the building.\n\nLabel: Property Type\nin DEBUG only\nDbName: FL_GEBAEUDE_T.EIGENTUMSART_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "ResponsiblePerson": {
            "description": "Responsible Person\n\nLabel: Responsible Person\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_VERANTWORTLICHER_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Person"
              }
            ]
          },
          "Site": {
            "description": "Select the location in which the building is located. The code of the location\nselected here will be part of the building code which is automatically generated\nby the system.\n\nLabel: Location\nin DEBUG only\nDbName: FL_GEBAEUDE_T.STANDORT_ID\nDbType: int NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Site"
              }
            ]
          },
          "Type": {
            "type": "integer",
            "description": "Selection of an object type\n\nLabel: object type\nin DEBUG only\nDbName: FL_GEBAEUDE_T.OBJEKTART_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "AdditionalUsableArea": {
            "type": "number",
            "description": "Input of the planned value of the secondary useable area of the building.\n\nLabel: Additional usable area[m²]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.SOLL_NNF\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "AirConditioning": {
            "type": "boolean",
            "description": "Indicates whether the building has (central) air conditioning.\n\nLabel: air conditioning\nin DEBUG only\nDbName: FL_GEBAEUDE_T.KLIMAANLAGE\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "AmountOfFloors": {
            "type": "number",
            "description": "Enter the number of floors in the building.\n\nLabel: Amount of Floors\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GESCH_ANZ\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "BillingOnFlatfeeBasis": {
            "type": "boolean",
            "description": "Indicate whether billing is to be performed on a flat fee basis.\n\nLabel: Billing on flat fee basis\nin DEBUG only\nDbName: FL_GEBAEUDE_T.PAUSCHALPREISABRECHNUNG\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "BuildingDescriptionForRentComparisonReport": {
            "type": "string",
            "description": "Input of an appropriate building description, which enables the correct\nselection of the suitable representative list of rents.\n\nLabel: Building description (for representative list of rents)\nin DEBUG only\nDbName: FL_GEBAEUDE_T.MIETSPIEGEL_GEB_BESCHREIBUNG\nDbType: varchar(8000) NULL\nDbDefault: ",
            "maxLength": 8000,
            "nullable": true
          },
          "CadOid": {
            "type": "string",
            "readOnly": true,
            "description": "TRANSLATION MISSING\n\nLabel: OID\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_OID\nDbType: varchar(18) NULL\nDbDefault: ",
            "maxLength": 18,
            "nullable": true
          },
          "Cellar": {
            "type": "string",
            "description": "Indicates what type of cellar it is (e.g. underground car park, storage rooms).\n\nLabel: basement\nin DEBUG only\nDbName: FL_GEBAEUDE_T.KELLER\nDbType: varchar(20) NULL\nDbDefault: ",
            "maxLength": 20,
            "nullable": true
          },
          "ChemicalWasteWater": {
            "type": "boolean",
            "description": "Indication whether the building has (central) disposal of chemical waste water.\n\nLabel: chemical waste water\nin DEBUG only\nDbName: FL_GEBAEUDE_T.CHEM_ABWASSSER\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "City": {
            "type": "string",
            "description": "Enter the name of the city in which the building is located.\n\nLabel: City\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_ADRESSE_ORT\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "Code": {
            "type": "string",
            "readOnly": true,
            "description": "Displays the building code automatically generated by the system. The code\nconsists of the selected location and the building number assigned to the\nbuilding.\n\nLabel: Code\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_CODE\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "ColdWaterSupply": {
            "type": "boolean",
            "description": "Indicates whether the building has a cold water supply.\n\nLabel: cold water supply\nin DEBUG only\nDbName: FL_GEBAEUDE_T.KALTW_VERSORGUNG\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "ConstructedArea": {
            "type": "number",
            "description": "If the building dimensions have been specified, the building area can be\ncalculated from the dimensions.\n\nLabel: constructed area[m²]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEB_FLAECHE\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "ContractuallyAgreedOutput": {
            "type": "string",
            "description": "Enter the contractually agreed electrical output in kilowatts.\n\nLabel: contractually agreed output[kW]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.VV_LEISTUNG\nDbType: varchar(10) NULL\nDbDefault: ",
            "maxLength": 10,
            "nullable": true
          },
          "CostCenterIpo": {
            "type": "string",
            "description": "In case the building is rented, provide the cost center to be charged with the\nrental costs.\n\nLabel: Cost center\nin DEBUG only\nDbName: FL_GEBAEUDE_T.KOSTENSTELLE_IPO\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Currenta": {
            "type": "string",
            "description": "Enter the maximum allowable current of the connection.\n\nLabel: Current[A]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.STROMSTAERKE\nDbType: varchar(15) NULL\nDbDefault: ",
            "maxLength": 15,
            "nullable": true
          },
          "DefaultRiskAsaPercentageOfBasicRent": {
            "type": "number",
            "description": "Indication of the default risk as a percentage of the basic rent.\n\nLabel: Default risk as a percentage of basic rent[%]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_BK_AUSFALLWAGNIS_PROZ\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "DistilledWater": {
            "type": "boolean",
            "description": "Indicates whether the building has a (central) supply of distilled water.\n\nLabel: distilled water\nin DEBUG only\nDbName: FL_GEBAEUDE_T.DESTI_WASSER\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "EMailOfResponsiblePerson": {
            "type": "string",
            "description": "Enter the e-mail address of the person responsible for the object.\n\nLabel: E-mail responsible for the object\nin DEBUG only\nDbName: FL_GEBAEUDE_T.VERANTWORTLICH_EMAIL\nDbType: varchar(70) NULL\nDbDefault: ",
            "maxLength": 70,
            "nullable": true
          },
          "ExternalHeatingExpensesSettlement": {
            "type": "boolean",
            "description": "Specifies whether the heating expenses settlement is performed by an external\ncompany.\n\nLabel: External heating expenses settlement\nin DEBUG only\nDbName: FL_GEBAEUDE_T.HZ_EXTERN\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "FinancialBookingCode": {
            "type": "string",
            "description": "Enter the accounting area to which the building is assigned.\n\nLabel: Company Code (SAP)\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_BUCHUNGSKREIS\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "FireDetectionSystem": {
            "type": "boolean",
            "description": "Indication whether the building has a fire alarm system.\n\nLabel: fire detection system\nin DEBUG only\nDbName: FL_GEBAEUDE_T.BMS\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "FireExtinguishingTechnology": {
            "type": "boolean",
            "description": "Indication whether the building has fire extinguishing technology.\n\nLabel: fire extinguishing technology\nin DEBUG only\nDbName: FL_GEBAEUDE_T.FEUERLOESCHTECHNIK\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "FunctionalArea": {
            "type": "number",
            "description": "Enter the planned value of the functional area of the building.\n\nLabel: Functional area[m²]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.SOLL_FF\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "GeneralWasteWater": {
            "type": "boolean",
            "description": "Indication whether the building has (central) disposal of general wastewater.\n\nLabel: general waste water\nin DEBUG only\nDbName: FL_GEBAEUDE_T.ABWASSER\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "HeatingLimitTemperature": {
            "type": "number",
            "description": "Indication of the heating limit temperature in degrees Celsius.\n\nLabel: Heating limit temperature[°C]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.HEIZGRENZTEMPARATUR\nDbType: numeric NULL\nDbDefault: ((15))",
            "format": "decimal",
            "nullable": true
          },
          "HeatingMedium": {
            "type": "string",
            "description": "Input of the heating medium (district heating, natural gas, etc.).\n\nLabel: heating medium\nin DEBUG only\nDbName: FL_GEBAEUDE_T.HEIZMEDIUM\nDbType: varchar(30) NULL\nDbDefault: ",
            "maxLength": 30,
            "nullable": true
          },
          "HeatingPeriodFrom": {
            "type": "string",
            "description": "Enter the start of the heating period, where the format TT.MM must be adhered\nto.\n\nLabel: Heating period from[TT.MM]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.HZ_EXTERN_VON_TAG\nDbType: char(5) NULL\nDbDefault: ",
            "maxLength": 5,
            "nullable": true
          },
          "HeatingPeriodTo": {
            "type": "string",
            "description": "Enter the end of the heating period, where the format TT.MM must be adhered to.\n\nLabel: Heating period until[TT.MM]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.HZ_EXTERN_BIS_TAG\nDbType: char(5) NULL\nDbDefault: ",
            "maxLength": 5,
            "nullable": true
          },
          "Height": {
            "type": "number",
            "description": "Enter the building height in meters.\n\nLabel: Building height[m]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEB_HOEHE\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "HotWaterSupply": {
            "type": "boolean",
            "description": "Indicates whether the building has a hot water supply.\n\nLabel: hot water supply\nin DEBUG only\nDbName: FL_GEBAEUDE_T.WARMW_VERSORGUNG\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "IfcGlobalId": {
            "type": "string",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: FL_GEBAEUDE_T.IFC_GLOBALID\nDbType: nvarchar(22) NULL\nDbDefault: ",
            "maxLength": 22,
            "nullable": true
          },
          "InDepthSurvey": {
            "type": "boolean",
            "description": "Indicate whether an in-depth survey was conducted for this building.\n\nLabel: In-depth survey\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_DETAILERHEBUNG\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "Infrastructure": {
            "type": "string",
            "description": "Enter additional information about the building's infrastructure.\n\nLabel: Infrastructure\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_INFRASTRUKTUR\nDbType: varchar(255) NULL\nDbDefault: ",
            "maxLength": 255,
            "nullable": true
          },
          "InsideTemperaturec": {
            "type": "number",
            "description": "Indication of the nominal internal temperature in degrees Celsius.\n\nLabel: Inside temperature[°C]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.STANDARDINNENTEMPARATUR\nDbType: numeric NULL\nDbDefault: ((20))",
            "format": "decimal",
            "nullable": true
          },
          "InstalledCapacitykw": {
            "type": "string",
            "description": "Input of the installed electrical power in kilowatts.\n\nLabel: installed capacity[kW\nin DEBUG only\nDbName: FL_GEBAEUDE_T.INST_LEISTUNG\nDbType: varchar(10) NULL\nDbDefault: ",
            "maxLength": 10,
            "nullable": true
          },
          "InsulationMaterial": {
            "type": "string",
            "description": "Enter the material of the cable insulation.\n\nLabel: Insulation (material)\nin DEBUG only\nDbName: FL_GEBAEUDE_T.ISOLIERUNG\nDbType: varchar(30) NULL\nDbDefault: ",
            "maxLength": 30,
            "nullable": true
          },
          "IntrusionDetectionSystem": {
            "type": "boolean",
            "description": "Indicates whether the building has a burglar alarm system.\n\nLabel: intrusion detection system\nin DEBUG only\nDbName: FL_GEBAEUDE_T.EMS\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "Latitude": {
            "type": "number",
            "description": "Enter the latitude of the building's location (e.g. the entrance area) for\neasier visualization in map services (e.g. Google Maps).\n\nLabel: Latitude\nin DEBUG only\nDbName: FL_GEBAEUDE_T.BREITENGRAD\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "Length": {
            "type": "number",
            "description": "Enter the building length in meters.\n\nLabel: Building length[m]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEB_LAENGE\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "LightningProtection": {
            "type": "boolean",
            "description": "Indicates whether the building has a lightning protection system.\n\nLabel: lightning protection\nin DEBUG only\nDbName: FL_GEBAEUDE_T.BLITZSCHUTZ\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "Longitude": {
            "type": "number",
            "description": "Enter the longitude of the building's location (e.g. the entrance area) for\neasier visualization in map services (e.g. Google Maps).\n\nLabel: Longitude\nin DEBUG only\nDbName: FL_GEBAEUDE_T.LAENGENGRAD\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "MainUsableAream": {
            "type": "number",
            "description": "Enter the planned value of the main usable area of the building.\n\nLabel: Main usable area[m²]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.SOLL_HNF\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "MaterialHeatingPipes": {
            "type": "string",
            "description": "Enter the material of the installed heating pipes.\n\nLabel: Material heating pipes\nin DEBUG only\nDbName: FL_GEBAEUDE_T.MAT_HEIZUNGSROHRE\nDbType: varchar(20) NULL\nDbDefault: ",
            "maxLength": 20,
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Enter the full building name We recommend that you use a name indicating the\nfunction of the building (e.g., \"Headquarters Zhizschin Industries,\nShanghai\").\n\nLabel: Name\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_BEZEICHNUNG\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "NavvisCode": {
            "type": "string",
            "description": "To be texted by jens.coosmann@etask.de\n\nLabel: NAVVIS Code\nin DEBUG only\nDbName: FL_GEBAEUDE_T.NAVVIS_CODE\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "NetAreaTarget": {
            "type": "number",
            "description": "Enter the target value of the building’s gross floor area.\n\nLabel: Net Area (Target)\nin DEBUG only\nDbName: FL_GEBAEUDE_T.SOLL_NGF\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "NetVolumem": {
            "type": "number",
            "description": "Enter the planned value of the net room content of the building.\n\nLabel: Net volume[m³]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.SOLL_NRI\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "Number": {
            "type": "string",
            "description": "Enter the number of the building. The number entered here will be part of the\nbuilding code generated by the system.\n\nLabel: Building No.\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_NUMMER\nDbType: varchar(10) NULL\nDbDefault: ",
            "maxLength": 10,
            "minLength": 1
          },
          "NumberOfConnections": {
            "type": "number",
            "description": "Enter the number of available water connections.\n\nLabel: Number of connections\nin DEBUG only\nDbName: FL_GEBAEUDE_T.ANZ_ANSCHLUESSE\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "NumberOfFreightelevators": {
            "type": "number",
            "description": "Enter the number of freight elevators available.\n\nLabel: Number of freight elevators\nin DEBUG only\nDbName: FL_GEBAEUDE_T.LAST_AUFZ_ANZAHL\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "NumberOfHeatingcircuits": {
            "type": "number",
            "description": "Enter the number of existing heating circuits.\n\nLabel: Number of heating circuits\nin DEBUG only\nDbName: FL_GEBAEUDE_T.ANZ_HEIZKREISE\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "NumberOfHouseconnections": {
            "type": "number",
            "description": "Enter the number of existing house connections.\n\nLabel: Number of house connections\nin DEBUG only\nDbName: FL_GEBAEUDE_T.ANZ_HAUSANSCHLUSS\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "NumberOfPassengerlifts": {
            "type": "number",
            "description": "Enter the number of passenger lifts available.\n\nLabel: Number of passenger lifts\nin DEBUG only\nDbName: FL_GEBAEUDE_T.PERS_AUFZ_ANZAHL\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "NumberOfTransformerstations": {
            "type": "number",
            "description": "Enter the number of existing transformer stations.\n\nLabel: Number of transformer stations\nin DEBUG only\nDbName: FL_GEBAEUDE_T.ANZ_TRAFOSTATIONEN\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "ObjectOwnerName": {
            "type": "string",
            "description": "Enter the name of the person responsible for the object.\n\nLabel: Object Owner Name\nin DEBUG only\nDbName: FL_GEBAEUDE_T.VERANTWORTLICH_NAME\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "OutgoingAir": {
            "type": "boolean",
            "description": "Indicates whether the building has a (central) exhaust air system.\n\nLabel: outgoing air\nin DEBUG only\nDbName: FL_GEBAEUDE_T.ABLUFT\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "PercentageOfOpcAdministrationFee": {
            "type": "number",
            "description": "Indication of the administrator fee as a percentage of the operating costs.\n\nLabel: Administrator's fee as a percentage of BK[%]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_BK_VERWALTUNGSOSTEN_PROZ\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "PlannedOutline": {
            "type": "string",
            "description": "Indication of the date when the demolition of the house is planned, if\nnecessary.\n\nLabel: planned outline\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEPLANTER_ABRISS\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "PressurizedAir": {
            "type": "boolean",
            "description": "Indicates whether the building has a (central) compressed air supply.\n\nLabel: pressurized air\nin DEBUG only\nDbName: FL_GEBAEUDE_T.DRUCKLUFT\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "ProcessCoolingWater": {
            "type": "boolean",
            "description": "Indicates whether the building has a (central) cooling water supply.\n\nLabel: process cooling water\nin DEBUG only\nDbName: FL_GEBAEUDE_T.PROZESSKUEHLWASSER\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "ProtectionOfHistoricalmonuments": {
            "type": "boolean",
            "description": "Indication whether the building is a listed building.\n\nLabel: protection of historical monuments\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEB_DENKMALSCHUTZ\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "Provisioning": {
            "type": "string",
            "description": "Information on the type of heat supply.\n\nLabel: provisioning\nin DEBUG only\nDbName: FL_GEBAEUDE_T.VERSORGUNG\nDbType: varchar(8) NULL\nDbDefault: ",
            "maxLength": 8,
            "nullable": true
          },
          "RainwaterConnections": {
            "type": "number",
            "description": "Enter the number of existing rainwater connections.\n\nLabel: Rainwater connections\nin DEBUG only\nDbName: FL_GEBAEUDE_T.REGENWASSERANSCHL\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "Remark": {
            "type": "string",
            "description": "Enter information or comments about the building information.\n\nLabel: Remark\nin DEBUG only\nDbName: FL_GEBAEUDE_T.BEMERKUNG1\nDbType: nvarchar(500) NULL\nDbDefault: ",
            "maxLength": 500,
            "nullable": true
          },
          "RemarkElectro": {
            "type": "string",
            "description": "Input of notes and remarks on the electrical connection.\n\nLabel: Remark Electro\nin DEBUG only\nDbName: FL_GEBAEUDE_T.BEMERKUNG3\nDbType: nvarchar(500) NULL\nDbDefault: ",
            "maxLength": 500,
            "nullable": true
          },
          "RemarkHeating": {
            "type": "string",
            "description": "Entry of notes or remarks on the heating system.\n\nLabel: Remark Heating\nin DEBUG only\nDbName: FL_GEBAEUDE_T.BEMERKUNG4\nDbType: nvarchar(500) NULL\nDbDefault: ",
            "maxLength": 500,
            "nullable": true
          },
          "RemarkMedia": {
            "type": "string",
            "description": "Input of notes or remarks on media supply.\n\nLabel: Remark  Media\nin DEBUG only\nDbName: FL_GEBAEUDE_T.BEMERKUNG6\nDbType: nvarchar(500) NULL\nDbDefault: ",
            "maxLength": 500,
            "nullable": true
          },
          "RemarkProtection": {
            "type": "string",
            "description": "Input of notes or remarks on the protective devices.\n\nLabel: Remark Protection\nin DEBUG only\nDbName: FL_GEBAEUDE_T.BEMERKUNG8\nDbType: nvarchar(500) NULL\nDbDefault: ",
            "maxLength": 500,
            "nullable": true
          },
          "RemarkRoof": {
            "type": "string",
            "description": "Enter notes or remarks about the roof.\n\nLabel: Remark roof\nin DEBUG only\nDbName: FL_GEBAEUDE_T.BEMERKUNG7\nDbType: nvarchar(500) NULL\nDbDefault: ",
            "maxLength": 500,
            "nullable": true
          },
          "RemarkWater": {
            "type": "string",
            "description": "Enter notes or remarks on the water supply.\n\nLabel: Remark Water\nin DEBUG only\nDbName: FL_GEBAEUDE_T.BEMERKUNG5\nDbType: nvarchar(500) NULL\nDbDefault: ",
            "maxLength": 500,
            "nullable": true
          },
          "Rentable": {
            "type": "boolean",
            "description": "Indicates whether the building is available for rent.\n\nLabel: leasable\nin DEBUG only\nDbName: FL_GEBAEUDE_T.VERMIETBAR\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "RentableUntil": {
            "type": "string",
            "description": "Selection of the date up to which the building can be rented.\n\nLabel: rentable until\nin DEBUG only\nDbName: FL_GEBAEUDE_T.VERMIETBAR_BIS\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "RentalGuaranteeForrentalagreementno": {
            "type": "string",
            "description": "Selection of the rental contract for the entire house for which a rental\nguarantee has been agreed.\n\nLabel: Rental guarantee for rental agreement no:\nin DEBUG only\nDbName: FL_GEBAEUDE_T.MIETGARANTIE_MIETVERTRAGSNUMMER\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "RentalGuaranteePriceperm": {
            "type": "number",
            "description": "Enter the price per m² agreed under the rental guarantee, which the manager\n(tenant of the entire house) receives from the owner, irrespective of whether\nthe manager was able to sublet the space.\n\nLabel: Rental guarantee Price per m²\nin DEBUG only\nDbName: FL_GEBAEUDE_T.MIETGARANTIE_FAKTOR\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "RoofCladding": {
            "type": "string",
            "description": "Enter the type of roofing.\n\nLabel: roof cladding\nin DEBUG only\nDbName: FL_GEBAEUDE_T.DACHEINDECKUNG\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "RoofStructure": {
            "type": "string",
            "description": "Enter the type of roof construction (flat roof, monopitch roof, etc.).\n\nLabel: roof structure\nin DEBUG only\nDbName: FL_GEBAEUDE_T.DACHKONSTRUCKTION\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "SprinklerSystem": {
            "type": "boolean",
            "description": "Indicates whether the building has a sprinkler system.\n\nLabel: sprinkler system\nin DEBUG only\nDbName: FL_GEBAEUDE_T.SPRINKLERANLAGE\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "Street": {
            "type": "string",
            "description": "Enter the name of the street in which the building is located.\n\nLabel: Street\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_ADRESSE_STRASSE\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "StreetNumber": {
            "type": "string",
            "description": "Enter the house number of the building.\n\nLabel: Street Number\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_ADRESSE_HAUSNUMMER\nDbType: varchar(10) NULL\nDbDefault: ",
            "maxLength": 10,
            "minLength": 1
          },
          "TargetGrossAreaTarget": {
            "type": "number",
            "description": "Enter the target value of the building’s gross floor area.\n\nLabel: Gross Area (Target)\nin DEBUG only\nDbName: FL_GEBAEUDE_T.SOLL_BGF\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "TargetGrossVolume": {
            "type": "number",
            "description": "If the building dimensions have been specified, the gross room contents can be\ncalculated from the dimensions.\n\nLabel: Gross volume[m³]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.SOLL_BRI\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "TechnicalExhaustAir": {
            "type": "boolean",
            "description": "Indicates whether the building has a (central) disposal facility for technical\nexhaust air.\n\nLabel: technical exhaust air\nin DEBUG only\nDbName: FL_GEBAEUDE_T.TECHN_ABLUFT\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "TelephoneResponsibleFortheobject": {
            "type": "string",
            "description": "Enter the telephone number of the person responsible for the object.\n\nLabel: Telephone responsible for the object\nin DEBUG only\nDbName: FL_GEBAEUDE_T.VERANTWORTLICH_TELEFON\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "TemperatureSpread": {
            "type": "string",
            "description": "Enter the temperature spread of the heating circuit in degrees Celsius.\n\nLabel: Temperature spread[°C]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.TEMP_SPREIZUNG\nDbType: varchar(7) NULL\nDbDefault: ",
            "maxLength": 7,
            "nullable": true
          },
          "TrafficArea": {
            "type": "number",
            "description": "Enter the planned value of the traffic area of the building.\n\nLabel: Traffic area[m²]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.SOLL_VF\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "TypeOfHeatdetection": {
            "type": "string",
            "description": "Enter the type of heat detection.\n\nLabel: Type of heat detection\nin DEBUG only\nDbName: FL_GEBAEUDE_T.ART_WAERMEERFASSUNG\nDbType: varchar(9) NULL\nDbDefault: ",
            "maxLength": 9,
            "nullable": true
          },
          "TypeOfUse": {
            "type": "string",
            "description": "Selection of the type of building use\n\nLabel: type of use\nin DEBUG only\nDbName: FL_GEBAEUDE_T.NUTZUNGSART\nDbType: varchar(40) NULL\nDbDefault: ",
            "maxLength": 40,
            "nullable": true
          },
          "UsefulArea": {
            "type": "number",
            "description": "Enter the planned value of the useful area of the building.\n\nLabel: Useful area[m²]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.SOLL_NF\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "Vacuum": {
            "type": "boolean",
            "description": "Indicates whether the building has a (central) vacuum system.\n\nLabel: vacuum\nin DEBUG only\nDbName: FL_GEBAEUDE_T.VAKUUM\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "Ventilation": {
            "type": "boolean",
            "description": "Indicates whether the building has a (central) ventilation system.\n\nLabel: ventilation\nin DEBUG only\nDbName: FL_GEBAEUDE_T.LUEFTUNG\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "WastewaterDisposal": {
            "type": "boolean",
            "description": "Indication whether the building has waste water disposal.\n\nLabel: wastewater disposal\nin DEBUG only\nDbName: FL_GEBAEUDE_T.WASSERENTSORGUNG\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "Width": {
            "type": "number",
            "description": "Enter the building width in meters.\n\nLabel: Building width[m]\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEB_BREITE\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "YearOfConstruction": {
            "type": "string",
            "description": "Enter the year in which the building was constructed.\n\nLabel: Year of Construction\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_BAUJAHR\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "ZipCode": {
            "type": "string",
            "description": "Enter the post code of the building.\n\nLabel: Postal Code\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GEBAEUDE_ADRESSE_PLZ\nDbType: varchar(10) NULL\nDbDefault: ",
            "maxLength": 10,
            "minLength": 1
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: FL_GEBAEUDE_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: FL_GEBAEUDE_T.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: FL_GEBAEUDE_T.CREATED_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: FL_GEBAEUDE_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: FL_GEBAEUDE_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: FL_GEBAEUDE_T.CHANGE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: FL_GEBAEUDE_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: FL_GEBAEUDE_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "Floors": {
        "type": "object",
        "description": "Collection of Floor",
        "additionalProperties": false
      },
      "OrderItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderItemBase"
          },
          {
            "type": "object",
            "description": "You can use this form to specify the order items for FM orders. Specify the\nquantity and display the total prices automatically.\n\nSystemName: OrderItem\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN",
            "additionalProperties": false
          }
        ]
      },
      "OrderItemBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "Order",
          "ActualOutlineItem",
          "AddingServiceAllowed",
          "Delineation",
          "PositionNumber",
          "PricePerUnitnet",
          "Quantity",
          "ShortText",
          "TotalServices",
          "TotalServicesBilled",
          "Unit",
          "Vat"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "-- SUMMARY MISSING --\n\nLabel: id\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "AnnualBudget": {
            "type": "integer",
            "description": "Display of the annual budget within the framework of which the FM purchase order\nis placed.\n\nLabel: Different annual budget\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.MASSNAHMEJAHR_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "ContractService": {
            "type": "integer",
            "description": "Selection of the contract service item that covers the purchase order item.\n\nLabel: contractual service item\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.LEISTUNG_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "CostCenter": {
            "description": "Selection of the cost center to be debited, if different from the purchase\norder.\n\nLabel: Different cost center\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.KOSTENSTELLE_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CostCenter"
              }
            ]
          },
          "GeneralLedgerAccount": {
            "type": "integer",
            "description": "Selection of the G/L account.\n\nLabel: general ledger account\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.KES_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "Order": {
            "type": "integer",
            "description": "Display of the FM purchase order to which the purchase order item is assigned.\n\nLabel: FM-Order\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.AUFTRAG_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "ParentPosition": {
            "description": "To be texted by detlef.klonsdorf@etask.de\n\nLabel: superior position\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.PARENT_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/OrderItem"
              }
            ]
          },
          "WorkOrderPosition": {
            "type": "integer",
            "readOnly": true,
            "description": "Display of the maintenance order used to create the purchase order item.\n\nLabel: Created from the maintenance order\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.AUF_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "ActualOutlineItem": {
            "type": "boolean",
            "description": "Specifies whether the purchase order item is an outline item An outline item is\na purchase order item that is displayed in the \"Purchase Order\" report as an\nitem under which several other purchase order items are grouped; it is\nhighlighted in bold type and is only used for a better overview of the report;\nhowever, if the outline item has an amount, this is used to calculate the total\namount, so no price should be entered for an outline item.\n\nLabel: Actual Outline Item\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.GLIEDERUNGSPOSITION\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "AddingServiceAllowed": {
            "type": "boolean",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.ADD_LEISTUNGEN_ERLAUBT\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "BillingNotes": {
            "type": "string",
            "description": "[de]Hinweise zur Rückmeldung\n\nLabel: Notes on Confirmation of Actual Quantity (obsolete by Item Activity Table)\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.ABRECHNUNG_HINWEISE\nDbType: nvarchar(4000) NULL\nDbDefault: ",
            "maxLength": 4000,
            "nullable": true
          },
          "BillingQuantity": {
            "type": "number",
            "description": "[de]Ist-Menge\n\nLabel: Actual quantity (obsolete due to item activity table)\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.ABRECHNUNG_MENGE_IST\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "BillingRelease": {
            "type": "boolean",
            "description": "Specifies whether the purchase order item has been released for credit memo\nprocedure.\n\nLabel: billing release\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.FREIGABE_ABRECHNUNG\nDbType: bit NULL\nDbDefault: ((0))",
            "nullable": true
          },
          "Delineation": {
            "type": "string",
            "description": "Enter a description of the order item.\n\nLabel: delineation\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.AUFTRAGSTEXT\nDbType: varchar(8000) NULL\nDbDefault: ",
            "maxLength": 8000,
            "minLength": 1
          },
          "FinancalAccountingDataSheetNumber": {
            "type": "string",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: Data entry sheet no.\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.FIBU_ERFASSUNGSBLATT_NUMMER\nDbType: varchar(30) NULL\nDbDefault: ",
            "maxLength": 30,
            "nullable": true
          },
          "FinancalAccountingServiceDateOfExport": {
            "type": "string",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: Confirmation on\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.FIBU_LEISTUNGEN_EXPORT_AM\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "FinancalAccountingServiceNumber": {
            "type": "string",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.FIBU_LEISTUNGSNUMMER\nDbType: varchar(20) NULL\nDbDefault: ",
            "maxLength": 20,
            "nullable": true
          },
          "FinancialAccountingExportDate": {
            "type": "string",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.FIBU_EXPORT_FROM\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "IncomingInvoiceItem": {
            "type": "integer",
            "readOnly": true,
            "description": "Display of the invoice item used for settlement of the purchase order item This\nfield is filled as soon as the invoice has been created in the self-billing\nprocedure for the FM purchase order.\n\nLabel: Settled by invoice item\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.KET_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "PositionNumber": {
            "type": "string",
            "description": "Enter the number of the order item.\n\nLabel: position number\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.POSITION\nDbType: varchar(25) NOT NULL\nDbDefault: ",
            "maxLength": 25,
            "minLength": 1
          },
          "PricePerUnitnet": {
            "type": "number",
            "description": "Entering or displaying the price per unit in euros This entry field is linked to\nthe \"Total Net Price[€]\" entry field, where if the total price is entered, the\nprice per unit is automatically calculated and displayed, and vice versa, the\ntotal net price is automatically calculated and displayed when the price per\nunit is entered.\n\nLabel: Price per Unit net[€]\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.EINHEITSPREIS\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal"
          },
          "Quantity": {
            "type": "number",
            "description": "Enter the quantity ordered in the order item, which is initially\nunit-independent and is assigned a unit by the following selection field.\n\nLabel: slew\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.MENGE\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal"
          },
          "SapIntRow": {
            "type": "string",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.SAP_INTROW\nDbType: varchar(10) NULL\nDbDefault: ",
            "maxLength": 10,
            "nullable": true
          },
          "SapPackageNumber": {
            "type": "string",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.SAP_PACKNO\nDbType: varchar(10) NULL\nDbDefault: ",
            "maxLength": 10,
            "nullable": true
          },
          "ShortText": {
            "type": "string",
            "description": "Enter a short description of the scope of delivery.\n\nLabel: short text\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.KURZTEXT\nDbType: varchar(250) NULL\nDbDefault: ",
            "maxLength": 250,
            "minLength": 1
          },
          "TotalPriceNet": {
            "type": "number",
            "readOnly": true,
            "description": "Display of the total net price in euros.\n\nLabel: Total price net[€]\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.GESAMTBETRAG\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "TotalServices": {
            "type": "number",
            "readOnly": true,
            "description": "Display of the sum of the prices of the item services entered for the order\nitem.\n\nLabel: Total services[€]\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.SUMME_LEISTUNGEN_GESAMTBETRAG\nDbType: numeric NOT NULL\nDbDefault: ((0))",
            "format": "decimal"
          },
          "TotalServicesBilled": {
            "type": "number",
            "readOnly": true,
            "description": "Display of the sum of the prices of the order items that were created as SAP\nservice confirmation and are therefore regarded as settled.\n\nLabel: Total services billed in SAP[€]\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.SUMME_LEISTUNGEN_ABGERECHNET\nDbType: numeric NOT NULL\nDbDefault: ((0))",
            "format": "decimal"
          },
          "Unit": {
            "type": "string",
            "description": "Selection of the unit belonging to the quantity.\n\nLabel: unit\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.EINHEIT\nDbType: varchar(15) NULL\nDbDefault: ",
            "maxLength": 15,
            "minLength": 1
          },
          "Vat": {
            "type": "integer",
            "description": "Selection of the applicable VAT rate.\n\nLabel: VAT[%]\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.MWST_PROZ\nDbType: smallint NOT NULL\nDbDefault: ((19))"
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.CREATED_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.CHANGE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: AA_AUFTRAEGE_POSITIONEN.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "EtaskEntity": {
        "type": "object",
        "description": "This list represents a directory of the available database tables in the FM\nportal.\n\nSystemName: EtaskEntity\nin DEBUG only\nDbName: GL_TABELLE20_T",
        "additionalProperties": false
      },
      "AllocationMeterToMeterGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AllocationMeterToMeterGroupBase"
          },
          {
            "type": "object",
            "description": "Use this form to assign meters to a meter group and define the validity of the\nassignment.\n\nSystemName: AllocationMeterToMeterGroup\nin DEBUG only\nDbName: ZA_GRUPPEN_ZAEHLER_T",
            "additionalProperties": false
          }
        ]
      },
      "AllocationMeterToMeterGroupBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "MeterGroups",
          "Meters",
          "RentalMonthEnd",
          "PlusOrMinus"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "-- SUMMARY MISSING --\n\nLabel: id\nin DEBUG only\nDbName: ZA_GRUPPEN_ZAEHLER_T.ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "MeterGroups": {
            "type": "integer",
            "description": "Specification of the meter group to which a meter is assigned.\n\nLabel: meter group\nin DEBUG only\nDbName: ZA_GRUPPEN_ZAEHLER_T.Z_GR_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "Meters": {
            "description": "Selection of the meter to be assigned to the meter group.\n\nLabel: numerator\nin DEBUG only\nDbName: ZA_GRUPPEN_ZAEHLER_T.Z_ID\nDbType: int NOT NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Meter"
              }
            ]
          },
          "MeterType": {
            "type": "integer",
            "description": "-- SUMMARY MISSING --\n\nLabel: Meter type\nin DEBUG only\nDbName: ZA_GRUPPEN_ZAEHLER_T.ZAEHLERTYPID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "RentalMonthEnd": {
            "description": "Selection of the time from which the assignment is valid.\n\nLabel: by\nin DEBUG only\nDbName: ZA_GRUPPEN_ZAEHLER_T.MONAT_VON_ID\nDbType: int NOT NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/RentalMonth"
              }
            ]
          },
          "RentalMonthStart": {
            "description": "Selection of the time up to which the assignment applies.\n\nLabel: by\nin DEBUG only\nDbName: ZA_GRUPPEN_ZAEHLER_T.MONAT_BIS_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/RentalMonth"
              }
            ]
          },
          "PlusOrMinus": {
            "type": "number",
            "description": "Specifies whether the meter readings are to be added to or subtracted from the\ngroup consumption.\n\nLabel: Plus (1) or minus (-1)\nin DEBUG only\nDbName: ZA_GRUPPEN_ZAEHLER_T.PLUS_ODER_MINUS\nDbType: numeric NOT NULL\nDbDefault: ((0))",
            "format": "decimal"
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: ZA_GRUPPEN_ZAEHLER_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: ZA_GRUPPEN_ZAEHLER_T.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: ZA_GRUPPEN_ZAEHLER_T.CREATED_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: ZA_GRUPPEN_ZAEHLER_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: ZA_GRUPPEN_ZAEHLER_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: ZA_GRUPPEN_ZAEHLER_T.CHANGE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: ZA_GRUPPEN_ZAEHLER_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: ZA_GRUPPEN_ZAEHLER_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "Meter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MeterBase"
          },
          {
            "type": "object",
            "description": "Enter all relevant meter data for your company in this form, including the meter\nnumber, the location of the meter via the room, information on the meter's\ncertification, calibration and testing, information on the meter's register,\nconfiguration of the meter's mobile meter reading and relevant information on\noperating cost billing.\n\nSystemName: Meter\nin DEBUG only\nDbName: ZA_ZAEHLER_T",
            "additionalProperties": false
          }
        ]
      },
      "MeterBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "MeterAccountingType",
          "MeterReadingPeriods",
          "MeterType",
          "Site",
          "BasePriceSupplier",
          "BasicFeeMeterReadingPeriod",
          "Code",
          "ConversionFactor",
          "CounterActive",
          "InitialLevel",
          "Maximum",
          "MobileMeterReading",
          "Name",
          "Tariff"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "-- SUMMARY MISSING --\n\nLabel: ZAEHLER_ID\nin DEBUG only\nDbName: ZA_ZAEHLER_T.ZAEHLER_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "AllocationMeterToMeterGroups": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AllocationMeterToMeterGroups"
              }
            ]
          },
          "MeterHierarchiesOfMeters": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MeterHierarchies"
              }
            ]
          },
          "MeterHierarchiesOfParentMeter": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MeterHierarchies"
              }
            ]
          },
          "MeterReadings": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MeterReadings"
              }
            ]
          },
          "AssignmentTechnicalDetailToMeters": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AssignmentTechnicalDetailToMeters"
              }
            ]
          },
          "AllocationsRoomsToSupplyZones": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AllocationsRoomsToSupplyZones"
              }
            ]
          },
          "Building": {
            "description": "This entry is stored as an alternative to the distribution formula and is\nrequired if the selected cost center or lease-out is valid for several\nbuildings.\n\nLabel: edifice\nin DEBUG only\nDbName: ZA_ZAEHLER_T.GEB_MSLINK\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Building"
              }
            ]
          },
          "CatalogueType": {
            "type": "integer",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: ZA_ZAEHLER_T.KATALOG_TYP_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "CompanyAddress": {
            "description": "Selection of the person who performed the check.\n\nLabel: Check by\nin DEBUG only\nDbName: ZA_ZAEHLER_T.PRUEFUNG_DURCH\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyAddress"
              }
            ]
          },
          "CostCenter": {
            "description": "Selection of the cost center that is used to settle the meter.\n\nLabel: cost center\nin DEBUG only\nDbName: ZA_ZAEHLER_T.ZAEHLER_KOSTENSTELLE_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CostCenter"
              }
            ]
          },
          "InvoiceAllocation": {
            "type": "integer",
            "description": "Selection of the distribution formula if the costs are to be apportioned to the\nrooms of a group of buildings.\n\nLabel: distribution formula\nin DEBUG only\nDbName: ZA_ZAEHLER_T.RECHNUNG_VERTEILUNG_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "LastCounterPosition": {
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: ZA_ZAEHLER_T.LETZTE_STAND_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MeterReading"
              }
            ]
          },
          "MeterAccountingType": {
            "type": "integer",
            "description": "Depending on the value selected here, different additional fields are activated\nto ensure correct billing, allowing different billing scenarios in\neTASK.Operating Costs Accounting.\n\nLabel: settlement type\nin DEBUG only\nDbName: ZA_ZAEHLER_T.DIREKTABRECHNUNG\nDbType: int NOT NULL\nDbDefault: ((30))",
            "format": "int32"
          },
          "MeterBasePriceType": {
            "type": "integer",
            "description": "Selection of the basic price type of the supplier\n\nLabel: Type of basic price of the supplier\nin DEBUG only\nDbName: ZA_ZAEHLER_T.ZA_GRUNDPREIS_PREISTYP_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "MeterMobileFormatBaseData": {
            "type": "integer",
            "description": "Selection of the file format to be used for the exchange by the import and\nexport function for external meter reading.\n\nLabel: exchange format\nin DEBUG only\nDbName: ZA_ZAEHLER_T.MOBIL_FORMAT_STAMM_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "MeterReadingPeriods": {
            "type": "integer",
            "description": "Selecting the Meter Reading Period\n\nLabel: meter reading period\nin DEBUG only\nDbName: ZA_ZAEHLER_T.ABLESUNG_PERIODE_STAMM_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32"
          },
          "MeterType": {
            "type": "integer",
            "description": "Selection of the meter type (FM portal only).\n\nLabel: meter type\nin DEBUG only\nDbName: ZA_ZAEHLER_T.ZAEHLERTYPID\nDbType: int NULL\nDbDefault: ",
            "format": "int32"
          },
          "MiscLocation": {
            "type": "integer",
            "description": "If the meter is not in a recorded room, the location can be selected here; these\nother locations must be recorded beforehand.\n\nLabel: other location\nin DEBUG only\nDbName: ZA_ZAEHLER_T.FM_SONST_STANDORT_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "NominalAccounts": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "PaidBy": {
            "description": "Selection of the person who performed the certification.\n\nLabel: Certification by\nin DEBUG only\nDbName: ZA_ZAEHLER_T.BEGL_DURCH\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CompanyAddress"
              }
            ]
          },
          "ReadingIntervals": {
            "type": "integer",
            "description": "Selection of the interval in which invoices are to be created for the current\nmeter.\n\nLabel: billing period\nin DEBUG only\nDbName: ZA_ZAEHLER_T.ZA_RECHNUNG_ZEITRAUM_GRUPPE_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "Room": {
            "description": "Selection of the room in which the meter is located.\n\nLabel: Installation location (room)\nin DEBUG only\nDbName: ZA_ZAEHLER_T.ZAEHLER_RAUM_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Room"
              }
            ]
          },
          "Site": {
            "description": "Selection / display of the location to which the meter belongs.\n\nLabel: estate\nin DEBUG only\nDbName: ZA_ZAEHLER_T.LI_NR\nDbType: int NULL\nDbDefault: ((1))",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Site"
              }
            ]
          },
          "TenancyAgreement": {
            "type": "integer",
            "description": "Selection of the lease-out to which the meter costs are assigned.\n\nLabel: lease agreement\nin DEBUG only\nDbName: ZA_ZAEHLER_T.MIETVERTRAG_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "Barcode": {
            "type": "string",
            "description": "Bar Code\n\nLabel: Bar Code\nin DEBUG only\nDbName: ZA_ZAEHLER_T.ZAEHLER_BARCODE\nDbType: varchar(18) NULL\nDbDefault: ",
            "maxLength": 18,
            "nullable": true
          },
          "BasePriceSupplier": {
            "type": "number",
            "description": "Enter the basic price of the supplier\n\nLabel: Base price of the supplier[€]\nin DEBUG only\nDbName: ZA_ZAEHLER_T.GRUNDPREIS_VERSORGER\nDbType: numeric NOT NULL\nDbDefault: ((0))",
            "format": "decimal"
          },
          "BasicFeeMeterReadingPeriod": {
            "type": "number",
            "description": "Enter the basic charge for the meter reading period (net) in euros.\n\nLabel: Basic fee for reading period (net)[€]\nin DEBUG only\nDbName: ZA_ZAEHLER_T.GRUNDGEBUEHR\nDbType: numeric NOT NULL\nDbDefault: ((0))",
            "format": "decimal"
          },
          "CadOid": {
            "type": "string",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: ZA_ZAEHLER_T.ZAEHLER_OID\nDbType: nvarchar(18) NULL\nDbDefault: ",
            "maxLength": 18,
            "nullable": true
          },
          "CalibrationYear": {
            "type": "string",
            "description": "Enter the year in which the meter was last calibrated in YYYY format.\n\nLabel: calibration year\nin DEBUG only\nDbName: ZA_ZAEHLER_T.EICHJAHR\nDbType: varchar(4) NULL\nDbDefault: ",
            "maxLength": 4,
            "nullable": true
          },
          "Code": {
            "type": "string",
            "description": "Enter the number of the meter; the number should be the actual meter number,\notherwise problems may occur during meter reading.\n\nLabel: meter number\nin DEBUG only\nDbName: ZA_ZAEHLER_T.Z_NR\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "minLength": 1
          },
          "ConversionFactor": {
            "type": "number",
            "description": "Enter the conversion factor for the meter reading displayed, which is used to\ndetermine the actual consumption.\n\nLabel: conversion factor\nin DEBUG only\nDbName: ZA_ZAEHLER_T.FAKTOR\nDbType: numeric NOT NULL\nDbDefault: ((1))",
            "format": "decimal"
          },
          "CounterActive": {
            "type": "boolean",
            "description": "If this check box is activated, the meter data for mobile meter reading is\nexported if the \"Mobile meter reading\" check box is activated at the same time.\n\nLabel: Counter active\nin DEBUG only\nDbName: ZA_ZAEHLER_T.AKTIV\nDbType: bit NOT NULL\nDbDefault: ((1))"
          },
          "EquipmentNo": {
            "type": "string",
            "description": "Equipment No.\n\nLabel: Equipment No.\nin DEBUG only\nDbName: ZA_ZAEHLER_T.ZAEHLER_EQUIPMENTNUMMER\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "FinalTest": {
            "type": "string",
            "description": "Select the date on which the meter was last checked.\n\nLabel: final test\nin DEBUG only\nDbName: ZA_ZAEHLER_T.L_PRUEFUNG\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "GltId": {
            "type": "string",
            "description": "Enter the data point of the meter in the building management system.\n\nLabel: GLT-ID\nin DEBUG only\nDbName: ZA_ZAEHLER_T.GLT_ID\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Identification01": {
            "type": "string",
            "description": "Identification 01\n\nLabel: Identification 01\nin DEBUG only\nDbName: ZA_ZAEHLER_T.ZAEHLER_IDENTIFIKATION_01\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Identification02": {
            "type": "string",
            "description": "Identification 02\n\nLabel: Identification 02\nin DEBUG only\nDbName: ZA_ZAEHLER_T.ZAEHLER_IDENTIFIKATION_02\nDbType: nvarchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "InitialCounterPositionDate": {
            "type": "string",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: ZA_ZAEHLER_T.ERSTER_STAND_VOM\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "InitialLevel": {
            "type": "number",
            "description": "Enter the meter reading when installing the meter.\n\nLabel: initial level\nin DEBUG only\nDbName: ZA_ZAEHLER_T.ERSTER_STAND\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal"
          },
          "InitialOperation": {
            "type": "string",
            "description": "Selection of the date on which the meter was commissioned.\n\nLabel: initial operation\nin DEBUG only\nDbName: ZA_ZAEHLER_T.ERSTBETRIEB\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "Manufacturer": {
            "type": "integer",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: ZA_ZAEHLER_T.ZAEHLER_HERSTELLER_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "Maximum": {
            "type": "number",
            "description": "Selection of the maximum value that the counter can display.\n\nLabel: maximum\nin DEBUG only\nDbName: ZA_ZAEHLER_T.MAXWERT\nDbType: numeric NULL\nDbDefault: ((999999.99))",
            "format": "decimal"
          },
          "MobileMeterReading": {
            "type": "boolean",
            "description": "If this check box is activated, the meter data for mobile meter reading is\nexported if the \"Active\" check box is activated at the same time.\n\nLabel: Mobile meter reading\nin DEBUG only\nDbName: ZA_ZAEHLER_T.MOBIL\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "Name": {
            "type": "string",
            "description": "Enter the name of the meter.\n\nLabel: label\nin DEBUG only\nDbName: ZA_ZAEHLER_T.ZAEHLER_BEZEICHNUNG\nDbType: varchar(60) NULL\nDbDefault: ",
            "maxLength": 60,
            "minLength": 1
          },
          "NextExamination": {
            "type": "string",
            "description": "Selection of the date of the next meter check in the date selection opposite.\n\nLabel: next examination\nin DEBUG only\nDbName: ZA_ZAEHLER_T.N_PRUEFUNG\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "Node": {
            "type": "string",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: ZA_ZAEHLER_T.V_KNOTEN\nDbType: varchar(20) NULL\nDbDefault: ",
            "maxLength": 20,
            "nullable": true
          },
          "OtherSupplyAreas": {
            "type": "string",
            "description": "Enter other objects that are counted by the counter.\n\nLabel: Other supply areas\nin DEBUG only\nDbName: ZA_ZAEHLER_T.VERSORGUNGSBEREICHE\nDbType: varchar(255) NULL\nDbDefault: ",
            "maxLength": 255,
            "nullable": true
          },
          "PaymentYear": {
            "type": "string",
            "description": "Enter the year in which the meter was last certified in the format YYYY.\n\nLabel: certification year\nin DEBUG only\nDbName: ZA_ZAEHLER_T.BEGL_JAHR\nDbType: varchar(4) NULL\nDbDefault: ",
            "maxLength": 4,
            "nullable": true
          },
          "ReadingOrder": {
            "type": "number",
            "description": "To be texted by detlef.klonsdorf@etask.de\n\nLabel: reading order\nin DEBUG only\nDbName: ZA_ZAEHLER_T.ABLESEREIHENFOLGE\nDbType: numeric NULL\nDbDefault: ((1000))",
            "format": "decimal",
            "nullable": true
          },
          "Recalibration": {
            "type": "string",
            "description": "Selection of the date on which the meter must be calibrated the next time.\n\nLabel: recalibration\nin DEBUG only\nDbName: ZA_ZAEHLER_T.WIEDEREICHUNG\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "Remark": {
            "type": "string",
            "description": "Entry of remarks or notes on the meter.\n\nLabel: remark\nin DEBUG only\nDbName: ZA_ZAEHLER_T.BEMERKUNG\nDbType: varchar(8000) NULL\nDbDefault: ",
            "maxLength": 8000,
            "nullable": true
          },
          "Tariff": {
            "type": "integer",
            "description": "-- SUMMARY MISSING --\n\nLabel: tariff meters\nin DEBUG only\nDbName: ZA_ZAEHLER_T.TARIF\nDbType: int NOT NULL\nDbDefault: ((1))",
            "format": "int32"
          },
          "TextOnBarcode": {
            "type": "string",
            "description": "Text for Bar Code\n\nLabel: Text for Bar Code\nin DEBUG only\nDbName: ZA_ZAEHLER_T.ZAEHLER_BARCODE_TEXT\nDbType: nvarchar(25) NULL\nDbDefault: ",
            "maxLength": 25,
            "nullable": true
          },
          "ToBePaidUntil": {
            "type": "string",
            "description": "Selection of the date up to which the meter is certified.\n\nLabel: Authenticated until\nin DEBUG only\nDbName: ZA_ZAEHLER_T.BEGL_BIS\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "TransformerRatio": {
            "type": "string",
            "maxLength": 15,
            "nullable": true
          },
          "Transponders": {
            "type": "string",
            "description": "Enter the transponder code of the meter.\n\nLabel: transponders\nin DEBUG only\nDbName: ZA_ZAEHLER_T.TRANSPONDER\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "UnitPriceNet": {
            "type": "number",
            "description": "Enter the net price per unit in euros if it differs from the standard price per\nunit.\n\nLabel: Unit price (net)[€]\nin DEBUG only\nDbName: ZA_ZAEHLER_T.EINHEITSPREIS\nDbType: numeric NULL\nDbDefault: ",
            "format": "decimal",
            "nullable": true
          },
          "YearOfManufacture": {
            "type": "string",
            "description": "Enter the year of manufacture of the meter in YYYY format.\n\nLabel: year of manufacture\nin DEBUG only\nDbName: ZA_ZAEHLER_T.BAUJAHR\nDbType: varchar(4) NULL\nDbDefault: ",
            "maxLength": 4,
            "nullable": true
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: ZA_ZAEHLER_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: ZA_ZAEHLER_T.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: ZA_ZAEHLER_T.CREATED_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: ZA_ZAEHLER_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: ZA_ZAEHLER_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: ZA_ZAEHLER_T.CHANGE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: ZA_ZAEHLER_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: ZA_ZAEHLER_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "AllocationMeterToMeterGroups": {
        "type": "object",
        "description": "Collection of AllocationMeterToMeterGroup",
        "additionalProperties": false
      },
      "MeterHierarchies": {
        "type": "object",
        "description": "Collection of MeterHierarchy",
        "additionalProperties": false
      },
      "MeterReadings": {
        "type": "object",
        "description": "Collection of MeterReading",
        "additionalProperties": false
      },
      "AssignmentTechnicalDetailToMeters": {
        "type": "object",
        "description": "Collection of AssignmentTechnicalDetailToMeter",
        "additionalProperties": false
      },
      "AllocationsRoomsToSupplyZones": {
        "type": "object",
        "description": "Collection of AllocationsRoomsToSupplyZone",
        "additionalProperties": false
      },
      "MeterReading": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MeterReadingBase"
          },
          {
            "type": "object",
            "description": "Use this form to enter the meter readings of a meter for specific meter reading\ndata.\n\nSystemName: MeterReading\nin DEBUG only\nDbName: ZA_STAENDE_T",
            "additionalProperties": false
          }
        ]
      },
      "MeterReadingBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "Meter",
          "RentalMonth",
          "BasicFee",
          "BasicFeeByEnergySupplier",
          "DaysOfBasicFeeByEnergySupplier",
          "NewReading",
          "ReadingDate",
          "ValueOfBasicFeeByEnergySupplier"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "-- SUMMARY MISSING --\n\nLabel: STAND_ID\nin DEBUG only\nDbName: ZA_STAENDE_T.STAND_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "Building": {
            "description": "Display of the building to which the meter is assigned.\n\nLabel: edifice\nin DEBUG only\nDbName: ZA_STAENDE_T.GEB_MSLINK\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Building"
              }
            ]
          },
          "CostCenter": {
            "description": "Display of the cost center through which the consumption monitored by the meter\nis billed.\n\nLabel: cost center\nin DEBUG only\nDbName: ZA_STAENDE_T.KOSTENSTELLE_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CostCenter"
              }
            ]
          },
          "ImportId": {
            "type": "integer",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: Imported on\nin DEBUG only\nDbName: ZA_STAENDE_T.IMPORT_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "InvoiceAllocation": {
            "type": "integer",
            "description": "Display of the distribution formula of the meter.\n\nLabel: distribution formula\nin DEBUG only\nDbName: ZA_STAENDE_T.RECHNUNG_VERTEILUNG_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "Meter": {
            "description": "Counter for which a counter reading is entered.\n\nLabel: numerator\nin DEBUG only\nDbName: ZA_STAENDE_T.Z_ID\nDbType: int NOT NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Meter"
              }
            ]
          },
          "MeterAccountingType": {
            "type": "integer",
            "description": "Display of the settlement type of the meter.\n\nLabel: settlement type\nin DEBUG only\nDbName: ZA_STAENDE_T.DIREKTABRECHNUNG\nDbType: int NULL\nDbDefault: ((30))",
            "format": "int32",
            "nullable": true
          },
          "MeterBasePriceType": {
            "type": "integer",
            "description": "Selection of the basic price type of the supplier\n\nLabel: Type of GPV\nin DEBUG only\nDbName: ZA_STAENDE_T.ZA_GRUNDPREIS_PREISTYP_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "MeterGroups": {
            "type": "integer",
            "readOnly": true,
            "description": "If necessary, select the group from which the allocation to the group of this\ncounter differs from the counter specification.\n\nLabel: cleared from group\nin DEBUG only\nDbName: ZA_STAENDE_T.VERRECHNET_AUS_GRUPPE\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "MeterImport": {
            "type": "integer",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: ZA_STAENDE_T.ZI_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "NominalAccounts": {
            "type": "integer",
            "description": "Display of the G/L account used for billing the consumption values monitored by\nthe meter.\n\nLabel: general ledger account\nin DEBUG only\nDbName: ZA_STAENDE_T.SACHKONTO_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "ParentMeter": {
            "description": "If available, please select the higher-level counter here.\n\nLabel: Superordinate counter\nin DEBUG only\nDbName: ZA_STAENDE_T.UEBERGEORDNET_Z_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Meter"
              }
            ]
          },
          "RentalMonth": {
            "description": "Selection of the month for which the meter reading is entered (billing month).\n\nLabel: Consumption by month\nin DEBUG only\nDbName: ZA_STAENDE_T.MONAT_ID\nDbType: int NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/RentalMonth"
              }
            ]
          },
          "TenancyAgreement": {
            "type": "integer",
            "description": "Display of the lease-out to which the meter is assigned.\n\nLabel: lease agreement\nin DEBUG only\nDbName: ZA_STAENDE_T.MIETVERTRAG_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "BasicFee": {
            "type": "number",
            "description": "Display of the basic charge for the meter reading period.\n\nLabel: Basic fee (net)[€]\nin DEBUG only\nDbName: ZA_STAENDE_T.GRUNDGEBUEHR\nDbType: numeric NOT NULL\nDbDefault: ((0))",
            "format": "decimal"
          },
          "BasicFeeByEnergySupplier": {
            "type": "number",
            "description": "Enter the basic price of the supplier\n\nLabel: GPV [€]\nin DEBUG only\nDbName: ZA_STAENDE_T.GRUNDPREIS_VERSORGER\nDbType: numeric NOT NULL\nDbDefault: ((0))",
            "format": "decimal"
          },
          "BuildingControlSystemId": {
            "type": "string",
            "description": "Display of the data point of the meter in the building management system.\n\nLabel: applies\nin DEBUG only\nDbName: ZA_STAENDE_T.GLT_ID\nDbType: varchar(50) NULL\nDbDefault: ",
            "maxLength": 50,
            "nullable": true
          },
          "Casualties": {
            "type": "number",
            "readOnly": true,
            "description": "Proportional losses from the meter group for this meter\n\nLabel: casualties\nin DEBUG only\nDbName: ZA_STAENDE_T.VERLUSTE\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "DailyConsumption": {
            "type": "number",
            "readOnly": true,
            "description": "Displays the average consumption per day in the meter reading period.\n\nLabel: daily consumption\nin DEBUG only\nDbName: ZA_STAENDE_T.TAGESVERBRAUCH\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "DaysOfBasicFeeByEnergySupplier": {
            "type": "integer",
            "description": "Enter the share of the supplier's basic price (number of days)\n\nLabel: GPV Days\nin DEBUG only\nDbName: ZA_STAENDE_T.GRUNDPREIS_VERSORGER_TAGE\nDbType: int NOT NULL\nDbDefault: ((0))",
            "format": "int32"
          },
          "MeterReadingDateold": {
            "type": "string",
            "readOnly": true,
            "description": "Date of previous meter reading\n\nLabel: Meter reading date old\nin DEBUG only\nDbName: ZA_STAENDE_T.ABLESEDATUM_ALT\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "nullable": true
          },
          "Multiplier": {
            "type": "number",
            "readOnly": true,
            "description": "The consumption is calculated from the meter reading difference (new - old) and\nthe factor.\n\nLabel: consideration\nin DEBUG only\nDbName: ZA_STAENDE_T.FAKTOR\nDbType: numeric NULL\nDbDefault: ((1))",
            "format": "decimal",
            "nullable": true
          },
          "NetConsumption": {
            "type": "number",
            "readOnly": true,
            "description": "This value is used to determine the operating costs.\n\nLabel: Net consumption\nin DEBUG only\nDbName: ZA_STAENDE_T.VERBRAUCH_FUER_BK\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "NewReading": {
            "type": "number",
            "description": "Enter the new counter reading.\n\nLabel: New stand\nin DEBUG only\nDbName: ZA_STAENDE_T.STAND_NEU\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal"
          },
          "NumberConsumptionDays": {
            "type": "integer",
            "readOnly": true,
            "description": "Enter the number of consumption days\n\nLabel: Number of consumption days\nin DEBUG only\nDbName: ZA_STAENDE_T.VERBRAUCHSTAGE\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "OldReading": {
            "type": "number",
            "readOnly": true,
            "description": "Display of the meter reading at the previous reading  Can also be changed\nmanually.\n\nLabel: status old\nin DEBUG only\nDbName: ZA_STAENDE_T.STAND_ALT\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "Price": {
            "type": "number",
            "readOnly": true,
            "description": "Display of the costs of consumption taking into account the factor and the unit\nprice.\n\nLabel: Cost[€]\nin DEBUG only\nDbName: ZA_STAENDE_T.PREIS\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "PricePerUnitNet": {
            "type": "number",
            "description": "Display of the price per unit of consumption.\n\nLabel: EP (net)[€]\nin DEBUG only\nDbName: ZA_STAENDE_T.EINHEITSPREIS\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "ReadingDate": {
            "type": "string",
            "description": "Input / selection of the meter reading date.\n\nLabel: Reading date\nin DEBUG only\nDbName: ZA_STAENDE_T.ABLESEDATUM\nDbType: datetime NULL\nDbDefault: ",
            "format": "date-time",
            "minLength": 1
          },
          "Subcounter": {
            "type": "number",
            "readOnly": true,
            "description": "Display of the consumption of the subcounter of the current meter.\n\nLabel: ? Subcounter\nin DEBUG only\nDbName: ZA_STAENDE_T.VERBRAUCH_UNTERZAEHLER\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "ValueOfBasicFeeByEnergySupplier": {
            "type": "number",
            "description": "Enter the share of the supplier's base price (value)\n\nLabel: GPV Costs[€]\nin DEBUG only\nDbName: ZA_STAENDE_T.GRUNDPREIS_VERSORGER_WERT\nDbType: numeric NOT NULL\nDbDefault: ((0))",
            "format": "decimal"
          },
          "Wastage": {
            "type": "number",
            "readOnly": true,
            "description": "Display of consumption in the meter reading period, taking the factor into\naccount.\n\nLabel: wastage\nin DEBUG only\nDbName: ZA_STAENDE_T.VERBRAUCH\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: ZA_STAENDE_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: ZA_STAENDE_T.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: ZA_STAENDE_T.CREATED_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: ZA_STAENDE_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: ZA_STAENDE_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: ZA_STAENDE_T.CHANGE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: ZA_STAENDE_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: ZA_STAENDE_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "AllocationsRoomsToSupplyZone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AllocationsRoomsToSupplyZoneBase"
          },
          {
            "type": "object",
            "description": "If a meter is assigned the billing type \"Meter group\", rooms must be contained\nin the utility area so that the operating cost billing can be completed\nsuccessfully.\n\nSystemName: AllocationsRoomsToSupplyZone\nin DEBUG only\nDbName: ZA_VERSORGUNGSBEREICHE_T",
            "additionalProperties": false
          }
        ]
      },
      "AllocationsRoomsToSupplyZoneBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "Meters",
          "RentalMonthEnd",
          "Room"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "-- SUMMARY MISSING --\n\nLabel: SUPPLY_AREA_ID\nin DEBUG only\nDbName: ZA_VERSORGUNGSBEREICHE_T.VERSORGUNGSBEREICH_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "Meters": {
            "description": "Display of the meter whose supply area is defined by assigning a room.\n\nLabel: numerator\nin DEBUG only\nDbName: ZA_VERSORGUNGSBEREICHE_T.Z_ID\nDbType: int NOT NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Meter"
              }
            ]
          },
          "NominalAccounts": {
            "type": "integer",
            "description": "Selection of a G/L account that differs from the standard setting in the meter\ngroup This selection is only necessary if the costs for a room are assigned\ndifferently within the service area than in the meter group (for example, for\ncorridors, common areas).\n\nLabel: general ledger account\nin DEBUG only\nDbName: ZA_VERSORGUNGSBEREICHE_T.SACHKONTO_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "RentalMonthEnd": {
            "description": "Input/selection of the month from which the assignment applies, in the format\nYYYYY-MM.\n\nLabel: by\nin DEBUG only\nDbName: ZA_VERSORGUNGSBEREICHE_T.MONAT_VON_ID\nDbType: int NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/RentalMonth"
              }
            ]
          },
          "RentalMonthStart": {
            "description": "Input/selection of the time up to which the assignment is valid in the format\nYYYYY-MM.\n\nLabel: by\nin DEBUG only\nDbName: ZA_VERSORGUNGSBEREICHE_T.MONAT_BIS_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/RentalMonth"
              }
            ]
          },
          "Room": {
            "description": "Selection of the room whose consumption the meter measures.\n\nLabel: room\nin DEBUG only\nDbName: ZA_VERSORGUNGSBEREICHE_T.RAUM_ID\nDbType: int NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Room"
              }
            ]
          },
          "RoomPercentage": {
            "type": "number",
            "description": "Percentage share with which the room belongs to the current service area.\n\nLabel: Room percentage (%)\nin DEBUG only\nDbName: ZA_VERSORGUNGSBEREICHE_T.RAUM_ANTEIL\nDbType: numeric NULL\nDbDefault: ((100))",
            "format": "decimal",
            "nullable": true
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: ZA_VERSORGUNGSBEREICHE_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: ZA_VERSORGUNGSBEREICHE_T.CREATE_DATE\nDbType: datetime NULL\nDbDefault: (getdate())",
            "format": "date-time",
            "nullable": true
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: ZA_VERSORGUNGSBEREICHE_T.CREATED_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: ZA_VERSORGUNGSBEREICHE_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: ZA_VERSORGUNGSBEREICHE_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: ZA_VERSORGUNGSBEREICHE_T.CHANGE_DATE\nDbType: datetime NULL\nDbDefault: (getdate())",
            "format": "date-time",
            "nullable": true
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: ZA_VERSORGUNGSBEREICHE_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: ZA_VERSORGUNGSBEREICHE_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "AssignmentTechnicalDetailToMeter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AssignmentTechnicalDetailToMeterBase"
          },
          {
            "type": "object",
            "description": "Use this form to assign your technical details to counters.\n\nSystemName: AssignmentTechnicalDetailToMeter\nin DEBUG only\nDbName: ZA_TECHDETAILS_T",
            "additionalProperties": false
          }
        ]
      },
      "AssignmentTechnicalDetailToMeterBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "Meters",
          "TechnicalDetails"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "[de]ZA_TECHDETAILS_ID\n\nLabel: ZA_TECHDETAILS_ID\nin DEBUG only\nDbName: ZA_TECHDETAILS_T.ZA_TECHDETAILS_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "Meters": {
            "description": "Meter Number\n\nLabel: Meter Number\nin DEBUG only\nDbName: ZA_TECHDETAILS_T.Z_ID\nDbType: int NOT NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Meter"
              }
            ]
          },
          "TechnicalDetails": {
            "type": "integer",
            "description": "Selection of the technical detail to be assigned to the meter.\n\nLabel: Technical detail\nin DEBUG only\nDbName: ZA_TECHDETAILS_T.TECHDAT_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "Unit": {
            "type": "string",
            "description": "Select the unit for the value of the technical detail (e.g. \"m³\" at a flow\nrate).\n\nLabel: unit\nin DEBUG only\nDbName: ZA_TECHDETAILS_T.EINHEIT\nDbType: varchar(10) NULL\nDbDefault: ",
            "maxLength": 10,
            "nullable": true
          },
          "Value": {
            "type": "string",
            "description": "Value\n\nLabel: Value\nin DEBUG only\nDbName: ZA_TECHDETAILS_T.WERT\nDbType: varchar(10) NULL\nDbDefault: ",
            "maxLength": 10,
            "nullable": true
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: ZA_TECHDETAILS_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: ZA_TECHDETAILS_T.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: ZA_TECHDETAILS_T.CREATED_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: ZA_TECHDETAILS_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: ZA_TECHDETAILS_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: ZA_TECHDETAILS_T.CHANGE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: ZA_TECHDETAILS_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: ZA_TECHDETAILS_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "MeterHierarchy": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MeterHierarchyBase"
          },
          {
            "type": "object",
            "description": "Use this form to define the meter hierarchy by assigning a meter to a\nhigher-level meter To avoid multiple consumption calculations, the meter reading\nmust be subtracted from the higher-level meter.\n\nSystemName: MeterHierarchy\nin DEBUG only\nDbName: ZA_HIERARCHIE_T",
            "additionalProperties": false
          }
        ]
      },
      "MeterHierarchyBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "Meters",
          "ParentMeter",
          "RentalMonthStart",
          "SubtractFromSuperiorCounter"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "-- SUMMARY MISSING --\n\nLabel: id\nin DEBUG only\nDbName: ZA_HIERARCHIE_T.ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "Meters": {
            "description": "Selection of the higher-level counter.\n\nLabel: Superordinate counter\nin DEBUG only\nDbName: ZA_HIERARCHIE_T.UZ_ID\nDbType: int NOT NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Meter"
              }
            ]
          },
          "ParentMeter": {
            "description": "Selection of the counter that is assigned to the counter hierarchy.\n\nLabel: numerator\nin DEBUG only\nDbName: ZA_HIERARCHIE_T.Z_ID\nDbType: int NOT NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Meter"
              }
            ]
          },
          "RentalMonthEnd": {
            "description": "Selection of the time up to which the assignment is valid.\n\nLabel: by\nin DEBUG only\nDbName: ZA_HIERARCHIE_T.MONAT_BIS_ID\nDbType: int NULL\nDbDefault: ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/RentalMonth"
              }
            ]
          },
          "RentalMonthStart": {
            "description": "Selection of the point in time from which the assignment applies.\n\nLabel: from\nin DEBUG only\nDbName: ZA_HIERARCHIE_T.MONAT_VON_ID\nDbType: int NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/RentalMonth"
              }
            ]
          },
          "Losses": {
            "type": "number",
            "description": "-- SUMMARY MISSING --\n\nLabel: losses\nin DEBUG only\nDbName: ZA_HIERARCHIE_T.VERLUSTE\nDbType: numeric NULL\nDbDefault: ((0))",
            "format": "decimal",
            "nullable": true
          },
          "SubtractFromSuperiorCounter": {
            "type": "boolean",
            "description": "Specifies whether the meter readings of the lower-level meter are to be\nsubtracted from those of the higher-level meter during consumption billing.\n\nLabel: Subtract from superior counter\nin DEBUG only\nDbName: ZA_HIERARCHIE_T.VON_UZ_ABZIEHEN\nDbType: bit NOT NULL\nDbDefault: ((1))"
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: ZA_HIERARCHIE_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: ZA_HIERARCHIE_T.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: ZA_HIERARCHIE_T.CREATED_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: ZA_HIERARCHIE_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: ZA_HIERARCHIE_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: ZA_HIERARCHIE_T.CHANGE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: ZA_HIERARCHIE_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: ZA_HIERARCHIE_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "Application": {
        "type": "object",
        "description": "The abbreviations of the FM modules are assigned to their complete names via\nthis portal-internal administration table. Note: The data records may only be\nchanged by system administrators. Every change can lead to system-wide\ncomplications!\n\nSystemName: Application\nin DEBUG only\nDbName: GL_ANWENDUNG_T",
        "additionalProperties": false
      },
      "ImageSize": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "Original",
          "Medium",
          "Small"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "BimSoftware": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BimSoftwareBase"
          },
          {
            "type": "object",
            "description": "To be texted by jens.coosmann@etask.de\n\nSystemName: BimSoftware\nin DEBUG only\nDbName: BIM_SOFTWARE_T",
            "additionalProperties": false
          }
        ]
      },
      "BimSoftwareBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "Name"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "-- SUMMARY MISSING --\n\nLabel: SOFTWARE_ID\nin DEBUG only\nDbName: BIM_SOFTWARE_T.SOFTWARE_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "To be texted by jens.coosmann@etask.de\n\nLabel: label\nin DEBUG only\nDbName: BIM_SOFTWARE_T.SOFTWARE_BEZEICHNUNG\nDbType: nvarchar(150) NOT NULL\nDbDefault: ",
            "maxLength": 150,
            "minLength": 1
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: BIM_SOFTWARE_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: BIM_SOFTWARE_T.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: BIM_SOFTWARE_T.CREATED_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: BIM_SOFTWARE_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: BIM_SOFTWARE_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: BIM_SOFTWARE_T.CHANGE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: BIM_SOFTWARE_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: BIM_SOFTWARE_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "Model": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          },
          {
            "type": "object",
            "description": "styles\n\nSystemName: Model\nin DEBUG only\nDbName: BIM_MODELL_T",
            "additionalProperties": false
          }
        ]
      },
      "ModelBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "ModelType",
          "Site",
          "Code",
          "Name",
          "RetentionPerioddays"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: BIM_MODELL_T.MODELL_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "CurrentModelPhase": {
            "type": "integer",
            "description": "To be texted by jens.coosmann@etask.de\n\nLabel: Current model phase\nin DEBUG only\nDbName: BIM_MODELL_T.MODELLPHASE_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "DisplayVariant": {
            "type": "integer",
            "description": "To be texted by jens.coosmann@etask.de\n\nLabel: display variant\nin DEBUG only\nDbName: BIM_MODELL_T.DARSTELLUNGSVARIANTE_ID\nDbType: int NULL\nDbDefault: ",
            "format": "int32",
            "nullable": true
          },
          "ModelType": {
            "type": "integer",
            "description": "To be texted by jens.coosmann@etask.de\n\nLabel: model type\nin DEBUG only\nDbName: BIM_MODELL_T.MODELLTYP_ID\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "Site": {
            "description": "To be texted by jens.coosmann@etask.de\n\nLabel: habitat\nin DEBUG only\nDbName: BIM_MODELL_T.STANDORT_ID\nDbType: int NOT NULL\nDbDefault: ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Site"
              }
            ]
          },
          "BimServerUrl": {
            "type": "string",
            "readOnly": true,
            "description": "To be texted by jens.coosmann@etask.de\n\nLabel: pumice server\nin DEBUG only\nDbName: BIM_MODELL_T.BIMSERVER_URL\nDbType: nvarchar(100) NULL\nDbDefault: ",
            "maxLength": 100,
            "nullable": true
          },
          "Building": {
            "type": "integer",
            "description": "-- SUMMARY MISSING --\n\nLabel: edifice\nin DEBUG only\nDbName: BIM_MODELL_T.GEBAEUDE_ID\nDbType: int NULL\nDbDefault: ((0))",
            "format": "int32",
            "nullable": true
          },
          "Code": {
            "type": "string",
            "description": "To be texted by jens.coosmann@etask.de\n\nLabel: cipher\nin DEBUG only\nDbName: BIM_MODELL_T.MODELL_CODE\nDbType: nvarchar(100) NOT NULL\nDbDefault: ",
            "maxLength": 100,
            "minLength": 1
          },
          "Mapping": {
            "type": "string",
            "readOnly": true,
            "description": "-- SUMMARY MISSING --\n\nLabel: --\nin DEBUG only\nDbName: BIM_MODELL_T.MODELL_MAPPING\nDbType: xml(8000) NULL\nDbDefault: ",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "To be texted by jens.coosmann@etask.de\n\nLabel: label\nin DEBUG only\nDbName: BIM_MODELL_T.MODELL_BEZEICHNUNG\nDbType: nvarchar(150) NOT NULL\nDbDefault: ",
            "maxLength": 150,
            "minLength": 1
          },
          "RetentionPerioddays": {
            "type": "integer",
            "description": "To be texted by jens.coosmann@etask.de\n\nLabel: Retention period[days]\nin DEBUG only\nDbName: BIM_MODELL_T.AUFBEWAHRUNGSFRIST_TAGE\nDbType: int NOT NULL\nDbDefault: ",
            "format": "int32"
          },
          "ComputerName": {
            "type": "string",
            "readOnly": true,
            "description": "Name or IP adress of the computer used for last change to data record\n\nLabel: Computer Nam\nin DEBUG only\nDbName: BIM_MODELL_T.COMPUTER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (host_name())",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "readOnly": true,
            "description": "Creation date of this data record\n\nLabel: Creation Date\nin DEBUG only\nDbName: BIM_MODELL_T.CREATE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who created the data record\n\nLabel: Created by\nin DEBUG only\nDbName: BIM_MODELL_T.CREATED_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Deactivated": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates if the data record is deactivated (invisible) or activated (visible)\n\nLabel: Deactivated\nin DEBUG only\nDbName: BIM_MODELL_T.DEACTIVATED\nDbType: bit NOT NULL\nDbDefault: ((0))"
          },
          "GlobalUid": {
            "type": "string",
            "readOnly": true,
            "description": "Tooltip[en]: GLOBAL_UID\n\nLabel: [de]GLOBAL_UID\nin DEBUG only\nDbName: BIM_MODELL_T.GLOBAL_UID\nDbType: uniqueidentifier NOT NULL\nDbDefault: (newid())",
            "format": "guid"
          },
          "Modified": {
            "type": "string",
            "readOnly": true,
            "description": "Date of last change to data record\n\nLabel: Last Change\nin DEBUG only\nDbName: BIM_MODELL_T.CHANGE_DATE\nDbType: datetime NOT NULL\nDbDefault: (getdate())",
            "format": "date-time"
          },
          "ModifiedBy": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the program used for last change to data record\n\nLabel: Changed by Application\nin DEBUG only\nDbName: BIM_MODELL_T.CHANGE_FROM\nDbType: nvarchar(100) NULL\nDbDefault: (app_name())",
            "nullable": true
          },
          "Username": {
            "type": "string",
            "readOnly": true,
            "description": "Name of the user who last changed the data record\n\nLabel: [de]Benutzer\nin DEBUG only\nDbName: BIM_MODELL_T.USER_NAME\nDbType: nvarchar(100) NULL\nDbDefault: (user_name())",
            "nullable": true
          }
        }
      },
      "Token": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "EtaskApiToken": {
            "type": "string",
            "description": "Token value",
            "nullable": true
          },
          "ExpirationTime": {
            "type": "string",
            "description": "Token expiration time",
            "format": "date-time"
          },
          "Message": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AuthenticationProvider": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "Portal",
          "ActiveDirectory"
        ],
        "enum": [
          0,
          1
        ]
      }
    },
    "securitySchemes": {
      "api_token": {
        "type": "apiKey",
        "description": "eTASK.Api Token",
        "name": "EtaskApiToken",
        "in": "header"
      }
    }
  },
  "tags": [
    {
      "name": "AllocationPersonnelToHseqFunctions",
      "description": "Here you assign employees to the HSE function they perform. This enables you to assign the employee in participant scheduling to a course in the area of the existing HSE function. If the HSE function is a basic function, all employees can participate in a training course in their area. An additional assignment of employees to the basic function is therefore not necessary, but may be useful for organizational purposes, since the employees actually hold the HSE function during the assignment."
    },
    {
      "name": "DataSourcesOfPersonDatas",
      "description": "Manage data origins using this form. Enter various sources of personnel data here if they are imported by a third party system."
    },
    {
      "name": "Salutations",
      "description": "This list contains all salutatory texts that can be defined as salutations for an employee in the \"Personnel\" form. These salutatory texts are already included in the delivery of eTASK.FM Portal."
    },
    {
      "name": "RentalMonths",
      "description": "This list contains the months provided by the system (day, number of days/month)."
    },
    {
      "name": "EanCategories",
      "description": "Use this form to create categories for internal settlement numbers so that you can specify them later."
    },
    {
      "name": "InternalOrderEans",
      "description": "Use this form to create internal payroll numbers (EANs) that your employees can use to run payroll for their hours. Also make various settings for billing the hours."
    },
    {
      "name": "PaidOvertimeHours",
      "description": "Manage the overtime hours paid out to employees of your company."
    },
    {
      "name": "ProjectStaffs",
      "description": "Create data records for the employees in your company so that you can manage them within project management. Enter the personal data and the bank details for payroll. Write down information on working hours and the employee's leave times."
    },
    {
      "name": "OrderItems",
      "description": "You can use this form to specify the order items for FM orders. Specify the quantity and display the total prices automatically."
    },
    {
      "name": "EtaskEntities",
      "description": "This list represents a directory of the available database tables in the FM portal."
    },
    {
      "name": "AllocationMeterToMeterGroups",
      "description": "Use this form to assign meters to a meter group and define the validity of the assignment."
    },
    {
      "name": "AllocationsRoomsToSupplyZones",
      "description": "If a meter is assigned the billing type \"Meter group\", rooms must be contained in the utility area so that the operating cost billing can be completed successfully."
    },
    {
      "name": "AssignmentTechnicalDetailToMeters",
      "description": "Use this form to assign your technical details to counters."
    },
    {
      "name": "MeterHierarchies",
      "description": "Use this form to define the meter hierarchy by assigning a meter to a higher-level meter To avoid multiple consumption calculations, the meter reading must be subtracted from the higher-level meter."
    },
    {
      "name": "MeterReadings",
      "description": "Use this form to enter the meter readings of a meter for specific meter reading data."
    },
    {
      "name": "Meters",
      "description": "Enter all relevant meter data for your company in this form, including the meter number, the location of the meter via the room, information on the meter's certification, calibration and testing, information on the meter's register, configuration of the meter's mobile meter reading and relevant information on operating cost billing."
    },
    {
      "name": "HseqFunctions",
      "description": "Use this form to create HSE functions or responsibilities (for example, \"first responder\" or \"waste manager\") and assign employees to these functions. You can also specify the intervals for the training courses based on the existing HSE function and define the HSE function as the basic function. The training courses belonging to the function are listed in the lower part of the form."
    },
    {
      "name": "Applications",
      "description": "The abbreviations of the FM modules are assigned to their complete names via this portal-internal administration table. Note: The data records may only be changed by system administrators. Every change can lead to system-wide complications!"
    },
    {
      "name": "Buildings",
      "description": "Create data records for the various buildings in the organization. Enter information on the identification (assignment of a location and a building number and description) and address of the building as well as the building description. See at a glance how the current use of space (according to DIN 277) is distributed in the building. Assign the floors in the building. If you also use eTASK Maintenance, all maintenance contracts concluded with external or internal service providers for this building are displayed."
    },
    {
      "name": "CompanyAddresses",
      "description": "Enter data records for all external companies with which the FM department cooperates. These data records are available in many places of the FM portal (e.g. to identify the contractor in eTASK Maintenance). Assign the company a type, a trade, address and communication details, and company employee data. Evaluate the company (adherence to delivery dates, price loyalty, etc.) to document the relationship of trust. Upload documents concerning this company. When using eTASK.CAD, the company's identification in CAD plans is also documented here. When using eTASK. contractor logon, the company's employees are registered who have temporary access to the building for work. If eTASK deficiency management is used, the construction projects in which the company is the client are assigned to the company."
    },
    {
      "name": "CostCenters",
      "description": "Here you can create data records for cost centers in your company. The entered cost centers can be selected later in many places of the FM portal."
    },
    {
      "name": "Floors",
      "description": "Use this form to manage the floors of the buildings by first assigning the building in which the floor is located and then entering further information for identifying the floor (name, level, area, etc.). Then assign all rooms on the floor. If eTASK.CAD is also used, the floor plan is displayed in a new tab after clicking on the magnifying glass icon. In the \"CAD drawings\" area you can upload existing CAD plans of the floor on the project side."
    },
    {
      "name": "Persons",
      "description": "Use this form to create employee records to keep track of your staff. You can then select the persons entered here in various forms in the FM portal to assign tasks to them, for example. Enter data to identify the employee and his or her contact data. Assign the employee to the room in which he or she works. Manage the employee's access data and rights within the FM portal. Assign the inventory to the employee that he or she uses and that is displayed on his or her personalized start page. When using eTASK. key management, the keys handed out to the employee are displayed. When using eTASK. employee examinations, the company medical examinations in which the employee participated are listed."
    },
    {
      "name": "Rooms",
      "description": "Manage data records for each individual room in the building to ensure complete space management. Only the room area entered here influences the areas of floors and buildings. Spatial data sets are the basis for many other components of the FM portal and other eTASK products. They are used, for example, to make room bookings or to assign employees and objects to them. First select the floor on which the room is located. Then assign a room number and the space usage of the room according to DIN 277 (or according to in-house standards) to each room. Add information on the settlement of space costs, the floor space of the room, and the number of work centers available in the room. Then assign the current reservation (work center and employee) to the room. Upload a photo of the room and manage information on the structural condition of the room (flooring, traffic load, etc.). Add one or more cost centers for the room and data to communication devices that are available in the room. Finally, you can create or view data records for objects in the room. When using eTASK.CAD, the room is displayed in the floor plan after clicking on the magnifying glass icon. When using eTASK Furniture, all furniture in the room is displayed or added. The same applies when using eTASK.equipment/IT for the IT devices in the room. If eTASK. defect management is connected, all construction defects found in the room are also displayed."
    },
    {
      "name": "Sites",
      "description": "Create data records for the different locations of your organization. These locations represent locations of companies and branches and can be selected later, for example in forms for buildings, in order to clearly determine their location. The \"Locations\" form shows the buildings already assigned to the location. This assignment of buildings cannot be changed here, but only in the \"Buildings\" form. When using eTASK. open spaces, the list of all parking spaces at the location is also displayed."
    },
    {
      "name": "BimSoftwares",
      "description": "To be texted by jens.coosmann@etask.de"
    },
    {
      "name": "Models",
      "description": "styles"
    },
    {
      "name": "Login",
      "description": "<p>Login into eTask API</p>"
    },
    {
      "name": "Hseq",
      "description": "<p>Manage of data for Health, Safety, Environment and Quality</p>"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Bim",
      "tags": [
        "BimSoftwares",
        "Models"
      ]
    },
    {
      "name": "Core",
      "tags": [
        "Applications",
        "Buildings",
        "CompanyAddresses",
        "CostCenters",
        "Floors",
        "Persons",
        "Rooms",
        "Sites",
        "Login"
      ]
    },
    {
      "name": "Hseq",
      "tags": [
        "HseqFunctions",
        "Hseq"
      ]
    },
    {
      "name": "MeterManagement",
      "tags": [
        "AllocationMeterToMeterGroups",
        "AllocationsRoomsToSupplyZones",
        "AssignmentTechnicalDetailToMeters",
        "MeterHierarchies",
        "MeterReadings",
        "Meters"
      ]
    },
    {
      "name": "PortalOperation",
      "tags": [
        "EtaskEntities"
      ]
    },
    {
      "name": "Procurement",
      "tags": [
        "OrderItems"
      ]
    },
    {
      "name": "ProjectManagement",
      "tags": [
        "EanCategories",
        "InternalOrderEans",
        "PaidOvertimeHours",
        "ProjectStaffs"
      ]
    },
    {
      "name": "TenancyManagement",
      "tags": [
        "RentalMonths"
      ]
    },
    {
      "name": "Workplace",
      "tags": [
        "AllocationPersonnelToHseqFunctions",
        "DataSourcesOfPersonDatas",
        "Salutations"
      ]
    }
  ]
}