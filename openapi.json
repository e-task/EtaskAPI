{
  "x-generator": "NSwag v13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v12.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "eTASK Universal BIM API",
    "description": "# Welcome to the reference of the eTASK REST API\r\n\r\neTASK is an application for managing your real estate portfolio. You have access also via REST to your data. REST is a web-service protocol that enables an easy and rapid development by using everyday HTTP and JSON technology.\r\n\r\nThe eTASK REST API provides a broad set of operations and resources. The  unified eTASK Universal BIM API enables you to create powerful real estate solutions for a variety of scenarios, e.g.\r\n\r\n* Access and share all information and documents\r\n* Navigate thour your BIM models\r\n* Drive your workflows\r\n* Integrate App on Android oder iOs Devices\r\n* Connect to you sensors or your favourite IoT Platform\r\n\r\nThis API offers a simple, fast and secure access, based on the OpenAPI specification. Write apps, integrate you data into other systems and digitize you workflow with the help of our API.\r\n\r\nEvery customer of eTASK has access to the API of the own instance based on the valid license model. In the cloud environment the api is available from the public internet.\r\n\r\nWant to share your opinion on how our API works for you? Tell us how you feel about using our API and what we can do to make it better.\r\n\r\n\r\n# Getting started\r\n\r\n*__Note__: If you need help using eTASK's APIs, then the best place to start is the issue list in the our [Github repository for the API](https://github.com/e-task/EtaskAPI). eTASK's support team for our application isn't able to answer questions about the API. Better, you contact the DEV team via GitHub, if you have a technical question.*\r\n\r\n## HTTP verbs\r\nWhere possible, the API strives to use the following HTTP verbs for each action.\r\n\r\n* __HEAD__ : Can be issued against any resource to get just the HTTP header info.\r\n* __GET__  : Used for retrieving resources.\r\n* __POST__ : Used for creating resources.\r\n* __PUT__   : Used for replacing resources or collections.\r\n* __DELETE__: Used for deleting resources.\r\n\r\n## Request Content-Type\r\nThe Content-Type for POST and PUT requests must be set to application/json, otherwise you may receive a bad request response.\r\n\r\n```\r\nContent-Type: application/json\r\n```\r\n\r\n## Encoding\r\nThe client must include in the header of every request this encoding: \r\n```\r\nAccept-Charset: utf-8\r\n```\r\nThe response will deliver every request in the encoding of UTF-8. \r\n\r\n## Encoding for URL parameters\r\nWhen using GET operation to fetch entries from a form via any REST client, URL parameters may be required. Examples of URL parameters are qualification (q), fields, limit and sort. While using any of these parameters with request URL, these must be encoded properly and then used in the request. Else results may not be as expected.\r\nTo encode URL parameters, use any third party tool or site such as https://www.w3schools.com/html/html_urlencode.asp, where non-encoded URL parameters can be converted into encoded URL parameter string. Use these encoded parameters to send a REST request.\r\n\r\nFor example, for sending qualification on a form like this: ```'Incident Number' = 'INC000000000701'``` the request should be encoded and sent like this: ```%27Incident+Number%27+%3D+%27INC000000000701%27```\r\n\r\n## Timezones\r\nWe apply the following rules, in order of priority, to determine timezone information for API calls. \r\n\r\n* Explicitly provide an ISO 8601 timestamp with timezone information. \r\n* For API calls that allow for a timestamp to be specified, we use that exact timestamp. \r\n* The provisioning of a timestamp in every field of type ```date``` or ```datetime``` is reqired in the API. \r\n* If, for whatever reason, there is no information about the timezone in the request, the API assumes the timezone '+01:00' in creating the answer. So, this request ```2019-02-27T15:05:06``` will be processed like this ```2019-02-27T15:05:06+01:00``` and the time information in the responses will be returned for the timezone '+01:00'.\r\n\r\n## HTTP Status Codes for Success and  Errors\r\nThe response from eTASK will have an HTTP status code that will help you determine the status of the response.  When an error occurs, our API will return an appropriate HTTP status code and an error message description. Our API uses the appropriate HTTP status code to indicate the type of success or the problem that was encountered. \r\n\r\nEvery ressource has documented HTTP status codes for the response with special meaning. Please check the documentation of the ressource you use.\r\n\r\nBelow is a general overview of what those codes mean, along with some suggestions that might help you fix things.\r\n\r\n* __200 Success__: The request has succeeded. The information returned with the response is dependent on the method used in the request.\r\n* __201 Created__: The request has been fulfilled and resulted in a new resource being created.\r\n* __400 Bad Request__: This is likely to be caused by a programming error on your part. Check the requirements of the endpoint you're calling in the HTTP API Reference.\r\n* __401 Unauthorized__: This means that we were not able to authenticate you based on the information provided in the request. Make sure you're sending your access_token and your credentials based on the security specification of our API. The section 'Authentication and API Keys' gives a detailed explanation of how this works. If you're connecting using OAuth, don't forget that tokens can expire. These will need to be refreshed. Not doing so can also result in getting a 401 error. If you need to check your application's system parameters page. This will include the token for your application.\r\n* __403 Forbidden__: You don't have access to whatever it is you're asking for.\r\n* __404 Not Found__: You're asking for something that doesn't exist. Check the URL that you're requesting.\r\n* __406 Not Accessible__: This means it wasn't possible to respond with the format you requested. Check the Accept header that you're sending.\r\n* __422 Unprocessable Entity__: The request was valid, but one or more of the parameters looks a little screwy. It's possible that you sent data in the wrong format. One example would be providing an array when we expected a string.\r\n* __429 Too Many Requests__: To keep the amount of spam on eTASK as low as possible, our API limits the rate at which you can perform certain actions. Read the Rate Limits page to find out more.\r\n* __500 Internal Server Error__: Uh-oh. Something went wrong on our side. We're sorry. We keep track of these, and we'll try to fix it! If possible, read the server log to get more information about this error.\r\n* __503 Service Unavailable__: This means that we're having some trouble, and our servers are too busy to handle your request. You'll want to check for these and give your user a chance to retry the request. We keep track of these and try to make sure they don't happen.\r\n* __504 Gateway Timeout__: This means the request is taking too long. However, it doesn't always mean that we didn't receive your request. We could still be chugging away on the changes you made, and this means that you may want to check before retrying.\r\n\r\n## Business rules\r\nMany ressources own specific business rules. Most of them can be requested in appendinge the element ```/Rules``` to the path of the ressource. The response will then be a list of the rules that shall be applied for the ressource. If the requests does not fulfill one of these rules, the response will contain the name of the violated rule and a notice that descibes the violation more in detail. In these situation you have to correct your request to fulfill with all rules.\r\n\r\n## Cross origin resource sharing\r\nThe API supports Cross Origin Resource Sharing (CORS) for AJAX requests from any origin. You can read the CORS W3C Recommendation, or this intro from the HTML 5 Security Guide.\r\nHere's a sample request sent from a browser hitting http://example.com:\r\n\r\n```\r\ncurl -i 'https://dotnet.etask.de/API/Core/Persons' -H Origin: 'http://example.com'\r\nHTTP/1.1 302 Found\r\nAccess-Control-Allow-Origin: *\r\nAccess-Control-Expose-Headers: ETag, Link, X-Etask-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\r\n```\r\n\r\nThis is what the CORS preflight request looks like:\r\n```\r\ncurl -i 'https://dotnet.etask.de/API/Core/Persons' -H Origin: 'http://example.com' -X OPTIONS\r\nHTTP/1.1 204 No Content\r\nAccess-Control-Allow-Origin: *\r\nAccess-Control-Allow-Headers: Authorization, Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since, X-Etask-OTP, X-Requested-With\r\nAccess-Control-Allow-Methods: GET, POST, PATCH, PUT, DELETE\r\nAccess-Control-Expose-Headers: ETag, Link, X-Etask-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\r\nAccess-Control-Max-Age: 86400\r\n```\r\n\r\n## <a name=\"ua-required\"></a>User agent required\r\nAll API requests MUST include a valid User-Agent header. Requests with no User-Agent header will be rejected. We request that you use your eTASK username, or the name of your application, for the User-Agent header value. This allows us to contact you if there are problems.\r\nHere's an example:\r\n\r\n```\r\nUser-Agent: My-Awesome-Etask-App\r\n```\r\n\r\ncURL sends a valid User-Agent header by default. If you provide an invalid User-Agent header via cURL (or via an alternative client), you will receive a 403 Forbidden response:\r\n\r\n```\r\ncurl -iH User-Agent: 'https://dotnet.etask.de/API/Core/Persons'\r\nHTTP/1.0 403 Forbidden\r\nConnection: close\r\nContent-Type: text/html\r\nRequest forbidden by administrative rules.\r\nPlease make sure your request has a User-Agent header.\r\nCheck https://dotnet.etask.de/API for other possible causes.\r\n```\r\n\r\n## Conditional requests\r\nMost responses return an ETag header. Many responses also return a Last-Modified header. You can use the values of these headers to make subsequent requests to those resources using the If-None-Match and If-Modified-Since headers, respectively. If the resource has not changed, the server will return a 304 Not Modified.\r\nNote: Making a conditional request and receiving a 304 response does not count against your Rate Limit, so we encourage you to use it whenever possible.\r\n```\r\ncurl -i 'https://dotnet.etask.de/API/Core/Persons'\r\n```\r\n\r\n```\r\nHTTP/1.1 200 OK\r\nCache-Control: private, max-age=60\r\nETag: '644b5b0155e6404a9cc4bd9d8b1ae730'\r\nLast-Modified: Thu, 05 Jul 2012 15:31:30 GMT\r\nStatus: 200 OK\r\nVary: Accept, Authorization, Cookie\r\nX-RateLimit-Limit: 5000\r\nX-RateLimit-Remaining: 4996\r\nX-RateLimit-Reset: 1372700873\r\n```\r\n```\r\ncurl -i 'https://dotnet.etask.de/API/Core/Persons' -H 'If-None-Match: '644b5b0155e6404a9cc4bd9d8b1ae730'\r\n```\r\n```\r\nHTTP/1.1 304 Not Modified\r\nCache-Control: private, max-age=60\r\nETag: '644b5b0155e6404a9cc4bd9d8b1ae730'\r\nLast-Modified: Thu, 05 Jul 2012 15:31:30 GMT\r\nStatus: 304 Not Modified\r\nVary: Accept, Authorization, Cookie\r\nX-RateLimit-Limit: 5000\r\nX-RateLimit-Remaining: 4996\r\nX-RateLimit-Reset: 1372700873\r\n```\r\n```\r\ncurl -i 'https://dotnet.etask.de/API/Core/Persons' -H 'If-Modified-Since: Thu, 05 Jul 2012 15:31:30 GMT'\r\n```\r\n```\r\nHTTP/1.1 304 Not Modified\r\nCache-Control: private, max-age=60\r\nLast-Modified: Thu, 05 Jul 2012 15:31:30 GMT\r\nStatus: 304 Not Modified\r\nVary: Accept, Authorization, Cookie\r\nX-RateLimit-Limit: 5000\r\nX-RateLimit-Remaining: 4996\r\nX-RateLimit-Reset: 1372700873\r\n```\r\n\r\n### Server URI\r\nThis API documentation uses the URI https://dotnet.etask.de/API as a placeholder for all other eTASK installations. Please replace https://dotnet.etask.de/API with the server URI of you eTASK installation. To try out the API, connect directly to your own eTASK installation or contact us to get access to a developer installation.\r\n\r\n### TLS connection required\r\nThe API requires connections based on Transport Layer Security (TLS), more known under it's predecessor designation Secure Sockets Layer (SSL). The API requires TLS 1.2. The server MUST provide a valid certificate, that is accepted by the client's computer. If the client's computer does not trust the certificate, the API will return a 403 Forbidden response:\r\n\r\n```\r\ncurl -iH User-Agent: 'https://dotnet.etask.de/API/'\r\nHTTP/1.0 403 Forbidden\r\nConnection: close\r\nContent-Type: text/html\r\nRequest forbidden by administrative rules.\r\nPlease make sure your server provides a valid TLS certificate.\r\nCheck https://dotnet.etask.de/API for other possible causes.\r\n```\r\n\r\nRequests, that do not even use the https protocol will be automatically redirected to https.\r\n\r\n### Application Key\r\nEach application that wants to access the API needs an individual application key (e.g. your mobile App). Please visit our [customer portal](https://kundencenter.etask.de) to request an Application API key for your instance. In your submission, please be prepared to provide the following:\r\n*\tYour instance uri\r\n*\tThe 'live date' of your app and feature that integrates with the API. Briefly describe how the eTASK API integrates with your app and provide screenshots of the implementation.\r\n*\tAs per our section 5 A of our terms of service, we require all apps that use the eTASK API to conspicuously display 'Powered By eTASK' attribution marks where the API is utilized. You can find approved official logo marks here. Please provide screenshots of your attribution placement.\r\n\r\n### API token per user\r\n\r\nEvery request is secured by an user token that is created based on username and password with the ressource ```/Core/Login```. If the authentication was succesful, the API creates a key in the format of a Json Web Token (JWT). This token must be send in the header of every subsequent request (api_token). This ensures the security of all ressources and the compliance with the individual user rights per API ressource.\r\n\r\nTo obtain a user token, please call the following ressource:\r\n```\r\ncurl -iH User-Agent: 'https://dotnet.etask.de/API/Core/Login'\r\n```\r\n\r\n## Ressource Names\r\nMost API endpoints provide the same content as their HTML counterparts in the related eTASK FM Portal. For example, the URL /rooms serves a list of rooms, the /api/rooms API provides the same information in JSON format. Please be aware, that the configuration of user rights and other UI related configuration of the FM-Portal can show less information, that the API.\r\n\r\n## Openapi file\r\nThe API is documented, based on the [specification](https://github.com/OAI/OpenAPI-Specification) of the [Openapi Initiative](https://www.openapis.org/) fka as Swagger.\r\n\r\nWe provide direct access to our [Openapi 3.0 file](/API/openapi/v1/openapi.json). Use it in you favourite API tool. \r\n\r\n##Thanks for reading until the end of the docs :-)\r\nIf you have any question, please feel free to contact us.  Please submit API corrections via github issues. Please see our terms of service for any restrictions on using the service. We also recommend using the Postman or another client tool for restfull API’s view the API responses.\r\n\r\nWe are exited about what you will build upon our API. Have you made anything exciting? __Please share [here](https://twitter.com/etask)__.",
    "contact": {
      "name": "eTASK Immobilien Software GmbH",
      "url": "https://etask.de",
      "email": "api@etask.de"
    },
    "license": {
      "name": "License",
      "url": "https://www.etask.de/wp-content/uploads/eTASK_AGB.pdf"
    },
    "version": "2019"
  },
  "servers": [
    {
      "url": "https://dotnet.etask.de/API",
      "description": "Local server"
    }
  ],
  "paths": {
    "/Workplace/AllocationPersonnelToHseqFunctions": {
      "get": {
        "tags": [
          "Workplace.AllocationPersonnelToHseqFunctions"
        ],
        "summary": "Fetch the list of all 'AllocationPersonnelToHseqFunctions'.",
        "operationId": "AllocationPersonnelToHseqFunctions_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllocationPersonnelToHseqFunction"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'AllocationPersonnelToHseqFunctions' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Workplace.AllocationPersonnelToHseqFunctions"
        ],
        "summary": "Create a new 'AllocationPersonnelToHseqFunction'.",
        "operationId": "AllocationPersonnelToHseqFunctions_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'AllocationPersonnelToHseqFunction' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AllocationPersonnelToHseqFunction"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'AllocationPersonnelToHseqFunction' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllocationPersonnelToHseqFunction"
                }
              }
            }
          },
          "400": {
            "description": "if given 'AllocationPersonnelToHseqFunction' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Workplace/AllocationPersonnelToHseqFunctions/{guid}": {
      "get": {
        "tags": [
          "Workplace.AllocationPersonnelToHseqFunctions"
        ],
        "summary": "Fetch a 'AllocationPersonnelToHseqFunction' by the global identifier.",
        "operationId": "AllocationPersonnelToHseqFunctions_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllocationPersonnelToHseqFunction"
                }
              }
            }
          },
          "404": {
            "description": "'AllocationPersonnelToHseqFunction' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Workplace.AllocationPersonnelToHseqFunctions"
        ],
        "summary": "Delete a 'AllocationPersonnelToHseqFunction' by given global identifier",
        "operationId": "AllocationPersonnelToHseqFunctions_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'AllocationPersonnelToHseqFunction' by given identifier was deleted"
          },
          "400": {
            "description": "'AllocationPersonnelToHseqFunction' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Workplace.AllocationPersonnelToHseqFunctions"
        ],
        "summary": "Update an specified 'AllocationPersonnelToHseqFunction' by given global identifier.",
        "operationId": "AllocationPersonnelToHseqFunctions_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'AllocationPersonnelToHseqFunction' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AllocationPersonnelToHseqFunction"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'AllocationPersonnelToHseqFunction' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllocationPersonnelToHseqFunction"
                }
              }
            }
          },
          "404": {
            "description": "'AllocationPersonnelToHseqFunction' not found!"
          },
          "400": {
            "description": "if 'AllocationPersonnelToHseqFunction' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Workplace/AllocationPersonnelToHseqFunctions/Count": {
      "get": {
        "tags": [
          "Workplace.AllocationPersonnelToHseqFunctions"
        ],
        "summary": "Fetch the total count of 'AllocationPersonnelToHseqFunctions'.",
        "operationId": "AllocationPersonnelToHseqFunctions_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'AllocationPersonnelToHseqFunctions' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Workplace/AllocationPersonnelToHseqFunctions/{guid}/Download/{filename}": {
      "get": {
        "tags": [
          "Workplace.AllocationPersonnelToHseqFunctions"
        ],
        "operationId": "AllocationPersonnelToHseqFunctions_Download",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "item or file not found"
          },
          "200": {
            "description": "returns one file specified filename of an item specified by guid",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Workplace/AllocationPersonnelToHseqFunctions/{guid}/Documents": {
      "get": {
        "tags": [
          "Workplace.AllocationPersonnelToHseqFunctions"
        ],
        "operationId": "AllocationPersonnelToHseqFunctions_Documents",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns all documents (without content) of an item specified by guid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Workplace/DataSourcesOfPersonDatas": {
      "get": {
        "tags": [
          "Workplace.DataSourcesOfPersonDatas"
        ],
        "summary": "Fetch the list of all 'DataSourcesOfPersonDatas'.",
        "operationId": "DataSourcesOfPersonDatas_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSourcesOfPersonData"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'DataSourcesOfPersonDatas' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Workplace.DataSourcesOfPersonDatas"
        ],
        "summary": "Create a new 'DataSourcesOfPersonData'.",
        "operationId": "DataSourcesOfPersonDatas_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'DataSourcesOfPersonData' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DataSourcesOfPersonData"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'DataSourcesOfPersonData' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourcesOfPersonData"
                }
              }
            }
          },
          "400": {
            "description": "if given 'DataSourcesOfPersonData' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Workplace/DataSourcesOfPersonDatas/{guid}": {
      "get": {
        "tags": [
          "Workplace.DataSourcesOfPersonDatas"
        ],
        "summary": "Fetch a 'DataSourcesOfPersonData' by the global identifier.",
        "operationId": "DataSourcesOfPersonDatas_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourcesOfPersonData"
                }
              }
            }
          },
          "404": {
            "description": "'DataSourcesOfPersonData' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Workplace.DataSourcesOfPersonDatas"
        ],
        "summary": "Delete a 'DataSourcesOfPersonData' by given global identifier",
        "operationId": "DataSourcesOfPersonDatas_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'DataSourcesOfPersonData' by given identifier was deleted"
          },
          "400": {
            "description": "'DataSourcesOfPersonData' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Workplace.DataSourcesOfPersonDatas"
        ],
        "summary": "Update an specified 'DataSourcesOfPersonData' by given global identifier.",
        "operationId": "DataSourcesOfPersonDatas_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'DataSourcesOfPersonData' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DataSourcesOfPersonData"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'DataSourcesOfPersonData' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourcesOfPersonData"
                }
              }
            }
          },
          "404": {
            "description": "'DataSourcesOfPersonData' not found!"
          },
          "400": {
            "description": "if 'DataSourcesOfPersonData' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Workplace/DataSourcesOfPersonDatas/Count": {
      "get": {
        "tags": [
          "Workplace.DataSourcesOfPersonDatas"
        ],
        "summary": "Fetch the total count of 'DataSourcesOfPersonDatas'.",
        "operationId": "DataSourcesOfPersonDatas_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'DataSourcesOfPersonDatas' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Workplace/Salutations": {
      "get": {
        "tags": [
          "Workplace.Salutations"
        ],
        "summary": "Fetch the list of all 'Salutations'.",
        "operationId": "Salutations_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Salutation"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Salutations' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Workplace.Salutations"
        ],
        "summary": "Create a new 'Salutation'.",
        "operationId": "Salutations_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Salutation' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Salutation"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Salutation' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Salutation"
                }
              }
            }
          },
          "400": {
            "description": "if given 'Salutation' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Workplace/Salutations/{guid}": {
      "get": {
        "tags": [
          "Workplace.Salutations"
        ],
        "summary": "Fetch a 'Salutation' by the global identifier.",
        "operationId": "Salutations_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Salutation"
                }
              }
            }
          },
          "404": {
            "description": "'Salutation' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Workplace.Salutations"
        ],
        "summary": "Delete a 'Salutation' by given global identifier",
        "operationId": "Salutations_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'Salutation' by given identifier was deleted"
          },
          "400": {
            "description": "'Salutation' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Workplace.Salutations"
        ],
        "summary": "Update an specified 'Salutation' by given global identifier.",
        "operationId": "Salutations_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Salutation' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Salutation"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'Salutation' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Salutation"
                }
              }
            }
          },
          "404": {
            "description": "'Salutation' not found!"
          },
          "400": {
            "description": "if 'Salutation' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Workplace/Salutations/Count": {
      "get": {
        "tags": [
          "Workplace.Salutations"
        ],
        "summary": "Fetch the total count of 'Salutations'.",
        "operationId": "Salutations_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'Salutations' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/WorkflowEngine/Substitutes": {
      "get": {
        "tags": [
          "WorkflowEngine.Substitutes"
        ],
        "summary": "Fetch the list of all 'Substitutes'.",
        "operationId": "Substitutes_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Substitute"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Substitutes' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "WorkflowEngine.Substitutes"
        ],
        "summary": "Create a new 'Substitute'.",
        "operationId": "Substitutes_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Substitute' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Substitute"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Substitute' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Substitute"
                }
              }
            }
          },
          "400": {
            "description": "if given 'Substitute' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/WorkflowEngine/Substitutes/{guid}": {
      "get": {
        "tags": [
          "WorkflowEngine.Substitutes"
        ],
        "summary": "Fetch a 'Substitute' by the global identifier.",
        "operationId": "Substitutes_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Substitute"
                }
              }
            }
          },
          "404": {
            "description": "'Substitute' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "WorkflowEngine.Substitutes"
        ],
        "summary": "Delete a 'Substitute' by given global identifier",
        "operationId": "Substitutes_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'Substitute' by given identifier was deleted"
          },
          "400": {
            "description": "'Substitute' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "WorkflowEngine.Substitutes"
        ],
        "summary": "Update an specified 'Substitute' by given global identifier.",
        "operationId": "Substitutes_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Substitute' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Substitute"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'Substitute' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Substitute"
                }
              }
            }
          },
          "404": {
            "description": "'Substitute' not found!"
          },
          "400": {
            "description": "if 'Substitute' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/WorkflowEngine/Substitutes/Count": {
      "get": {
        "tags": [
          "WorkflowEngine.Substitutes"
        ],
        "summary": "Fetch the total count of 'Substitutes'.",
        "operationId": "Substitutes_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'Substitutes' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/WorkflowEngine/Substitutes/ByPerson/{login}": {
      "get": {
        "tags": [
          "WorkflowEngine.Substitutes"
        ],
        "summary": "Fetches all 'Substitute' for Person.",
        "operationId": "Substitutes_GetByLogin",
        "parameters": [
          {
            "name": "login",
            "in": "path",
            "required": true,
            "description": "The login name.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all Substitutes for user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Substitute"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Substitute' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/WorkflowEngine/Substitutes/SubstitutedPersonsByLogin/{login}": {
      "get": {
        "tags": [
          "WorkflowEngine.Substitutes"
        ],
        "summary": "Get substituted persons by loginname",
        "operationId": "Substitutes_GetSubstitutedPersonsByLogin",
        "parameters": [
          {
            "name": "login",
            "in": "path",
            "required": true,
            "description": "The login.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of related objects, that shall be returned additionally",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all persons for whom the user is listed as a substitute.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Substitute"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no person found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/WorkflowEngine/Tickets": {
      "get": {
        "tags": [
          "WorkflowEngine.Tickets"
        ],
        "summary": "Fetch the list of all 'Tickets'.",
        "operationId": "Tickets_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ticket"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Tickets' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "WorkflowEngine.Tickets"
        ],
        "summary": "Create a new 'Ticket'.",
        "operationId": "Tickets_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Ticket' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Ticket"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Ticket' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400": {
            "description": "if given 'Ticket' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/WorkflowEngine/Tickets/{guid}": {
      "get": {
        "tags": [
          "WorkflowEngine.Tickets"
        ],
        "summary": "Fetch a 'Ticket' by the global identifier.",
        "operationId": "Tickets_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "404": {
            "description": "'Ticket' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "WorkflowEngine.Tickets"
        ],
        "summary": "Delete a 'Ticket' by given global identifier",
        "operationId": "Tickets_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'Ticket' by given identifier was deleted"
          },
          "400": {
            "description": "'Ticket' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "WorkflowEngine.Tickets"
        ],
        "summary": "Update an specified 'Ticket' by given global identifier.",
        "operationId": "Tickets_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Ticket' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Ticket"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'Ticket' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "404": {
            "description": "'Ticket' not found!"
          },
          "400": {
            "description": "if 'Ticket' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/WorkflowEngine/Tickets/Count": {
      "get": {
        "tags": [
          "WorkflowEngine.Tickets"
        ],
        "summary": "Fetch the total count of 'Tickets'.",
        "operationId": "Tickets_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'Tickets' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/TenancyManagement/RentalMonths": {
      "get": {
        "tags": [
          "TenancyManagement.RentalMonths"
        ],
        "summary": "Fetch the list of all 'RentalMonths'.",
        "operationId": "RentalMonths_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalMonth"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'RentalMonths' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "TenancyManagement.RentalMonths"
        ],
        "summary": "Create a new 'RentalMonth'.",
        "operationId": "RentalMonths_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'RentalMonth' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RentalMonth"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'RentalMonth' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalMonth"
                }
              }
            }
          },
          "400": {
            "description": "if given 'RentalMonth' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/TenancyManagement/RentalMonths/{guid}": {
      "get": {
        "tags": [
          "TenancyManagement.RentalMonths"
        ],
        "summary": "Fetch a 'RentalMonth' by the global identifier.",
        "operationId": "RentalMonths_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalMonth"
                }
              }
            }
          },
          "404": {
            "description": "'RentalMonth' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TenancyManagement.RentalMonths"
        ],
        "summary": "Delete a 'RentalMonth' by given global identifier",
        "operationId": "RentalMonths_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'RentalMonth' by given identifier was deleted"
          },
          "400": {
            "description": "'RentalMonth' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "TenancyManagement.RentalMonths"
        ],
        "summary": "Update an specified 'RentalMonth' by given global identifier.",
        "operationId": "RentalMonths_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'RentalMonth' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RentalMonth"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'RentalMonth' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalMonth"
                }
              }
            }
          },
          "404": {
            "description": "'RentalMonth' not found!"
          },
          "400": {
            "description": "if 'RentalMonth' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/TenancyManagement/RentalMonths/Count": {
      "get": {
        "tags": [
          "TenancyManagement.RentalMonths"
        ],
        "summary": "Fetch the total count of 'RentalMonths'.",
        "operationId": "RentalMonths_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'RentalMonths' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/PortalOperation/EtaskEntities": {
      "get": {
        "tags": [
          "PortalOperation.EtaskEntities"
        ],
        "summary": "Fetch the list of all 'EtaskEntities'.",
        "operationId": "EtaskEntities_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EtaskEntity"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'EtaskEntities' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "PortalOperation.EtaskEntities"
        ],
        "summary": "Create a new 'EtaskEntity'.",
        "operationId": "EtaskEntities_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'EtaskEntity' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EtaskEntity"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'EtaskEntity' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EtaskEntity"
                }
              }
            }
          },
          "400": {
            "description": "if given 'EtaskEntity' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/PortalOperation/EtaskEntities/{guid}": {
      "get": {
        "tags": [
          "PortalOperation.EtaskEntities"
        ],
        "summary": "Fetch a 'EtaskEntity' by the global identifier.",
        "operationId": "EtaskEntities_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EtaskEntity"
                }
              }
            }
          },
          "404": {
            "description": "'EtaskEntity' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "PortalOperation.EtaskEntities"
        ],
        "summary": "Delete a 'EtaskEntity' by given global identifier",
        "operationId": "EtaskEntities_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'EtaskEntity' by given identifier was deleted"
          },
          "400": {
            "description": "'EtaskEntity' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "PortalOperation.EtaskEntities"
        ],
        "summary": "Update an specified 'EtaskEntity' by given global identifier.",
        "operationId": "EtaskEntities_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'EtaskEntity' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EtaskEntity"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'EtaskEntity' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EtaskEntity"
                }
              }
            }
          },
          "404": {
            "description": "'EtaskEntity' not found!"
          },
          "400": {
            "description": "if 'EtaskEntity' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/PortalOperation/EtaskEntities/Count": {
      "get": {
        "tags": [
          "PortalOperation.EtaskEntities"
        ],
        "summary": "Fetch the total count of 'EtaskEntities'.",
        "operationId": "EtaskEntities_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'EtaskEntities' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/PortalOperation/SystemConfigurations": {
      "get": {
        "tags": [
          "PortalOperation.SystemConfigurations"
        ],
        "summary": "Fetch the list of all 'SystemConfigurations'.",
        "operationId": "SystemConfigurations_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SystemConfiguration"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'SystemConfigurations' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "PortalOperation.SystemConfigurations"
        ],
        "summary": "Create a new 'SystemConfiguration'.",
        "operationId": "SystemConfigurations_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'SystemConfiguration' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SystemConfiguration"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'SystemConfiguration' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemConfiguration"
                }
              }
            }
          },
          "400": {
            "description": "if given 'SystemConfiguration' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/PortalOperation/SystemConfigurations/{guid}": {
      "get": {
        "tags": [
          "PortalOperation.SystemConfigurations"
        ],
        "summary": "Fetch a 'SystemConfiguration' by the global identifier.",
        "operationId": "SystemConfigurations_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemConfiguration"
                }
              }
            }
          },
          "404": {
            "description": "'SystemConfiguration' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "PortalOperation.SystemConfigurations"
        ],
        "summary": "Delete a 'SystemConfiguration' by given global identifier",
        "operationId": "SystemConfigurations_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'SystemConfiguration' by given identifier was deleted"
          },
          "400": {
            "description": "'SystemConfiguration' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "PortalOperation.SystemConfigurations"
        ],
        "summary": "Update an specified 'SystemConfiguration' by given global identifier.",
        "operationId": "SystemConfigurations_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'SystemConfiguration' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SystemConfiguration"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'SystemConfiguration' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemConfiguration"
                }
              }
            }
          },
          "404": {
            "description": "'SystemConfiguration' not found!"
          },
          "400": {
            "description": "if 'SystemConfiguration' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/PortalOperation/SystemConfigurations/Count": {
      "get": {
        "tags": [
          "PortalOperation.SystemConfigurations"
        ],
        "summary": "Fetch the total count of 'SystemConfigurations'.",
        "operationId": "SystemConfigurations_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'SystemConfigurations' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/MeterManagement/AllocationMeterToMeterGroups": {
      "get": {
        "tags": [
          "MeterManagement.AllocationMeterToMeterGroups"
        ],
        "summary": "Fetch the list of all 'AllocationMeterToMeterGroups'.",
        "operationId": "AllocationMeterToMeterGroups_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllocationMeterToMeterGroup"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'AllocationMeterToMeterGroups' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "MeterManagement.AllocationMeterToMeterGroups"
        ],
        "summary": "Create a new 'AllocationMeterToMeterGroup'.",
        "operationId": "AllocationMeterToMeterGroups_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'AllocationMeterToMeterGroup' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AllocationMeterToMeterGroup"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'AllocationMeterToMeterGroup' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllocationMeterToMeterGroup"
                }
              }
            }
          },
          "400": {
            "description": "if given 'AllocationMeterToMeterGroup' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/MeterManagement/AllocationMeterToMeterGroups/{guid}": {
      "get": {
        "tags": [
          "MeterManagement.AllocationMeterToMeterGroups"
        ],
        "summary": "Fetch a 'AllocationMeterToMeterGroup' by the global identifier.",
        "operationId": "AllocationMeterToMeterGroups_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllocationMeterToMeterGroup"
                }
              }
            }
          },
          "404": {
            "description": "'AllocationMeterToMeterGroup' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "MeterManagement.AllocationMeterToMeterGroups"
        ],
        "summary": "Delete a 'AllocationMeterToMeterGroup' by given global identifier",
        "operationId": "AllocationMeterToMeterGroups_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'AllocationMeterToMeterGroup' by given identifier was deleted"
          },
          "400": {
            "description": "'AllocationMeterToMeterGroup' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "MeterManagement.AllocationMeterToMeterGroups"
        ],
        "summary": "Update an specified 'AllocationMeterToMeterGroup' by given global identifier.",
        "operationId": "AllocationMeterToMeterGroups_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'AllocationMeterToMeterGroup' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AllocationMeterToMeterGroup"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'AllocationMeterToMeterGroup' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllocationMeterToMeterGroup"
                }
              }
            }
          },
          "404": {
            "description": "'AllocationMeterToMeterGroup' not found!"
          },
          "400": {
            "description": "if 'AllocationMeterToMeterGroup' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/MeterManagement/AllocationMeterToMeterGroups/Count": {
      "get": {
        "tags": [
          "MeterManagement.AllocationMeterToMeterGroups"
        ],
        "summary": "Fetch the total count of 'AllocationMeterToMeterGroups'.",
        "operationId": "AllocationMeterToMeterGroups_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'AllocationMeterToMeterGroups' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/MeterManagement/AllocationsRoomsToSupplyZones": {
      "get": {
        "tags": [
          "MeterManagement.AllocationsRoomsToSupplyZones"
        ],
        "summary": "Fetch the list of all 'AllocationsRoomsToSupplyZones'.",
        "operationId": "AllocationsRoomsToSupplyZones_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllocationsRoomsToSupplyZone"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'AllocationsRoomsToSupplyZones' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "MeterManagement.AllocationsRoomsToSupplyZones"
        ],
        "summary": "Create a new 'AllocationsRoomsToSupplyZone'.",
        "operationId": "AllocationsRoomsToSupplyZones_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'AllocationsRoomsToSupplyZone' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AllocationsRoomsToSupplyZone"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'AllocationsRoomsToSupplyZone' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllocationsRoomsToSupplyZone"
                }
              }
            }
          },
          "400": {
            "description": "if given 'AllocationsRoomsToSupplyZone' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/MeterManagement/AllocationsRoomsToSupplyZones/{guid}": {
      "get": {
        "tags": [
          "MeterManagement.AllocationsRoomsToSupplyZones"
        ],
        "summary": "Fetch a 'AllocationsRoomsToSupplyZone' by the global identifier.",
        "operationId": "AllocationsRoomsToSupplyZones_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllocationsRoomsToSupplyZone"
                }
              }
            }
          },
          "404": {
            "description": "'AllocationsRoomsToSupplyZone' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "MeterManagement.AllocationsRoomsToSupplyZones"
        ],
        "summary": "Delete a 'AllocationsRoomsToSupplyZone' by given global identifier",
        "operationId": "AllocationsRoomsToSupplyZones_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'AllocationsRoomsToSupplyZone' by given identifier was deleted"
          },
          "400": {
            "description": "'AllocationsRoomsToSupplyZone' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "MeterManagement.AllocationsRoomsToSupplyZones"
        ],
        "summary": "Update an specified 'AllocationsRoomsToSupplyZone' by given global identifier.",
        "operationId": "AllocationsRoomsToSupplyZones_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'AllocationsRoomsToSupplyZone' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AllocationsRoomsToSupplyZone"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'AllocationsRoomsToSupplyZone' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllocationsRoomsToSupplyZone"
                }
              }
            }
          },
          "404": {
            "description": "'AllocationsRoomsToSupplyZone' not found!"
          },
          "400": {
            "description": "if 'AllocationsRoomsToSupplyZone' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/MeterManagement/AllocationsRoomsToSupplyZones/Count": {
      "get": {
        "tags": [
          "MeterManagement.AllocationsRoomsToSupplyZones"
        ],
        "summary": "Fetch the total count of 'AllocationsRoomsToSupplyZones'.",
        "operationId": "AllocationsRoomsToSupplyZones_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'AllocationsRoomsToSupplyZones' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/MeterManagement/AssignmentTechnicalDetailToMeters": {
      "get": {
        "tags": [
          "MeterManagement.AssignmentTechnicalDetailToMeters"
        ],
        "summary": "Fetch the list of all 'AssignmentTechnicalDetailToMeters'.",
        "operationId": "AssignmentTechnicalDetailToMeters_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentTechnicalDetailToMeter"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'AssignmentTechnicalDetailToMeters' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "MeterManagement.AssignmentTechnicalDetailToMeters"
        ],
        "summary": "Create a new 'AssignmentTechnicalDetailToMeter'.",
        "operationId": "AssignmentTechnicalDetailToMeters_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'AssignmentTechnicalDetailToMeter' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AssignmentTechnicalDetailToMeter"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'AssignmentTechnicalDetailToMeter' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentTechnicalDetailToMeter"
                }
              }
            }
          },
          "400": {
            "description": "if given 'AssignmentTechnicalDetailToMeter' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/MeterManagement/AssignmentTechnicalDetailToMeters/{guid}": {
      "get": {
        "tags": [
          "MeterManagement.AssignmentTechnicalDetailToMeters"
        ],
        "summary": "Fetch a 'AssignmentTechnicalDetailToMeter' by the global identifier.",
        "operationId": "AssignmentTechnicalDetailToMeters_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentTechnicalDetailToMeter"
                }
              }
            }
          },
          "404": {
            "description": "'AssignmentTechnicalDetailToMeter' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "MeterManagement.AssignmentTechnicalDetailToMeters"
        ],
        "summary": "Delete a 'AssignmentTechnicalDetailToMeter' by given global identifier",
        "operationId": "AssignmentTechnicalDetailToMeters_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'AssignmentTechnicalDetailToMeter' by given identifier was deleted"
          },
          "400": {
            "description": "'AssignmentTechnicalDetailToMeter' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "MeterManagement.AssignmentTechnicalDetailToMeters"
        ],
        "summary": "Update an specified 'AssignmentTechnicalDetailToMeter' by given global identifier.",
        "operationId": "AssignmentTechnicalDetailToMeters_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'AssignmentTechnicalDetailToMeter' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AssignmentTechnicalDetailToMeter"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'AssignmentTechnicalDetailToMeter' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentTechnicalDetailToMeter"
                }
              }
            }
          },
          "404": {
            "description": "'AssignmentTechnicalDetailToMeter' not found!"
          },
          "400": {
            "description": "if 'AssignmentTechnicalDetailToMeter' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/MeterManagement/AssignmentTechnicalDetailToMeters/Count": {
      "get": {
        "tags": [
          "MeterManagement.AssignmentTechnicalDetailToMeters"
        ],
        "summary": "Fetch the total count of 'AssignmentTechnicalDetailToMeters'.",
        "operationId": "AssignmentTechnicalDetailToMeters_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'AssignmentTechnicalDetailToMeters' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/MeterManagement/MeterHierarchies": {
      "get": {
        "tags": [
          "MeterManagement.MeterHierarchies"
        ],
        "summary": "Fetch the list of all 'MeterHierarchies'.",
        "operationId": "MeterHierarchies_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeterHierarchy"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'MeterHierarchies' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "MeterManagement.MeterHierarchies"
        ],
        "summary": "Create a new 'MeterHierarchy'.",
        "operationId": "MeterHierarchies_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'MeterHierarchy' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/MeterHierarchy"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'MeterHierarchy' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterHierarchy"
                }
              }
            }
          },
          "400": {
            "description": "if given 'MeterHierarchy' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/MeterManagement/MeterHierarchies/{guid}": {
      "get": {
        "tags": [
          "MeterManagement.MeterHierarchies"
        ],
        "summary": "Fetch a 'MeterHierarchy' by the global identifier.",
        "operationId": "MeterHierarchies_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterHierarchy"
                }
              }
            }
          },
          "404": {
            "description": "'MeterHierarchy' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "MeterManagement.MeterHierarchies"
        ],
        "summary": "Delete a 'MeterHierarchy' by given global identifier",
        "operationId": "MeterHierarchies_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'MeterHierarchy' by given identifier was deleted"
          },
          "400": {
            "description": "'MeterHierarchy' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "MeterManagement.MeterHierarchies"
        ],
        "summary": "Update an specified 'MeterHierarchy' by given global identifier.",
        "operationId": "MeterHierarchies_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'MeterHierarchy' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/MeterHierarchy"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'MeterHierarchy' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterHierarchy"
                }
              }
            }
          },
          "404": {
            "description": "'MeterHierarchy' not found!"
          },
          "400": {
            "description": "if 'MeterHierarchy' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/MeterManagement/MeterHierarchies/Count": {
      "get": {
        "tags": [
          "MeterManagement.MeterHierarchies"
        ],
        "summary": "Fetch the total count of 'MeterHierarchies'.",
        "operationId": "MeterHierarchies_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'MeterHierarchies' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/MeterManagement/MeterReadings": {
      "get": {
        "tags": [
          "MeterManagement.MeterReadings"
        ],
        "summary": "Fetch the list of all 'MeterReadings'.",
        "operationId": "MeterReadings_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeterReading"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'MeterReadings' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "MeterManagement.MeterReadings"
        ],
        "summary": "Create a new 'MeterReading'.",
        "operationId": "MeterReadings_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'MeterReading' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/MeterReading"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'MeterReading' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              }
            }
          },
          "400": {
            "description": "if given 'MeterReading' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/MeterManagement/MeterReadings/{guid}": {
      "get": {
        "tags": [
          "MeterManagement.MeterReadings"
        ],
        "summary": "Fetch a 'MeterReading' by the global identifier.",
        "operationId": "MeterReadings_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              }
            }
          },
          "404": {
            "description": "'MeterReading' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "MeterManagement.MeterReadings"
        ],
        "summary": "Delete a 'MeterReading' by given global identifier",
        "operationId": "MeterReadings_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'MeterReading' by given identifier was deleted"
          },
          "400": {
            "description": "'MeterReading' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "MeterManagement.MeterReadings"
        ],
        "summary": "Update an specified 'MeterReading' by given global identifier.",
        "operationId": "MeterReadings_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'MeterReading' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/MeterReading"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'MeterReading' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              }
            }
          },
          "404": {
            "description": "'MeterReading' not found!"
          },
          "400": {
            "description": "if 'MeterReading' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/MeterManagement/MeterReadings/Count": {
      "get": {
        "tags": [
          "MeterManagement.MeterReadings"
        ],
        "summary": "Fetch the total count of 'MeterReadings'.",
        "operationId": "MeterReadings_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'MeterReadings' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/MeterManagement/Meters": {
      "get": {
        "tags": [
          "MeterManagement.Meters"
        ],
        "summary": "Fetch the list of all 'Meters'.",
        "operationId": "Meters_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Meter"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Meters' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "MeterManagement.Meters"
        ],
        "summary": "Create a new 'Meter'.",
        "operationId": "Meters_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Meter' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Meter"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Meter' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meter"
                }
              }
            }
          },
          "400": {
            "description": "if given 'Meter' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/MeterManagement/Meters/{guid}": {
      "get": {
        "tags": [
          "MeterManagement.Meters"
        ],
        "summary": "Fetch a 'Meter' by the global identifier.",
        "operationId": "Meters_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meter"
                }
              }
            }
          },
          "404": {
            "description": "'Meter' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "MeterManagement.Meters"
        ],
        "summary": "Delete a 'Meter' by given global identifier",
        "operationId": "Meters_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'Meter' by given identifier was deleted"
          },
          "400": {
            "description": "'Meter' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "MeterManagement.Meters"
        ],
        "summary": "Update an specified 'Meter' by given global identifier.",
        "operationId": "Meters_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Meter' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Meter"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'Meter' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meter"
                }
              }
            }
          },
          "404": {
            "description": "'Meter' not found!"
          },
          "400": {
            "description": "if 'Meter' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/MeterManagement/Meters/ByCode/{code}": {
      "get": {
        "tags": [
          "MeterManagement.Meters"
        ],
        "summary": "Fetch a single 'Meter' based on its code.",
        "operationId": "Meters_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Meter"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Meters' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/MeterManagement/Meters/Count": {
      "get": {
        "tags": [
          "MeterManagement.Meters"
        ],
        "summary": "Fetch the total count of 'Meters'.",
        "operationId": "Meters_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'Meters' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Bim/BimSoftwares": {
      "get": {
        "tags": [
          "Bim.BimSoftwares"
        ],
        "summary": "Fetch the list of all 'BimSoftwares'.",
        "operationId": "BimSoftwares_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BimSoftware"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'BimSoftwares' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Bim.BimSoftwares"
        ],
        "summary": "Create a new 'BimSoftware'.",
        "operationId": "BimSoftwares_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'BimSoftware' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BimSoftware"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'BimSoftware' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BimSoftware"
                }
              }
            }
          },
          "400": {
            "description": "if given 'BimSoftware' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Bim/BimSoftwares/{guid}": {
      "get": {
        "tags": [
          "Bim.BimSoftwares"
        ],
        "summary": "Fetch a 'BimSoftware' by the global identifier.",
        "operationId": "BimSoftwares_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BimSoftware"
                }
              }
            }
          },
          "404": {
            "description": "'BimSoftware' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Bim.BimSoftwares"
        ],
        "summary": "Delete a 'BimSoftware' by given global identifier",
        "operationId": "BimSoftwares_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'BimSoftware' by given identifier was deleted"
          },
          "400": {
            "description": "'BimSoftware' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Bim.BimSoftwares"
        ],
        "summary": "Update an specified 'BimSoftware' by given global identifier.",
        "operationId": "BimSoftwares_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'BimSoftware' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BimSoftware"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'BimSoftware' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BimSoftware"
                }
              }
            }
          },
          "404": {
            "description": "'BimSoftware' not found!"
          },
          "400": {
            "description": "if 'BimSoftware' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Bim/BimSoftwares/Count": {
      "get": {
        "tags": [
          "Bim.BimSoftwares"
        ],
        "summary": "Fetch the total count of 'BimSoftwares'.",
        "operationId": "BimSoftwares_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'BimSoftwares' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Bim/Models": {
      "get": {
        "tags": [
          "Bim.Models"
        ],
        "summary": "Fetch the list of all 'Models'.",
        "operationId": "Models_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Model"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Models' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Bim.Models"
        ],
        "summary": "Create a new 'Model'.",
        "operationId": "Models_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Model' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Model"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Model' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            }
          },
          "400": {
            "description": "if given 'Model' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Bim/Models/{guid}": {
      "get": {
        "tags": [
          "Bim.Models"
        ],
        "summary": "Fetch a 'Model' by the global identifier.",
        "operationId": "Models_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            }
          },
          "404": {
            "description": "'Model' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Bim.Models"
        ],
        "summary": "Delete a 'Model' by given global identifier",
        "operationId": "Models_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'Model' by given identifier was deleted"
          },
          "400": {
            "description": "'Model' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Bim.Models"
        ],
        "summary": "Update an specified 'Model' by given global identifier.",
        "operationId": "Models_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Model' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Model"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'Model' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            }
          },
          "404": {
            "description": "'Model' not found!"
          },
          "400": {
            "description": "if 'Model' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Bim/Models/ByCode/{code}": {
      "get": {
        "tags": [
          "Bim.Models"
        ],
        "summary": "Fetch a single 'Model' based on its code.",
        "operationId": "Models_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Model"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Models' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Bim/Models/Count": {
      "get": {
        "tags": [
          "Bim.Models"
        ],
        "summary": "Fetch the total count of 'Models'.",
        "operationId": "Models_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'Models' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Ticket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "summary": "Erzeugung eines neuen ServiceTickets",
        "description": "{\"Category\": \"001 BCF-Test\",\"Description\": \"Beschreibung\",\"Building\": \"CGN-AKS2\"}",
        "operationId": "Ticket_PostServiceTicket",
        "requestBody": {
          "x-name": "data",
          "description": "data for creating the service ticket",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/TicketDto"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Das neu erzeugte Ticket",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Ticket/Buildings": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Liste aller im Ticket verwendbaren Gebäude",
        "operationId": "Ticket_GetBuildings",
        "responses": {
          "200": {
            "description": "all buildings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BuildingDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Ticket/Buildings/{code}/Rooms": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Liste aller Räume des durch den Code identifizieren Gebäudes",
        "operationId": "Ticket_GetRoomsInBuilding",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "eindeutiger Gebäude Code",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "all rooms in given building",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoomDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Ticket/Categories": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Liste aller im Ticket verwendbaren Kategorien",
        "operationId": "Ticket_GetCategories",
        "responses": {
          "200": {
            "description": "all categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Ticket/Categories/{code}/SubCategories": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Liste aller Unterkategorieren der durch den Code identifizieren Kategorie",
        "operationId": "Ticket_GetSubcategories",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "eindeutiger Kategorie Code",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "all subcategories for given category",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubCategoryDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/ProjectManagement/TimeRecording/Employee": {
      "get": {
        "tags": [
          "ProjectManagement.TimeRecording"
        ],
        "summary": "Liefert den Mitarbeiterdatensatz des eingeloggten Users",
        "operationId": "TimeRecording_GetEmployee",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeDto"
                }
              }
            }
          },
          "500": {
            "description": "Nicht genauer spezifiziert"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/ProjectManagement/TimeRecording/Timesheet": {
      "get": {
        "tags": [
          "ProjectManagement.TimeRecording"
        ],
        "summary": "Liefert den einen Leistungsnachweise inkl. Stundeneinträge für den heutigen Tag",
        "operationId": "TimeRecording_GetEmployeeTimesheetOfToday",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetDto"
                }
              }
            }
          },
          "404": {
            "description": "Es wurde noch kein Leistungsnachweis für den heutigen Tag gestartet"
          },
          "500": {
            "description": "Nicht genauer spezifiziert"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/ProjectManagement/TimeRecording/Timesheet/WorkDescriptions": {
      "get": {
        "tags": [
          "ProjectManagement.TimeRecording"
        ],
        "summary": "Liefert die Liste der Stundeneinträge des heutigen Leistungsnachweis",
        "operationId": "TimeRecording_GetTimesheetWorkDescriptionsOfDate",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkDescriptionDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Es wurde kein Leistungsnachweis oder keine Stundeneinträge gefunden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          },
          "500": {
            "description": "Nicht genauer spezifiziert",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/ProjectManagement/TimeRecording/Timesheet/StartDay": {
      "put": {
        "tags": [
          "ProjectManagement.TimeRecording"
        ],
        "summary": "Startet einen Leistungsnachweis für den heutigen Tag. Ist ein solcher Leistungsnachweis bereits vorhanden, wird dieser zurückgeben und kein Neuer erstellt.",
        "operationId": "TimeRecording_StartTimesheetOfToday",
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "required": true,
            "description": "Arbeitsort, Klartext (e.g. HomeOffice)",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetDto"
                }
              }
            }
          },
          "500": {
            "description": "Nicht genauer spezifiziert",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/ProjectManagement/TimeRecording/Timesheet/WorkDescription": {
      "post": {
        "tags": [
          "ProjectManagement.TimeRecording"
        ],
        "summary": "Fügt dem heutigen Leistungsnachweis einen Stundeneintrag hinzu",
        "operationId": "TimeRecording_AddTimesheetWorkDescription",
        "requestBody": {
          "x-name": "data",
          "description": "Stundeneintrag",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkDescriptionDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkDescriptionDto"
                }
              }
            }
          },
          "500": {
            "description": "Nicht genauer spezifiziert",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpError"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/ProjectManagement/TimeRecording/InternalOrderNumbers": {
      "get": {
        "tags": [
          "ProjectManagement.TimeRecording"
        ],
        "summary": "Liefert eine Liste aller - der am heutigen Tag verwendbaren - EANs.",
        "operationId": "TimeRecording_GetInternalOrderNumbers",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InternalOrderNumberDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Nicht genauer spezifiziert",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpError"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/ProjectManagement/TimeRecording/PresenceLocations": {
      "get": {
        "tags": [
          "ProjectManagement.TimeRecording"
        ],
        "summary": "Liefert eine Liste aller verwendbaren Arbeitsorte",
        "operationId": "TimeRecording_GetPresenceLocations",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PresenceLocationDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Nicht genauer spezifiziert",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/ProjectManagement/TimeRecording/Accessibility": {
      "get": {
        "tags": [
          "ProjectManagement.TimeRecording"
        ],
        "summary": "Liefert Erreichbarkeitsübersicht für Mitarbeiter",
        "operationId": "TimeRecording_GetEmployeeAccessibility",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "required": true,
            "description": "Datum",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeAccessibilityDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Nicht genauer spezifiziert",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/Common/Sites": {
      "get": {
        "tags": [
          "Hseq.Common"
        ],
        "summary": "Get a list of all sites that have at minimum one HSEQ function attached",
        "operationId": "Hseq_GetAllSites",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "a list of all sites that have at minimum one HSEQ function attached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Site"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Sites not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/Common/Sites/{guid}/Buildings": {
      "get": {
        "tags": [
          "Hseq.Common"
        ],
        "summary": "Get a list of all sites that have at minimum one HSEQ function attached",
        "operationId": "Hseq_GetBuildingsforSitesByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of buildings that have at minimum one HSEQ function attached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Building"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Buildings not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/Common/Sites/{guid}/BuildingsCount": {
      "get": {
        "tags": [
          "Hseq.Common"
        ],
        "summary": "Get a number of buildings in site that have at minimum one HSEQ function attached",
        "operationId": "Hseq_GetSiteBuildingsCount",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns count of buildings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "Site not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/Common/Sites/Count": {
      "get": {
        "tags": [
          "Hseq.Common"
        ],
        "summary": "Get a number of sites that have at minimum one HSEQ function attached",
        "operationId": "Hseq_GetSitesCount",
        "responses": {
          "200": {
            "description": "returns count of sites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "Sites not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/Common/Buildings": {
      "get": {
        "tags": [
          "Hseq.Common"
        ],
        "summary": "Get a list of all buildings that have at minimum one HSEQ function attached",
        "operationId": "Hseq_GetAllBuildings",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "a list of all buildings that have at minimum one HSEQ function attached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Building"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Buildings not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/Common/Buildings/{code}": {
      "get": {
        "tags": [
          "Hseq.Common"
        ],
        "summary": "Get a list of all buildings that have at minimum one HSEQ function attached",
        "operationId": "Hseq_SearchBuildings",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "a list of all buildings that have at minimum one HSEQ function attached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Building"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Buildings not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/Common/Sites/{code}": {
      "get": {
        "tags": [
          "Hseq.Common"
        ],
        "summary": "Get a list of all sites that have at minimum one HSEQ function attached",
        "operationId": "Hseq_SearchSites",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "a list of all Sites that have at minimum one HSEQ function attached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Site"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Sites not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/Common/Building/{guid}/Persons": {
      "get": {
        "tags": [
          "Hseq.Common"
        ],
        "summary": "Get a list of personnel with HseqFunctions for the Building",
        "operationId": "Hseq_GetAllPersons",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "building id that have at minimum one HSEQ function attached.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "a list of personnel with HseqFunctions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllocationPersonnelToHseqFunction"
                  }
                }
              }
            }
          },
          "404": {
            "description": "personnel not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/HseqFunctions": {
      "get": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "summary": "Fetch the list of all 'HseqFunctions'.",
        "operationId": "HseqFunctions_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HseqFunction"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'HseqFunctions' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "summary": "Create a new 'HseqFunction'.",
        "operationId": "HseqFunctions_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'HseqFunction' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/HseqFunction"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'HseqFunction' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HseqFunction"
                }
              }
            }
          },
          "400": {
            "description": "if given 'HseqFunction' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/HseqFunctions/{guid}": {
      "get": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "summary": "Fetch a 'HseqFunction' by the global identifier.",
        "operationId": "HseqFunctions_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HseqFunction"
                }
              }
            }
          },
          "404": {
            "description": "'HseqFunction' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "summary": "Delete a 'HseqFunction' by given global identifier",
        "operationId": "HseqFunctions_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'HseqFunction' by given identifier was deleted"
          },
          "400": {
            "description": "'HseqFunction' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "summary": "Update an specified 'HseqFunction' by given global identifier.",
        "operationId": "HseqFunctions_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'HseqFunction' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/HseqFunction"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'HseqFunction' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HseqFunction"
                }
              }
            }
          },
          "404": {
            "description": "'HseqFunction' not found!"
          },
          "400": {
            "description": "if 'HseqFunction' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/HseqFunctions/ByCode/{code}": {
      "get": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "summary": "Fetch a single 'HseqFunction' based on its code.",
        "operationId": "HseqFunctions_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HseqFunction"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'HseqFunctions' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/HseqFunctions/Count": {
      "get": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "summary": "Fetch the total count of 'HseqFunctions'.",
        "operationId": "HseqFunctions_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'HseqFunctions' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/HseqFunctions/CommissionerBuilding": {
      "get": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "operationId": "HseqFunctions_GetCommissionerBuilding",
        "parameters": [
          {
            "name": "buildingGlobalUid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomDataTable"
                }
              }
            }
          },
          "404": {
            "description": "no 'HseqFunctions' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/HseqFunctions/CommissionerBuildingRecords": {
      "get": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "operationId": "HseqFunctions_GetCommissionerBuildingRecords",
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomRow"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'HseqFunctions' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/HseqFunctions/EmailAdresses": {
      "get": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "operationId": "HseqFunctions_GetEmailAdresses",
        "parameters": [
          {
            "name": "buildingGlobalUid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'HseqFunctions' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Token": {
      "get": {
        "tags": [
          "Core.Login"
        ],
        "summary": "Access token - This resource retrieves the EtaskApiToken based on basic authentication.",
        "operationId": "Login_GetToken",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "en",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "EtaskApiToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "401": {
            "description": "Invalid user or password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/Core/RenewAccessToken": {
      "get": {
        "tags": [
          "Core.Login"
        ],
        "summary": "Get new access token - This resource is used by clients to exchange a refresh token for an access token when the access token has expired\n ",
        "operationId": "Login_GetNewAccessToken",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "New access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "401": {
            "description": "Refresh token invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Logout": {
      "get": {
        "tags": [
          "Core.Login"
        ],
        "summary": "Logout from the eTASK Universal BIM API.\n ",
        "operationId": "Login_Logout",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "User logged out successfully"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Applications": {
      "get": {
        "tags": [
          "Core.Applications"
        ],
        "summary": "Fetch the list of all 'Applications'.",
        "operationId": "Applications_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Application"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Applications' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Core.Applications"
        ],
        "summary": "Create a new 'Application'.",
        "operationId": "Applications_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Application' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Application"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Application' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "400": {
            "description": "if given 'Application' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Applications/{guid}": {
      "get": {
        "tags": [
          "Core.Applications"
        ],
        "summary": "Fetch a 'Application' by the global identifier.",
        "operationId": "Applications_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "404": {
            "description": "'Application' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.Applications"
        ],
        "summary": "Delete a 'Application' by given global identifier",
        "operationId": "Applications_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'Application' by given identifier was deleted"
          },
          "400": {
            "description": "'Application' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Core.Applications"
        ],
        "summary": "Update an specified 'Application' by given global identifier.",
        "operationId": "Applications_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Application' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Application"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'Application' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "404": {
            "description": "'Application' not found!"
          },
          "400": {
            "description": "if 'Application' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Applications/ByCode/{code}": {
      "get": {
        "tags": [
          "Core.Applications"
        ],
        "summary": "Fetch a single 'Application' based on its code.",
        "operationId": "Applications_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Application"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Applications' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Applications/Count": {
      "get": {
        "tags": [
          "Core.Applications"
        ],
        "summary": "Fetch the total count of 'Applications'.",
        "operationId": "Applications_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'Applications' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Buildings": {
      "get": {
        "tags": [
          "Core.Buildings"
        ],
        "summary": "Fetch the list of all 'Buildings'.",
        "operationId": "Buildings_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Building"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Buildings' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Core.Buildings"
        ],
        "summary": "Create a new 'Building'.",
        "operationId": "Buildings_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Building' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Building"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Building' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Building"
                }
              }
            }
          },
          "400": {
            "description": "if given 'Building' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Buildings/{guid}": {
      "get": {
        "tags": [
          "Core.Buildings"
        ],
        "summary": "Fetch a 'Building' by the global identifier.",
        "operationId": "Buildings_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Building"
                }
              }
            }
          },
          "404": {
            "description": "'Building' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.Buildings"
        ],
        "summary": "Delete a 'Building' by given global identifier",
        "operationId": "Buildings_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'Building' by given identifier was deleted"
          },
          "400": {
            "description": "'Building' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Core.Buildings"
        ],
        "summary": "Update an specified 'Building' by given global identifier.",
        "operationId": "Buildings_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Building' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Building"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'Building' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Building"
                }
              }
            }
          },
          "404": {
            "description": "'Building' not found!"
          },
          "400": {
            "description": "if 'Building' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Buildings/ByCode/{code}": {
      "get": {
        "tags": [
          "Core.Buildings"
        ],
        "summary": "Fetch a single 'Building' based on its code.",
        "operationId": "Buildings_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Building"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Buildings' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Buildings/Count": {
      "get": {
        "tags": [
          "Core.Buildings"
        ],
        "summary": "Fetch the total count of 'Buildings'.",
        "operationId": "Buildings_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'Buildings' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Buildings/{guid}/Download/{filename}": {
      "get": {
        "tags": [
          "Core.Buildings"
        ],
        "operationId": "Buildings_Download",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "item or file not found"
          },
          "200": {
            "description": "returns one file specified filename of an item specified by guid",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Buildings/{guid}/Documents": {
      "get": {
        "tags": [
          "Core.Buildings"
        ],
        "operationId": "Buildings_Documents",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns all documents (without content) of an item specified by guid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Buildings/{guid}/Image": {
      "get": {
        "tags": [
          "Core.Buildings"
        ],
        "summary": "Get a picture of building",
        "operationId": "Buildings_GetImage",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "size",
            "in": "query",
            "required": true,
            "description": "Image size: 0-Original, 1-Medium, 2-Small.",
            "schema": {
              "$ref": "#/components/schemas/ImageSize"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns the image of an eTASK.Building specified by guid",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "building not found"
          },
          "400": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Building/{guid}/Export/IfcArc": {
      "get": {
        "tags": [
          "Core.Buildings"
        ],
        "operationId": "Buildings_IfcArc",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns the arc model as IFC file with geometry data by guid",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "building not found"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Building/{guid}/Export/CafmConnect": {
      "get": {
        "tags": [
          "Core.Buildings"
        ],
        "operationId": "Buildings_IfcExport",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "singleFile",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "nullable": false
          },
          {
            "name": "facilities",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "nullable": false
          },
          {
            "name": "facilityDocuments",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "nullable": false
          },
          {
            "name": "spatialStructureDocuments",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "returns the CafmConnect file of an eTASK.Building specified by guid",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "building not found"
          },
          "400": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CompanyAddresses": {
      "get": {
        "tags": [
          "Core.CompanyAddresses"
        ],
        "summary": "Fetch the list of all 'CompanyAddresses'.",
        "operationId": "CompanyAddresses_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'CompanyAddresses' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Core.CompanyAddresses"
        ],
        "summary": "Create a new 'CompanyAddress'.",
        "operationId": "CompanyAddresses_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'CompanyAddress' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'CompanyAddress' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyAddress"
                }
              }
            }
          },
          "400": {
            "description": "if given 'CompanyAddress' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CompanyAddresses/{guid}": {
      "get": {
        "tags": [
          "Core.CompanyAddresses"
        ],
        "summary": "Fetch a 'CompanyAddress' by the global identifier.",
        "operationId": "CompanyAddresses_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyAddress"
                }
              }
            }
          },
          "404": {
            "description": "'CompanyAddress' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.CompanyAddresses"
        ],
        "summary": "Delete a 'CompanyAddress' by given global identifier",
        "operationId": "CompanyAddresses_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'CompanyAddress' by given identifier was deleted"
          },
          "400": {
            "description": "'CompanyAddress' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Core.CompanyAddresses"
        ],
        "summary": "Update an specified 'CompanyAddress' by given global identifier.",
        "operationId": "CompanyAddresses_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'CompanyAddress' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'CompanyAddress' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyAddress"
                }
              }
            }
          },
          "404": {
            "description": "'CompanyAddress' not found!"
          },
          "400": {
            "description": "if 'CompanyAddress' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CompanyAddresses/ByCode/{code}": {
      "get": {
        "tags": [
          "Core.CompanyAddresses"
        ],
        "summary": "Fetch a single 'CompanyAddress' based on its code.",
        "operationId": "CompanyAddresses_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'CompanyAddresses' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CompanyAddresses/Count": {
      "get": {
        "tags": [
          "Core.CompanyAddresses"
        ],
        "summary": "Fetch the total count of 'CompanyAddresses'.",
        "operationId": "CompanyAddresses_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'CompanyAddresses' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CompanyAddresses/{guid}/Download/{filename}": {
      "get": {
        "tags": [
          "Core.CompanyAddresses"
        ],
        "operationId": "CompanyAddresses_Download",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "item or file not found"
          },
          "200": {
            "description": "returns one file specified filename of an item specified by guid",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CompanyAddresses/{guid}/Documents": {
      "get": {
        "tags": [
          "Core.CompanyAddresses"
        ],
        "operationId": "CompanyAddresses_Documents",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns all documents (without content) of an item specified by guid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CostCenters": {
      "get": {
        "tags": [
          "Core.CostCenters"
        ],
        "summary": "Fetch the list of all 'CostCenters'.",
        "operationId": "CostCenters_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'CostCenters' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Core.CostCenters"
        ],
        "summary": "Create a new 'CostCenter'.",
        "operationId": "CostCenters_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'CostCenter' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'CostCenter' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostCenter"
                }
              }
            }
          },
          "400": {
            "description": "if given 'CostCenter' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CostCenters/{guid}": {
      "get": {
        "tags": [
          "Core.CostCenters"
        ],
        "summary": "Fetch a 'CostCenter' by the global identifier.",
        "operationId": "CostCenters_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostCenter"
                }
              }
            }
          },
          "404": {
            "description": "'CostCenter' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.CostCenters"
        ],
        "summary": "Delete a 'CostCenter' by given global identifier",
        "operationId": "CostCenters_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'CostCenter' by given identifier was deleted"
          },
          "400": {
            "description": "'CostCenter' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Core.CostCenters"
        ],
        "summary": "Update an specified 'CostCenter' by given global identifier.",
        "operationId": "CostCenters_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'CostCenter' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'CostCenter' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostCenter"
                }
              }
            }
          },
          "404": {
            "description": "'CostCenter' not found!"
          },
          "400": {
            "description": "if 'CostCenter' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CostCenters/ByCode/{code}": {
      "get": {
        "tags": [
          "Core.CostCenters"
        ],
        "summary": "Fetch a single 'CostCenter' based on its code.",
        "operationId": "CostCenters_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'CostCenters' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CostCenters/Count": {
      "get": {
        "tags": [
          "Core.CostCenters"
        ],
        "summary": "Fetch the total count of 'CostCenters'.",
        "operationId": "CostCenters_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'CostCenters' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Din277UsageTypes": {
      "get": {
        "tags": [
          "Core.Din277UsageTypes"
        ],
        "summary": "Fetch the list of all 'Din277UsageTypes'.",
        "operationId": "Din277UsageTypes_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Din277UsageType"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Din277UsageTypes' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Core.Din277UsageTypes"
        ],
        "summary": "Create a new 'Din277UsageType'.",
        "operationId": "Din277UsageTypes_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Din277UsageType' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Din277UsageType"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Din277UsageType' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Din277UsageType"
                }
              }
            }
          },
          "400": {
            "description": "if given 'Din277UsageType' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Din277UsageTypes/{guid}": {
      "get": {
        "tags": [
          "Core.Din277UsageTypes"
        ],
        "summary": "Fetch a 'Din277UsageType' by the global identifier.",
        "operationId": "Din277UsageTypes_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Din277UsageType"
                }
              }
            }
          },
          "404": {
            "description": "'Din277UsageType' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.Din277UsageTypes"
        ],
        "summary": "Delete a 'Din277UsageType' by given global identifier",
        "operationId": "Din277UsageTypes_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'Din277UsageType' by given identifier was deleted"
          },
          "400": {
            "description": "'Din277UsageType' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Core.Din277UsageTypes"
        ],
        "summary": "Update an specified 'Din277UsageType' by given global identifier.",
        "operationId": "Din277UsageTypes_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Din277UsageType' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Din277UsageType"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'Din277UsageType' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Din277UsageType"
                }
              }
            }
          },
          "404": {
            "description": "'Din277UsageType' not found!"
          },
          "400": {
            "description": "if 'Din277UsageType' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Din277UsageTypes/ByCode/{code}": {
      "get": {
        "tags": [
          "Core.Din277UsageTypes"
        ],
        "summary": "Fetch a single 'Din277UsageType' based on its code.",
        "operationId": "Din277UsageTypes_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Din277UsageType"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Din277UsageTypes' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Din277UsageTypes/Count": {
      "get": {
        "tags": [
          "Core.Din277UsageTypes"
        ],
        "summary": "Fetch the total count of 'Din277UsageTypes'.",
        "operationId": "Din277UsageTypes_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'Din277UsageTypes' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Floors": {
      "get": {
        "tags": [
          "Core.Floors"
        ],
        "summary": "Fetch the list of all 'Floors'.",
        "operationId": "Floors_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Floor"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Floors' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Core.Floors"
        ],
        "summary": "Create a new 'Floor'.",
        "operationId": "Floors_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Floor' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Floor"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Floor' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Floor"
                }
              }
            }
          },
          "400": {
            "description": "if given 'Floor' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Floors/{guid}": {
      "get": {
        "tags": [
          "Core.Floors"
        ],
        "summary": "Fetch a 'Floor' by the global identifier.",
        "operationId": "Floors_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Floor"
                }
              }
            }
          },
          "404": {
            "description": "'Floor' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.Floors"
        ],
        "summary": "Delete a 'Floor' by given global identifier",
        "operationId": "Floors_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'Floor' by given identifier was deleted"
          },
          "400": {
            "description": "'Floor' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Core.Floors"
        ],
        "summary": "Update an specified 'Floor' by given global identifier.",
        "operationId": "Floors_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Floor' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Floor"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'Floor' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Floor"
                }
              }
            }
          },
          "404": {
            "description": "'Floor' not found!"
          },
          "400": {
            "description": "if 'Floor' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Floors/ByCode/{code}": {
      "get": {
        "tags": [
          "Core.Floors"
        ],
        "summary": "Fetch a single 'Floor' based on its code.",
        "operationId": "Floors_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Floor"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Floors' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Floors/Count": {
      "get": {
        "tags": [
          "Core.Floors"
        ],
        "summary": "Fetch the total count of 'Floors'.",
        "operationId": "Floors_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'Floors' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Floors/{guid}/Download/{filename}": {
      "get": {
        "tags": [
          "Core.Floors"
        ],
        "operationId": "Floors_Download",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "item or file not found"
          },
          "200": {
            "description": "returns one file specified filename of an item specified by guid",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Floors/{guid}/Documents": {
      "get": {
        "tags": [
          "Core.Floors"
        ],
        "operationId": "Floors_Documents",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns all documents (without content) of an item specified by guid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/LanguageTables": {
      "get": {
        "tags": [
          "Core.LanguageTables"
        ],
        "summary": "Fetch the list of all 'LanguageTables'.",
        "operationId": "LanguageTables_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LanguageTable"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'LanguageTables' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Core.LanguageTables"
        ],
        "summary": "Create a new 'LanguageTable'.",
        "operationId": "LanguageTables_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'LanguageTable' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/LanguageTable"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'LanguageTable' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LanguageTable"
                }
              }
            }
          },
          "400": {
            "description": "if given 'LanguageTable' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/LanguageTables/{guid}": {
      "get": {
        "tags": [
          "Core.LanguageTables"
        ],
        "summary": "Fetch a 'LanguageTable' by the global identifier.",
        "operationId": "LanguageTables_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LanguageTable"
                }
              }
            }
          },
          "404": {
            "description": "'LanguageTable' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.LanguageTables"
        ],
        "summary": "Delete a 'LanguageTable' by given global identifier",
        "operationId": "LanguageTables_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'LanguageTable' by given identifier was deleted"
          },
          "400": {
            "description": "'LanguageTable' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Core.LanguageTables"
        ],
        "summary": "Update an specified 'LanguageTable' by given global identifier.",
        "operationId": "LanguageTables_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'LanguageTable' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/LanguageTable"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'LanguageTable' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LanguageTable"
                }
              }
            }
          },
          "404": {
            "description": "'LanguageTable' not found!"
          },
          "400": {
            "description": "if 'LanguageTable' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/LanguageTables/ByCode/{code}": {
      "get": {
        "tags": [
          "Core.LanguageTables"
        ],
        "summary": "Fetch a single 'LanguageTable' based on its code.",
        "operationId": "LanguageTables_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LanguageTable"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'LanguageTables' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/LanguageTables/Count": {
      "get": {
        "tags": [
          "Core.LanguageTables"
        ],
        "summary": "Fetch the total count of 'LanguageTables'.",
        "operationId": "LanguageTables_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'LanguageTables' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Persons": {
      "get": {
        "tags": [
          "Core.Persons"
        ],
        "summary": "Fetch the list of all 'Persons'.",
        "operationId": "Persons_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Person"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Persons' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Core.Persons"
        ],
        "summary": "Create a new 'Person'.",
        "operationId": "Persons_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Person' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Person' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "400": {
            "description": "if given 'Person' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Persons/{guid}": {
      "get": {
        "tags": [
          "Core.Persons"
        ],
        "summary": "Fetch a 'Person' by the global identifier.",
        "operationId": "Persons_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "404": {
            "description": "'Person' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.Persons"
        ],
        "summary": "Delete a 'Person' by given global identifier",
        "operationId": "Persons_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'Person' by given identifier was deleted"
          },
          "400": {
            "description": "'Person' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Core.Persons"
        ],
        "summary": "Update an specified 'Person' by given global identifier.",
        "operationId": "Persons_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Person' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'Person' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "404": {
            "description": "'Person' not found!"
          },
          "400": {
            "description": "if 'Person' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Persons/Count": {
      "get": {
        "tags": [
          "Core.Persons"
        ],
        "summary": "Fetch the total count of 'Persons'.",
        "operationId": "Persons_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'Persons' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Persons/ByEmail/{email}": {
      "get": {
        "tags": [
          "Core.Persons"
        ],
        "summary": "Get list of persons by email",
        "operationId": "Persons_GetByEmail",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "description": "Email of the person(s) in the format email@example.de",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of related objects, that shall be returned additionally",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of persons specified by requested email address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Person"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No person exists with such an eMail addresss"
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Persons/ByLogin/{login}": {
      "get": {
        "tags": [
          "Core.Persons"
        ],
        "summary": "Get user by loginname",
        "operationId": "Persons_GetByLoginName",
        "parameters": [
          {
            "name": "login",
            "in": "path",
            "required": true,
            "description": "The login.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of related objects, that shall be returned additionally",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a persons specified by requested LoginName",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "404": {
            "description": "Person does not exist"
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Persons/ChangePassword/{guid}": {
      "put": {
        "tags": [
          "Core.Persons"
        ],
        "summary": "Change password of the specified 'Person' by given identifier.",
        "operationId": "Persons_ChangePassword",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "The global identifier of the person.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "newPassword",
            "in": "query",
            "required": true,
            "description": "New password.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "oldPassword",
            "in": "query",
            "description": "Old password.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Password changed"
          },
          "404": {
            "description": "Person not found!"
          },
          "400": {
            "description": "Old password invalid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Rooms": {
      "get": {
        "tags": [
          "Core.Rooms"
        ],
        "summary": "Fetch the list of all 'Rooms'.",
        "operationId": "Rooms_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Room"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Rooms' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Core.Rooms"
        ],
        "summary": "Create a new 'Room'.",
        "operationId": "Rooms_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Room' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Room"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Room' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          },
          "400": {
            "description": "if given 'Room' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Rooms/{guid}": {
      "get": {
        "tags": [
          "Core.Rooms"
        ],
        "summary": "Fetch a 'Room' by the global identifier.",
        "operationId": "Rooms_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          },
          "404": {
            "description": "'Room' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.Rooms"
        ],
        "summary": "Delete a 'Room' by given global identifier",
        "operationId": "Rooms_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'Room' by given identifier was deleted"
          },
          "400": {
            "description": "'Room' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Core.Rooms"
        ],
        "summary": "Update an specified 'Room' by given global identifier.",
        "operationId": "Rooms_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Room' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Room"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'Room' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          },
          "404": {
            "description": "'Room' not found!"
          },
          "400": {
            "description": "if 'Room' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Rooms/ByCode/{code}": {
      "get": {
        "tags": [
          "Core.Rooms"
        ],
        "summary": "Fetch a single 'Room' based on its code.",
        "operationId": "Rooms_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Room"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Rooms' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Rooms/Count": {
      "get": {
        "tags": [
          "Core.Rooms"
        ],
        "summary": "Fetch the total count of 'Rooms'.",
        "operationId": "Rooms_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'Rooms' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Rooms/{guid}/Download/{filename}": {
      "get": {
        "tags": [
          "Core.Rooms"
        ],
        "operationId": "Rooms_Download",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "item or file not found"
          },
          "200": {
            "description": "returns one file specified filename of an item specified by guid",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Rooms/{guid}/Documents": {
      "get": {
        "tags": [
          "Core.Rooms"
        ],
        "operationId": "Rooms_Documents",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns all documents (without content) of an item specified by guid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Sites": {
      "get": {
        "tags": [
          "Core.Sites"
        ],
        "summary": "Fetch the list of all 'Sites'.",
        "operationId": "Sites_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Site"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Sites' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Core.Sites"
        ],
        "summary": "Create a new 'Site'.",
        "operationId": "Sites_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Site' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Site"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Site' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          },
          "400": {
            "description": "if given 'Site' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Sites/{guid}": {
      "get": {
        "tags": [
          "Core.Sites"
        ],
        "summary": "Fetch a 'Site' by the global identifier.",
        "operationId": "Sites_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          },
          "404": {
            "description": "'Site' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.Sites"
        ],
        "summary": "Delete a 'Site' by given global identifier",
        "operationId": "Sites_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'Site' by given identifier was deleted"
          },
          "400": {
            "description": "'Site' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Core.Sites"
        ],
        "summary": "Update an specified 'Site' by given global identifier.",
        "operationId": "Sites_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Site' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Site"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'Site' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          },
          "404": {
            "description": "'Site' not found!"
          },
          "400": {
            "description": "if 'Site' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Sites/ByCode/{code}": {
      "get": {
        "tags": [
          "Core.Sites"
        ],
        "summary": "Fetch a single 'Site' based on its code.",
        "operationId": "Sites_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Site"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Sites' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Sites/Count": {
      "get": {
        "tags": [
          "Core.Sites"
        ],
        "summary": "Fetch the total count of 'Sites'.",
        "operationId": "Sites_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'Sites' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Sites/{guid}/Download/{filename}": {
      "get": {
        "tags": [
          "Core.Sites"
        ],
        "operationId": "Sites_Download",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "item or file not found"
          },
          "200": {
            "description": "returns one file specified filename of an item specified by guid",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Sites/{guid}/Documents": {
      "get": {
        "tags": [
          "Core.Sites"
        ],
        "operationId": "Sites_Documents",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns all documents (without content) of an item specified by guid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AllocationPersonnelToHseqFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AllocationPersonnelToHseqFunctionBase"
          },
          {
            "type": "object",
            "description": "Here you assign employees to the HSE function they perform. This enables you to\nassign the employee in participant scheduling to a course in the area of the\nexisting HSE function. If the HSE function is a basic function, all employees\ncan participate in a training course in their area. An additional assignment of\nemployees to the basic function is therefore not necessary, but may be useful\nfor organizational purposes, since the employees actually hold the HSE function\nduring the assignment.",
            "additionalProperties": false,
            "properties": {
              "Documents": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "Annotations": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Annotations"
                  }
                ]
              }
            }
          }
        ]
      },
      "Document": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Guid": {
            "type": "string",
            "format": "guid"
          },
          "ContentType": {
            "type": "string",
            "nullable": true
          },
          "Filename": {
            "type": "string",
            "nullable": true
          },
          "Filesize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "Annotations": {
        "allOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Annotation"
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "SelectColumns": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "Annotation": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserEmail": {
            "type": "string",
            "nullable": true
          },
          "Text": {
            "type": "string",
            "nullable": true
          },
          "Subject": {
            "type": "string",
            "nullable": true
          },
          "Recipients": {
            "type": "string",
            "nullable": true
          },
          "CcRecipients": {
            "type": "string",
            "nullable": true
          },
          "SystemInfo": {
            "type": "boolean"
          },
          "Guid": {
            "type": "string",
            "format": "guid"
          },
          "IsValid": {
            "type": "boolean"
          },
          "IsNew": {
            "type": "boolean"
          },
          "IsLoaded": {
            "type": "boolean"
          }
        }
      },
      "AllocationPersonnelToHseqFunctionBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "HseqFunction",
              "Person",
              "InEmergencyCalllist",
              "Visible"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "HseqFunction": {
                "description": "HSE Function",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/HseqFunction"
                  }
                ]
              },
              "Person": {
                "description": "Staff Member",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "InEmergencyCalllist": {
                "type": "boolean",
                "description": "Specify here whether this person is published in the emergency call list."
              },
              "Visible": {
                "type": "boolean",
                "description": "visible?"
              },
              "AppointmentSince": {
                "type": "string",
                "description": "Specify the date of the official appointment of the Commissioner.",
                "format": "date-time",
                "nullable": true
              },
              "DispatchOfAguformtoworkscouncilon": {
                "type": "string",
                "description": "Enter the date on which the \"Registration and deregistration form for\nrepresentatives for occupational safety, health and environmental protection\"\n(AGU) was sent to the works council.",
                "format": "date-time",
                "nullable": true
              },
              "LoggedOutOn": {
                "type": "string",
                "description": "Specify the date from which the representative is no longer appointed to the HSE\nfunction.",
                "format": "date-time",
                "nullable": true
              },
              "MarkedOn": {
                "type": "string",
                "description": "Enter the date from which the person responsible for the HSE function is\nflagged.",
                "format": "date-time",
                "nullable": true
              },
              "ReceiptOfAguformfromworkscouncilon": {
                "type": "string",
                "description": "Enter the date on which the \"Registration and deregistration form for\nrepresentatives for occupational safety, health and environmental protection\"\n(AGU) completed by the works council is available.",
                "format": "date-time",
                "nullable": true
              },
              "RequirementsForHsefunctionfulfilledsince": {
                "type": "string",
                "description": "Specify here the date from which the agent fulfills all requirements for the HSE\nfunction.",
                "format": "date-time",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "HseqFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HseqFunctionBase"
          },
          {
            "type": "object",
            "description": "Use this form to create HSE functions or responsibilities (for example, \"first\nresponder\" or \"waste manager\") and assign employees to these functions. You can\nalso specify the intervals for the training courses based on the existing HSE\nfunction and define the HSE function as the basic function. The training courses\nbelonging to the function are listed in the lower part of the form.",
            "additionalProperties": false,
            "properties": {
              "Images": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            }
          }
        ]
      },
      "Image": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Guid": {
            "type": "string",
            "format": "guid"
          },
          "ContentType": {
            "type": "string",
            "nullable": true
          },
          "Filename": {
            "type": "string",
            "nullable": true
          },
          "ContentOriginal": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "ContentSmall": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "ContentMedium": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        }
      },
      "HseqFunctionBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "BasicHseFunction",
              "DisplayInFloorplan",
              "LegalObligationToReport"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Person": {
                "description": "Coordinator",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "BasicHseFunction": {
                "type": "boolean",
                "description": "Basic HSE Function"
              },
              "DisplayInFloorplan": {
                "type": "boolean",
                "description": "Specifies whether the HSE function is to be displayed in the floor plan."
              },
              "LegalObligationToReport": {
                "type": "boolean",
                "description": "Legal Obligation to Report"
              },
              "BasicTrainingIntervalmonths": {
                "type": "integer",
                "description": "Basic Training Interval [Months]",
                "format": "int32",
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "Code",
                "maxLength": 50,
                "nullable": true
              },
              "Description": {
                "type": "string",
                "description": "Enter a detailed description of the HSE function.",
                "nullable": true
              },
              "FollowUpTrainingIntervalMonths": {
                "type": "integer",
                "description": "Follow-Up Training Interval [Months]",
                "format": "int32",
                "nullable": true
              },
              "LegalFoundationForOrder": {
                "type": "string",
                "description": "Legal Foundation for Order",
                "maxLength": 50,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Name",
                "maxLength": 50,
                "nullable": true
              },
              "NotificationInterval": {
                "type": "integer",
                "description": "Notification Interval",
                "format": "int32",
                "nullable": true
              },
              "Remark": {
                "type": "string",
                "description": "Remark",
                "maxLength": 200,
                "nullable": true
              },
              "ReminderLeadTimeMonths": {
                "type": "integer",
                "description": "Specify the lead time for a reminder for the next follow-up training in months.",
                "format": "int32",
                "nullable": true
              },
              "RequiredQualification": {
                "type": "string",
                "description": "Required Qualification",
                "maxLength": 50,
                "nullable": true
              },
              "SortingInFloorPlan": {
                "type": "integer",
                "description": "Enter the position at which the HSE function is to be displayed in the floor\nplan.",
                "format": "int32",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Person": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PersonBase"
          },
          {
            "type": "object",
            "description": "Use this form to create employee records to keep track of your staff. You can\nthen select the persons entered here in various forms in the FM portal to assign\ntasks to them, for example. Enter data to identify the employee and his or her\ncontact data. Assign the employee to the room in which he or she works. Manage\nthe employee's access data and rights within the FM portal. Assign the inventory\nto the employee that he or she uses and that is displayed on his or her\npersonalized start page. When using eTASK. key management, the keys handed out\nto the employee are displayed. When using eTASK. employee examinations, the\ncompany medical examinations in which the employee participated are listed.",
            "additionalProperties": false,
            "properties": {
              "Images": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Image"
                }
              },
              "Employee": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Employee"
                  }
                ]
              }
            }
          }
        ]
      },
      "Employee": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EmployeeBase"
          },
          {
            "type": "object",
            "description": "Create data records for the employees in your company so that you can manage\nthem within project management. Enter the personal data and the bank details for\npayroll. Write down information on working hours and the employee's leave times.",
            "additionalProperties": false,
            "properties": {
              "WorkingTimeAccount": {
                "description": "Gets or sets the working time account.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WorkingTimeAccount"
                  }
                ]
              }
            }
          }
        ]
      },
      "WorkingTimeAccount": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Workplace": {
            "type": "string",
            "description": "Gets or sets the workplace of the projectstaff",
            "nullable": true
          },
          "TotalTargetHours": {
            "type": "number",
            "description": "Gets or sets the total target hours.",
            "format": "double"
          },
          "TotalWorkedHours": {
            "type": "number",
            "description": "Gets or sets the total worked hours.",
            "format": "double"
          },
          "TotalHoursDifference": {
            "type": "number",
            "description": "Gets difference TotalTargetHours - TotalWorkedHours",
            "format": "double"
          },
          "OvertimeHours": {
            "type": "number",
            "description": "Gets or sets the overtime hours.",
            "format": "double"
          },
          "OvertimePaid": {
            "type": "number",
            "description": "Gets or sets the paid overtime.",
            "format": "double"
          },
          "RemainingVacationLastYear": {
            "type": "number",
            "description": "Gets remaining vacation from last year",
            "format": "double"
          },
          "TotalVacationThisYear": {
            "type": "number",
            "description": "Gets vacation entitlement this year",
            "format": "double"
          },
          "VacationEntitlement": {
            "type": "number",
            "description": "Gets total vacation this year",
            "format": "double"
          },
          "RemainingVacation": {
            "type": "number",
            "description": "Gets or sets the remaining vacation.",
            "format": "double"
          },
          "TakenVacationThisYear": {
            "type": "number",
            "description": "Gets taken Vacation this year",
            "format": "double"
          },
          "TakenVacationThisMonth": {
            "type": "number",
            "description": "Gets taken Vacation this month",
            "format": "double"
          }
        }
      },
      "EmployeeBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "HasWorkingTimeAccount",
              "IsProjectManager",
              "MaintainTimesheet"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Person": {
                "description": "Selection of the employee These entries come from the personnel list.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "Timesheets": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Timesheet"
                }
              },
              "Overtimes": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Overtime"
                }
              },
              "WeeklyWorkingTimes": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/WeeklyWorkingTime"
                }
              },
              "HasWorkingTimeAccount": {
                "type": "boolean",
                "description": "TRANSLATION MISSING"
              },
              "IsProjectManager": {
                "type": "boolean",
                "description": "Project manager"
              },
              "MaintainTimesheet": {
                "type": "boolean",
                "description": "Timesheets"
              },
              "GivenName": {
                "type": "string",
                "description": "First name",
                "maxLength": 50,
                "nullable": true
              },
              "HiringDate": {
                "type": "string",
                "description": "Date of staff entry",
                "format": "date-time",
                "nullable": true
              },
              "LeavingDate": {
                "type": "string",
                "description": "Exit Date",
                "format": "date-time",
                "nullable": true
              },
              "SurName": {
                "type": "string",
                "description": "Last name",
                "maxLength": 50,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Timesheet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TimesheetBase"
          },
          {
            "type": "object",
            "description": "Enter the services you performed on a workday. This also involves the\npreparation of service invoices to customers.",
            "additionalProperties": false
          }
        ]
      },
      "TimesheetBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Employee": {
                "description": "Personnel",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Employee"
                  }
                ]
              },
              "PresenceLoaction": {
                "description": "-- SUMMARY MISSING --",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PresenceLocation"
                  }
                ]
              },
              "WorkDescriptions": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/WorkDescription"
                }
              },
              "CheckIn": {
                "type": "string",
                "description": "Arrived (hh:mm)",
                "maxLength": 5,
                "nullable": true
              },
              "CheckOut": {
                "type": "string",
                "description": "Leaving (hh:mm)",
                "maxLength": 5,
                "nullable": true
              },
              "Date": {
                "type": "string",
                "description": "Date",
                "format": "date-time",
                "nullable": true
              },
              "TotalBillableHours": {
                "type": "number",
                "description": "Daily total of billable hours",
                "format": "decimal",
                "nullable": true
              },
              "TotalHours": {
                "type": "number",
                "description": "Daily total Hours",
                "format": "decimal",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "PresenceLocation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PresenceLocationBase"
          },
          {
            "type": "object",
            "description": "-- SUMMARY MISSING --",
            "additionalProperties": false
          }
        ]
      },
      "PresenceLocationBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Identification"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Identification": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 255,
                "minLength": 1
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessObjectBase": {
        "type": "object",
        "description": "Base class for business object",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "RecordCreated": {
            "type": "string",
            "format": "date-time"
          },
          "RecordModified": {
            "type": "string",
            "format": "date-time"
          },
          "RecordCreatedBy": {
            "type": "string",
            "nullable": true
          },
          "RecordModifiedBy": {
            "type": "string",
            "nullable": true
          },
          "RecordModifiedFrom": {
            "type": "string",
            "nullable": true
          },
          "RecordModifiedWith": {
            "type": "string",
            "nullable": true
          },
          "RecordDeactivated": {
            "type": "boolean"
          },
          "RecordValidFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "RecordValidTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "WorkDescription": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkDescriptionBase"
          },
          {
            "type": "object",
            "description": "Enter descriptions for the services processed here. Assign an internal billing\nnumber (EAN) to the service, via which the service is to be billed for, and\nenter an exact description of the service.",
            "additionalProperties": false
          }
        ]
      },
      "WorkDescriptionBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Timesheet",
              "Calculation"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "InternalOrderNumber": {
                "description": "EAN",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/InternalOrderNumber"
                  }
                ]
              },
              "OutgoingInvoiceItem": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "Timesheet": {
                "description": "To be texted by klaus.aengenvoort@etask.de",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Timesheet"
                  }
                ]
              },
              "Calculation": {
                "type": "boolean",
                "description": "Calculation"
              },
              "Description": {
                "type": "string",
                "description": "Service description",
                "maxLength": 2000,
                "nullable": true
              },
              "Hours": {
                "type": "number",
                "description": "Hours",
                "format": "double",
                "nullable": true
              },
              "QmNumber": {
                "type": "integer",
                "description": "Recording of the QM number from qm.etask.de",
                "format": "int32",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "InternalOrderNumber": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InternalOrderNumberBase"
          },
          {
            "type": "object",
            "description": "Use this form to create internal payroll numbers (EANs) that your employees can\nuse to run payroll for their hours. Also make various settings for billing the\nhours.",
            "additionalProperties": false
          }
        ]
      },
      "InternalOrderNumberBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "AllowModifications",
              "Calculation",
              "Code",
              "FlatrateAccounting",
              "Locked",
              "NoWorkingTimeAccountInfluence",
              "SettlementLevel",
              "SoftwareExtension"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Category": {
                "description": "Category",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/InternalOrderNumberCategory"
                  }
                ]
              },
              "Product": {
                "type": "integer",
                "description": "The product that can be extended by the services registered on this EAN at the\ncustomer's request.",
                "format": "int32",
                "nullable": true
              },
              "AssignmentEansToReceifedOrderItems": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AssignmentEansToReceifedOrderItem"
                }
              },
              "WorkDescriptions": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/WorkDescription"
                }
              },
              "AllowModifications": {
                "type": "boolean",
                "description": "allow modifications"
              },
              "Calculation": {
                "type": "boolean",
                "description": "Calculation"
              },
              "Code": {
                "type": "string",
                "description": "Code",
                "maxLength": 50,
                "minLength": 1
              },
              "FlatrateAccounting": {
                "type": "boolean",
                "description": "Specifies whether the settlement of the hours entered on the EAN is flat-rate,\nwhich means that the hours are not displayed on the customer invoice but are\npaid flat-rate."
              },
              "Locked": {
                "type": "boolean",
                "description": "blocked?"
              },
              "NoWorkingTimeAccountInfluence": {
                "type": "boolean",
                "description": "no influence on working-time account"
              },
              "SettlementLevel": {
                "type": "boolean",
                "description": "Specifies whether a billing rate is used The billing rate specifies the\npercentage of the hourly service performed within the framework of an order that\nis paid directly by the customer."
              },
              "SoftwareExtension": {
                "type": "boolean",
                "description": "Calculation of these services in the update service for software extensions"
              },
              "Description": {
                "type": "string",
                "description": "Description",
                "maxLength": 4000,
                "nullable": true
              },
              "Identification": {
                "type": "string",
                "description": "Identification",
                "maxLength": 100,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "InternalOrderNumberCategory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InternalOrderNumberCategoryBase"
          },
          {
            "type": "object",
            "description": "Use this form to create categories for internal settlement numbers so that you\ncan specify them later.",
            "additionalProperties": false
          }
        ]
      },
      "InternalOrderNumberCategoryBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Code"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Code": {
                "type": "string",
                "description": "Code",
                "maxLength": 8,
                "minLength": 1
              },
              "Identification": {
                "type": "string",
                "description": "Identification",
                "maxLength": 255,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "AssignmentEansToReceifedOrderItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AssignmentEansToReceifedOrderItemBase"
          },
          {
            "type": "object",
            "description": "Internal settlement numbers (EANs) are assigned to order items here.",
            "additionalProperties": false
          }
        ]
      },
      "AssignmentEansToReceifedOrderItemBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "InternalOrdersEan",
              "ReceivedOrderItem"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "InternalOrdersEan": {
                "description": "EAN",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/InternalOrderNumber"
                  }
                ]
              },
              "ReceivedOrderItem": {
                "description": "Order item",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ReceivedOrderItem"
                  }
                ]
              },
              "ApplicableFrom": {
                "type": "string",
                "description": "Valid from",
                "format": "date-time",
                "nullable": true
              },
              "ApplicableTill": {
                "type": "string",
                "description": "Valid till",
                "format": "date-time",
                "nullable": true
              },
              "StandardTextSettlement": {
                "type": "string",
                "description": "To be texted by klaus.aengenvoort@etask.de",
                "maxLength": 255,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "ReceivedOrderItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReceivedOrderItemBase"
          },
          {
            "type": "object",
            "description": "-- SUMMARY MISSING --",
            "additionalProperties": false
          }
        ]
      },
      "ReceivedOrderItemBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "FixedPrice"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "NominalAccounts": {
                "type": "integer",
                "description": "[de]Sachkonto",
                "format": "int32",
                "nullable": true
              },
              "Product": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "ReceivedOrder": {
                "description": "Ordering number",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ReceivedOrder"
                  }
                ]
              },
              "ReceivedOrderItemType": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "SalesCategories": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "AssignmentEansToReceifedOrderItems": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AssignmentEansToReceifedOrderItem"
                }
              },
              "FixedPrice": {
                "type": "boolean",
                "description": "Fixed Price"
              },
              "Code": {
                "type": "string",
                "description": "Code",
                "maxLength": 10,
                "nullable": true
              },
              "ItemText": {
                "type": "string",
                "description": "Item text",
                "maxLength": 100,
                "nullable": true
              },
              "Value": {
                "type": "number",
                "description": "Value [€]",
                "format": "decimal",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "ReceivedOrder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReceivedOrderBase"
          },
          {
            "type": "object",
            "description": "You can manage all orders that have been issued to your company here. Enter\nidentification data and store all important order data, for example, the type\nand content of the order. Manage the settlement of the order and specify the\nquotation to which it belongs.",
            "additionalProperties": false,
            "properties": {
              "Documents": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "Annotations": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Annotations"
                  }
                ]
              }
            }
          }
        ]
      },
      "ReceivedOrderBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Finished",
              "InvoicingAsBudgeted",
              "OralAgreement",
              "StandardDiscountNotapplicableinthefuture"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "CompanyAddress": {
                "description": "Selection of the company that accepted the order.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "Contract": {
                "type": "integer",
                "description": "Assign the contract on the basis of which the order was placed to the order.",
                "format": "int32",
                "nullable": true
              },
              "Corporation": {
                "type": "integer",
                "description": "Company in whose name the order is performed. This company is legally the\noffering and invoicing organisation",
                "format": "int32",
                "nullable": true
              },
              "Customer": {
                "type": "integer",
                "description": "Customer",
                "format": "int32",
                "nullable": true
              },
              "Debitor": {
                "type": "integer",
                "description": "Customer (customer) who ordered the services that are organized, performed and\nbilled using this order",
                "format": "int32",
                "nullable": true
              },
              "InvoiceAddress": {
                "type": "integer",
                "description": "Invoice address",
                "format": "int32",
                "nullable": true
              },
              "Offer": {
                "type": "integer",
                "description": "go to offer",
                "format": "int32",
                "nullable": true
              },
              "PaymentDueDate": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "ProjectStaff": {
                "description": "Project manager",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Employee"
                  }
                ]
              },
              "ReceivedOrderType": {
                "type": "integer",
                "description": "Service level",
                "format": "int32",
                "nullable": true
              },
              "ReceivedOrderItems": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ReceivedOrderItem"
                }
              },
              "Finished": {
                "type": "boolean",
                "description": "done"
              },
              "InvoicingAsBudgeted": {
                "type": "boolean",
                "description": "invoicing as budgeted"
              },
              "OralAgreement": {
                "type": "boolean",
                "description": "Oral agreement?"
              },
              "StandardDiscountNotapplicableinthefuture": {
                "type": "boolean",
                "description": "Specifies whether the standard discount should be estimated for settlement of\nthe order."
              },
              "BriefDescription": {
                "type": "string",
                "description": "Short order/job description",
                "maxLength": 50,
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "Code",
                "maxLength": 50,
                "nullable": true
              },
              "CostCenter": {
                "type": "string",
                "description": "Cost center",
                "maxLength": 50,
                "nullable": true
              },
              "Date": {
                "type": "string",
                "description": "Date",
                "format": "date-time",
                "nullable": true
              },
              "DeliverySpecialist": {
                "type": "string",
                "description": "Delivery specialist",
                "maxLength": 255,
                "nullable": true
              },
              "DetailedDescription": {
                "type": "string",
                "description": "Detailed description",
                "maxLength": 255,
                "nullable": true
              },
              "InvoicingSpecialist": {
                "type": "string",
                "description": "Invoicing specialist",
                "maxLength": 255,
                "nullable": true
              },
              "JoborderEnd": {
                "type": "string",
                "description": "job/order end",
                "format": "date-time",
                "nullable": true
              },
              "OrderingNumber": {
                "type": "string",
                "description": "Ordering number",
                "maxLength": 50,
                "nullable": true
              },
              "OrderSpecialist": {
                "type": "string",
                "description": "Order specialist",
                "maxLength": 50,
                "nullable": true
              },
              "OrderTotal": {
                "type": "number",
                "description": "Order total [€]",
                "format": "decimal",
                "nullable": true
              },
              "Remarks": {
                "type": "string",
                "description": "Remarks",
                "maxLength": 4000,
                "nullable": true
              },
              "SettlementType": {
                "type": "string",
                "description": "Settlement type",
                "maxLength": 255,
                "nullable": true
              },
              "TermOfPayment": {
                "type": "integer",
                "description": "Term of payment",
                "format": "int32",
                "nullable": true
              },
              "Unassigned": {
                "type": "string",
                "description": "unassigned",
                "maxLength": 255,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "CompanyAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CompanyAddressBase"
          },
          {
            "type": "object",
            "description": "Enter data records for all external companies with which the FM department\ncooperates. These data records are available in many places of the FM portal\n(e.g. to identify the contractor in eTASK Maintenance). Assign the company a\ntype, a trade, address and communication details, and company employee data.\nEvaluate the company (adherence to delivery dates, price loyalty, etc.) to\ndocument the relationship of trust. Upload documents concerning this company.\nWhen using eTASK.CAD, the company's identification in CAD plans is also\ndocumented here. When using eTASK. contractor logon, the company's employees are\nregistered who have temporary access to the building for work. If eTASK\ndeficiency management is used, the construction projects in which the company is\nthe client are assigned to the company.",
            "additionalProperties": false,
            "properties": {
              "Images": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Image"
                }
              },
              "Documents": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "Annotations": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Annotations"
                  }
                ]
              }
            }
          }
        ]
      },
      "CompanyAddressBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "ActivationForRegistrationManagement",
              "ContactPersonMailContact",
              "Customer",
              "ExportFlag",
              "IsInternalCompany",
              "Lessee",
              "Lessor",
              "Manufacturer",
              "Orderer",
              "Owner",
              "ServiceProvider",
              "ShowInEmergencyList",
              "Supplier"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "AddressType": {
                "type": "integer",
                "description": "Address Type",
                "format": "int32",
                "nullable": true
              },
              "CostCenter": {
                "description": "Select the cost center that the company belongs to.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              },
              "Trade": {
                "type": "integer",
                "description": "Select the trade to which the company should be assigned.",
                "format": "int32",
                "nullable": true
              },
              "ActivationForRegistrationManagement": {
                "type": "boolean",
                "description": "Indicate whether electronic personnel tracking should be activated for the\ncompany."
              },
              "ContactPersonMailContact": {
                "type": "boolean",
                "description": "Specifies whether the main contact person is to be activated for electronic\ninvoicing."
              },
              "Customer": {
                "type": "boolean",
                "description": "Indicate whether the company is a customer of your company"
              },
              "ExportFlag": {
                "type": "number",
                "description": "-- SUMMARY MISSING --",
                "format": "decimal"
              },
              "IsInternalCompany": {
                "type": "boolean",
                "description": "Indicate whether the company is an in-house company (e.g. an in-house\ndepartment)."
              },
              "Lessee": {
                "type": "boolean",
                "description": "Indicate whether the company has leased rooms from your company."
              },
              "Lessor": {
                "type": "boolean",
                "description": "Indicate whether the company leases out any premises used by your company."
              },
              "Manufacturer": {
                "type": "boolean",
                "description": "Indicate whether the company manufactures any installations used by your\ncompany."
              },
              "Orderer": {
                "type": "boolean",
                "description": "Indicate whether the company is a contracting entity for your company."
              },
              "Owner": {
                "type": "boolean",
                "description": "Indicate whether the company owns any assets or objects used by your company."
              },
              "ServiceProvider": {
                "type": "boolean",
                "description": "Indicate whether the company is a service provider for your company."
              },
              "ShowInEmergencyList": {
                "type": "boolean",
                "description": "Specify here whether this company should be displayed in the company emergency\nlist."
              },
              "Supplier": {
                "type": "boolean",
                "description": "Indicate whether the company is a supplier for your company."
              },
              "AccountingSystem": {
                "type": "string",
                "description": "Enter the name of the in-house accounting system which performs the company's\nbookkeeping.",
                "maxLength": 50,
                "nullable": true
              },
              "AreaCode": {
                "type": "string",
                "description": "Enter the area code for the company's telephone number (e.g. \"221\" for\nCologne).",
                "maxLength": 10,
                "nullable": true
              },
              "BackgroundColor": {
                "type": "integer",
                "description": "Enter the number of the background color in CAD visualization (from\n\"0\" to \"119\").",
                "format": "int32",
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "Enter an abbreviation for the company. We recommend that you do not use a\nsequential numeric code but that you use an abbreviation from which the full\ncompany name can be derived.",
                "maxLength": 50,
                "nullable": true
              },
              "CollectedBy": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 50,
                "nullable": true
              },
              "CollectionDate": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "CompanyName": {
                "type": "string",
                "description": "Enter the full company name.",
                "maxLength": 50,
                "nullable": true
              },
              "CompanyName2": {
                "type": "string",
                "description": "Company Name (2nd Row)",
                "maxLength": 50,
                "nullable": true
              },
              "CompanyName3": {
                "type": "string",
                "description": "Company Name (3rd Row)",
                "maxLength": 50,
                "nullable": true
              },
              "CompanyNameOnDoorplate": {
                "type": "string",
                "description": "Company Name on Door Plate",
                "maxLength": 50,
                "nullable": true
              },
              "ContactPerson": {
                "type": "string",
                "description": "Enter the name of the main contact person.",
                "maxLength": 50,
                "nullable": true
              },
              "ContactPersonPhoneNumber": {
                "type": "string",
                "description": "Enter the contact person's telephone number.",
                "maxLength": 50,
                "nullable": true
              },
              "ContractorNumber": {
                "type": "string",
                "description": "Contractor No.",
                "maxLength": 10,
                "nullable": true
              },
              "Country": {
                "type": "string",
                "description": "Country",
                "maxLength": 60,
                "nullable": true
              },
              "CountryDialCode": {
                "type": "string",
                "description": "Enter the country dialing code for the company's telephone number (e.g.\n\"0049\" for Germany).",
                "maxLength": 10,
                "nullable": true
              },
              "Department": {
                "type": "string",
                "description": "Department",
                "maxLength": 50,
                "nullable": true
              },
              "EMailAddress": {
                "type": "string",
                "description": "Enter the contact person's email address.",
                "maxLength": 50,
                "nullable": true
              },
              "EmailBusinessContact": {
                "type": "string",
                "description": "E-Mail",
                "maxLength": 100,
                "nullable": true
              },
              "EmailPersonalContact": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 100,
                "nullable": true
              },
              "ExternalId": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "FaxNumber": {
                "type": "string",
                "description": "Enter the company's fax number without the country or area code.",
                "maxLength": 50,
                "nullable": true
              },
              "ForegroundColor": {
                "type": "integer",
                "description": "Enter the number of the foreground color in CAD visualization (from\n\"0\" to \"119\").",
                "format": "int32",
                "nullable": true
              },
              "Function": {
                "type": "string",
                "description": "Function",
                "maxLength": 50,
                "nullable": true
              },
              "Gender": {
                "type": "string",
                "description": "Madam/Sir",
                "maxLength": 5,
                "nullable": true
              },
              "GivenName": {
                "type": "string",
                "description": "First Name",
                "maxLength": 50,
                "nullable": true
              },
              "Group": {
                "type": "string",
                "description": "Group",
                "maxLength": 50,
                "nullable": true
              },
              "GroupCode": {
                "type": "string",
                "description": "Enter the group of companies that the company belongs to.",
                "maxLength": 50,
                "nullable": true
              },
              "LastContactmeeting": {
                "type": "string",
                "description": "Last Contact/Meeting",
                "maxLength": 50,
                "nullable": true
              },
              "LetterSalutation": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 50,
                "nullable": true
              },
              "MailingAddress": {
                "type": "string",
                "description": "If created, used for correspondence instead of other address lines.",
                "maxLength": 400,
                "nullable": true
              },
              "MobilePhoneNo": {
                "type": "string",
                "description": "Enter the contact person's mobile phone number.",
                "maxLength": 50,
                "nullable": true
              },
              "NextContactMeeting": {
                "type": "string",
                "description": "Next Contact/Meeting",
                "maxLength": 50,
                "nullable": true
              },
              "OurCustomerNo": {
                "type": "string",
                "description": "Our Customer No.",
                "maxLength": 50,
                "nullable": true
              },
              "PartnerNo": {
                "type": "string",
                "description": "Enter the company’s partner number.",
                "maxLength": 50,
                "nullable": true
              },
              "Pattern": {
                "type": "integer",
                "description": "Enter the number of the pattern in CAD visualization (from \"1\" to\n\"77\").",
                "format": "int32",
                "nullable": true
              },
              "PhoneMobile": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 50,
                "nullable": true
              },
              "PhoneNo": {
                "type": "string",
                "description": "Enter the company's telephone number without the country or area code.",
                "maxLength": 50,
                "nullable": true
              },
              "PhoneNoOfficial": {
                "type": "string",
                "description": "Phone No. (official)",
                "maxLength": 50,
                "nullable": true
              },
              "PhoneNoPrivate": {
                "type": "string",
                "description": "Phone No. (private)",
                "maxLength": 50,
                "nullable": true
              },
              "PhoneNumberCentral": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 50,
                "nullable": true
              },
              "PoBox": {
                "type": "string",
                "description": "Enter a P.O. box for this company.",
                "maxLength": 15,
                "nullable": true
              },
              "PostalCode": {
                "type": "string",
                "description": "Enter the post code in the company's address.",
                "maxLength": 12,
                "nullable": true
              },
              "PostalCode2": {
                "type": "string",
                "description": "Enter the postcode for the P.O. box, if different to the general address.",
                "maxLength": 12,
                "nullable": true
              },
              "Remarks": {
                "type": "string",
                "description": "Remarks",
                "maxLength": 255,
                "nullable": true
              },
              "RemarksAdditional": {
                "type": "string",
                "description": "Remarks",
                "maxLength": 255,
                "nullable": true
              },
              "SalesTaxId": {
                "type": "string",
                "description": "Enter the company's European sales tax made up of the country code (e.g.\n\"DE\" for Germany) and max. 12 more alphanumerical characters.",
                "maxLength": 12,
                "nullable": true
              },
              "Status": {
                "type": "string",
                "description": "Status",
                "maxLength": 255,
                "nullable": true
              },
              "StreetAddress": {
                "type": "string",
                "description": "Enter the company's street address.",
                "maxLength": 50,
                "nullable": true
              },
              "Superior": {
                "type": "string",
                "description": "Superior",
                "maxLength": 50,
                "nullable": true
              },
              "SurName": {
                "type": "string",
                "description": "Last Name",
                "maxLength": 50,
                "nullable": true
              },
              "TextEmergencyList": {
                "type": "string",
                "description": "Here you can specify the malfunction for which the company is to be displayed on\nthe company emergency list (e.g. \"Heating fault clearance\").",
                "maxLength": 250,
                "nullable": true
              },
              "Title": {
                "type": "string",
                "description": "Title",
                "maxLength": 30,
                "nullable": true
              },
              "TitleForm": {
                "type": "string",
                "description": "Title Form",
                "maxLength": 50,
                "nullable": true
              },
              "Town": {
                "type": "string",
                "description": "Enter the town in the company's address.",
                "maxLength": 50,
                "nullable": true
              },
              "UserNameFmPortal": {
                "type": "string",
                "description": "Enter the user name used by the company to receive and edit tickets in the\nAperture Workflow Portal.",
                "maxLength": 50,
                "nullable": true
              },
              "Website": {
                "type": "string",
                "description": "Enter the company's website address (e.g. \"http://www.etask.de\")",
                "maxLength": 200,
                "nullable": true
              },
              "WebSitePrivate": {
                "type": "string",
                "description": "Web Site (private)",
                "maxLength": 100,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "CostCenter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CostCenterBase"
          },
          {
            "type": "object",
            "description": "Here you can create data records for cost centers in your company. The entered\ncost centers can be selected later in many places of the FM portal.",
            "additionalProperties": false
          }
        ]
      },
      "CostCenterBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Billable",
              "CanBePostedTo",
              "Code"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "CompanyAddress": {
                "description": "Select the company in which the cost center is valid.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "CostCenterType": {
                "type": "integer",
                "description": "Cost Center Type",
                "format": "int32",
                "nullable": true
              },
              "Department": {
                "type": "integer",
                "description": "Select the department to which this cost center is assigned.",
                "format": "int32",
                "nullable": true
              },
              "Buildings": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Building"
                }
              },
              "Billable": {
                "type": "boolean",
                "description": "Indicate whether the cost center is basically deemed to be projectable. Uncheck\nthe checkbox if the cost center is temporarily not projectable."
              },
              "CanBePostedTo": {
                "type": "boolean",
                "description": "Set the check mark to indicate that costs can be posted to this cost center. In\ncase the cost center is blocked for postings, uncheck the box."
              },
              "Code": {
                "type": "string",
                "description": "Enter the abbreviation for the cost center. Use the abbreviation already used\nin-house by your company.",
                "maxLength": 30,
                "minLength": 1
              },
              "BackgroundColor": {
                "type": "integer",
                "description": "Enter the number of the background color in CAD visualization (from\n\"0\" to \"119\").",
                "format": "int32",
                "nullable": true
              },
              "CompanyCode": {
                "type": "string",
                "description": "Enter the name of the accounting area in which the cost center is valid.",
                "maxLength": 10,
                "nullable": true
              },
              "CostCenterValidFrom": {
                "type": "string",
                "description": "Select the date from which the cost center is valid and bookable. You can also\nmanually enter the date in dd.mm.yyyy format.",
                "format": "date-time",
                "nullable": true
              },
              "CostCenterValidTo": {
                "type": "string",
                "description": "Select the date from which the cost center is no longer valid or bookable. You\ncan also manually enter the date in dd.mm.yyyy format.",
                "format": "date-time",
                "nullable": true
              },
              "ExternalCode": {
                "type": "string",
                "description": "In the case of an import or export of the cost center, the external code is\nstored here.",
                "maxLength": 30,
                "nullable": true
              },
              "ForegroundColor": {
                "type": "integer",
                "description": "Enter the number of the foreground color in CAD visualization (from\n\"0\" to \"119\").",
                "format": "int32",
                "nullable": true
              },
              "Hierarchy": {
                "type": "string",
                "description": "If the cost center is structured hierarchically, the higher-level cost center\ncan be entered here.",
                "maxLength": 30,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter the full name of the cost center.",
                "maxLength": 50,
                "nullable": true
              },
              "Pattern": {
                "type": "integer",
                "description": "Enter the number of the pattern in CAD visualization (from \"1\" to\n\"77\").",
                "format": "int32",
                "nullable": true
              },
              "PersonInChargeForCostcenter": {
                "type": "string",
                "description": "Staff number of person in charge",
                "maxLength": 50,
                "nullable": true
              },
              "PersonResponsibleForCostcenter": {
                "type": "string",
                "description": "Select the person responsible for the cost center from the combobox.",
                "maxLength": 50,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Building": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BuildingBase"
          },
          {
            "type": "object",
            "description": "Create data records for the various buildings in the organization. Enter\ninformation on the identification (assignment of a location and a building\nnumber and description) and address of the building as well as the building\ndescription. See at a glance how the current use of space (according to DIN 277)\nis distributed in the building. Assign the floors in the building. If you also\nuse eTASK Maintenance, all maintenance contracts concluded with external or\ninternal service providers for this building are displayed.",
            "additionalProperties": false,
            "properties": {
              "Images": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Image"
                }
              },
              "Documents": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "Annotations": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Annotations"
                  }
                ]
              }
            }
          }
        ]
      },
      "BuildingBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "AirConditioning",
              "BillingOnFlatfeeBasis",
              "ChemicalWasteWater",
              "ColdWaterSupply",
              "DistilledWater",
              "ExternalHeatingExpensesSettlement",
              "FireDetectionSystem",
              "FireExtinguishingTechnology",
              "GeneralWasteWater",
              "HotWaterSupply",
              "InDepthSurvey",
              "IntrusionDetectionSystem",
              "LightningProtection",
              "OutgoingAir",
              "PressurizedAir",
              "ProcessCoolingWater",
              "ProtectionOfHistoricalmonuments",
              "Rentable",
              "SprinklerSystem",
              "TechnicalExhaustAir",
              "Vacuum",
              "Ventilation",
              "WastewaterDisposal"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "AccountingUnit": {
                "type": "integer",
                "description": "Select the accounting unit to which this building belongs.",
                "format": "int32",
                "nullable": true
              },
              "ActivityType": {
                "type": "integer",
                "description": "To be texted by jens.coosmann@etask.de",
                "format": "int32",
                "nullable": true
              },
              "BuildingGroup": {
                "type": "integer",
                "description": "Select the building group to which the building is to be assigned.",
                "format": "int32",
                "nullable": true
              },
              "ConstructionType": {
                "type": "integer",
                "description": "Select the construction type of the building.",
                "format": "int32",
                "nullable": true
              },
              "CostCenter": {
                "description": "Select the cost center which is to be charged with the costs for the building.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              },
              "DegreeDayNumberWeatherStation": {
                "type": "integer",
                "description": "Selection of the nearest weather station.",
                "format": "int32",
                "nullable": true
              },
              "Department": {
                "type": "integer",
                "description": "Select the department to which the building should be allocated.",
                "format": "int32",
                "nullable": true
              },
              "Function": {
                "type": "integer",
                "description": "Select the function of the building.",
                "format": "int32",
                "nullable": true
              },
              "LifeCyclephase": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "LocationPolicy": {
                "type": "integer",
                "description": "Select the location concept.",
                "format": "int32",
                "nullable": true
              },
              "MaintenanceContractType": {
                "type": "integer",
                "description": "Select the type of contract.",
                "format": "int32",
                "nullable": true
              },
              "Manager": {
                "description": "Select the works manager responsible for the building.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "OpcPerLocationContingencyRisk": {
                "type": "integer",
                "description": "Selection of the cost element for the default risk.",
                "format": "int32",
                "nullable": true
              },
              "OperationalCostsPerlocationManagement": {
                "type": "integer",
                "description": "Selection of the cost element for the administrator fee.",
                "format": "int32",
                "nullable": true
              },
              "OperationalSpace": {
                "type": "integer",
                "description": "Selection of the associated operating area",
                "format": "int32",
                "nullable": true
              },
              "OwnerAddress": {
                "description": "Selection of the building owner",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "Property": {
                "type": "integer",
                "description": "Select the property on which the building is located.",
                "format": "int32",
                "nullable": true
              },
              "PropertyType": {
                "type": "integer",
                "description": "Select the property type of the building.",
                "format": "int32",
                "nullable": true
              },
              "ResponsiblePerson": {
                "description": "Responsible Person",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "Site": {
                "description": "Select the location in which the building is located. The code of the location\nselected here will be part of the building code which is automatically generated\nby the system.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Site"
                  }
                ]
              },
              "Type": {
                "type": "integer",
                "description": "Selection of an object type",
                "format": "int32",
                "nullable": true
              },
              "Floors": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Floor"
                }
              },
              "AirConditioning": {
                "type": "boolean",
                "description": "Indicates whether the building has (central) air conditioning."
              },
              "BillingOnFlatfeeBasis": {
                "type": "boolean",
                "description": "Indicate whether billing is to be performed on a flat fee basis."
              },
              "ChemicalWasteWater": {
                "type": "boolean",
                "description": "Indication whether the building has (central) disposal of chemical waste water."
              },
              "ColdWaterSupply": {
                "type": "boolean",
                "description": "Indicates whether the building has a cold water supply."
              },
              "DistilledWater": {
                "type": "boolean",
                "description": "Indicates whether the building has a (central) supply of distilled water."
              },
              "ExternalHeatingExpensesSettlement": {
                "type": "boolean",
                "description": "Specifies whether the heating expenses settlement is performed by an external\ncompany."
              },
              "FireDetectionSystem": {
                "type": "boolean",
                "description": "Indication whether the building has a fire alarm system."
              },
              "FireExtinguishingTechnology": {
                "type": "boolean",
                "description": "Indication whether the building has fire extinguishing technology."
              },
              "GeneralWasteWater": {
                "type": "boolean",
                "description": "Indication whether the building has (central) disposal of general wastewater."
              },
              "HotWaterSupply": {
                "type": "boolean",
                "description": "Indicates whether the building has a hot water supply."
              },
              "InDepthSurvey": {
                "type": "boolean",
                "description": "Indicate whether an in-depth survey was conducted for this building."
              },
              "IntrusionDetectionSystem": {
                "type": "boolean",
                "description": "Indicates whether the building has a burglar alarm system."
              },
              "LightningProtection": {
                "type": "boolean",
                "description": "Indicates whether the building has a lightning protection system."
              },
              "OutgoingAir": {
                "type": "boolean",
                "description": "Indicates whether the building has a (central) exhaust air system."
              },
              "PressurizedAir": {
                "type": "boolean",
                "description": "Indicates whether the building has a (central) compressed air supply."
              },
              "ProcessCoolingWater": {
                "type": "boolean",
                "description": "Indicates whether the building has a (central) cooling water supply."
              },
              "ProtectionOfHistoricalmonuments": {
                "type": "boolean",
                "description": "Indication whether the building is a listed building."
              },
              "Rentable": {
                "type": "boolean",
                "description": "Indicates whether the building is available for rent."
              },
              "SprinklerSystem": {
                "type": "boolean",
                "description": "Indicates whether the building has a sprinkler system."
              },
              "TechnicalExhaustAir": {
                "type": "boolean",
                "description": "Indicates whether the building has a (central) disposal facility for technical\nexhaust air."
              },
              "Vacuum": {
                "type": "boolean",
                "description": "Indicates whether the building has a (central) vacuum system."
              },
              "Ventilation": {
                "type": "boolean",
                "description": "Indicates whether the building has a (central) ventilation system."
              },
              "WastewaterDisposal": {
                "type": "boolean",
                "description": "Indication whether the building has waste water disposal."
              },
              "AdditionalUsableArea": {
                "type": "number",
                "description": "Input of the planned value of the secondary useable area of the building.",
                "format": "decimal",
                "nullable": true
              },
              "AmountOfFloors": {
                "type": "number",
                "description": "Enter the number of floors in the building.",
                "format": "decimal",
                "nullable": true
              },
              "BuildingDescriptionForRentComparisonReport": {
                "type": "string",
                "description": "Input of an appropriate building description, which enables the correct\nselection of the suitable representative list of rents.",
                "maxLength": 8000,
                "nullable": true
              },
              "CadOid": {
                "type": "string",
                "description": "TRANSLATION MISSING",
                "maxLength": 18,
                "nullable": true
              },
              "Cellar": {
                "type": "string",
                "description": "Indicates what type of cellar it is (e.g. underground car park, storage rooms).",
                "maxLength": 20,
                "nullable": true
              },
              "City": {
                "type": "string",
                "description": "Enter the name of the city in which the building is located.",
                "maxLength": 50,
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "Displays the building code automatically generated by the system. The code\nconsists of the selected location and the building number assigned to the\nbuilding.",
                "maxLength": 50,
                "nullable": true
              },
              "ConstructedArea": {
                "type": "number",
                "description": "If the building dimensions have been specified, the building area can be\ncalculated from the dimensions.",
                "format": "decimal",
                "nullable": true
              },
              "ContractuallyAgreedOutput": {
                "type": "string",
                "description": "Enter the contractually agreed electrical output in kilowatts.",
                "maxLength": 10,
                "nullable": true
              },
              "CostCenterIpo": {
                "type": "string",
                "description": "In case the building is rented, provide the cost center to be charged with the\nrental costs.",
                "maxLength": 50,
                "nullable": true
              },
              "Currenta": {
                "type": "string",
                "description": "Enter the maximum allowable current of the connection.",
                "maxLength": 15,
                "nullable": true
              },
              "DefaultRiskAsaPercentageOfBasicRent": {
                "type": "number",
                "description": "Indication of the default risk as a percentage of the basic rent.",
                "format": "decimal",
                "nullable": true
              },
              "EMailOfResponsiblePerson": {
                "type": "string",
                "description": "Enter the e-mail address of the person responsible for the object.",
                "maxLength": 70,
                "nullable": true
              },
              "FinancialBookingCode": {
                "type": "string",
                "description": "Enter the accounting area to which the building is assigned.",
                "maxLength": 50,
                "nullable": true
              },
              "FunctionalArea": {
                "type": "number",
                "description": "Enter the planned value of the functional area of the building.",
                "format": "decimal",
                "nullable": true
              },
              "HeatingLimitTemperature": {
                "type": "number",
                "description": "Indication of the heating limit temperature in degrees Celsius.",
                "format": "decimal",
                "nullable": true
              },
              "HeatingMedium": {
                "type": "string",
                "description": "Input of the heating medium (district heating, natural gas, etc.).",
                "maxLength": 30,
                "nullable": true
              },
              "HeatingPeriodFrom": {
                "type": "string",
                "description": "Enter the start of the heating period, where the format TT.MM must be adhered\nto.",
                "maxLength": 5,
                "nullable": true
              },
              "HeatingPeriodTo": {
                "type": "string",
                "description": "Enter the end of the heating period, where the format TT.MM must be adhered to.",
                "maxLength": 5,
                "nullable": true
              },
              "Height": {
                "type": "number",
                "description": "Enter the building height in meters.",
                "format": "decimal",
                "nullable": true
              },
              "IfcGlobalId": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 22,
                "nullable": true
              },
              "Infrastructure": {
                "type": "string",
                "description": "Enter additional information about the building's infrastructure.",
                "maxLength": 255,
                "nullable": true
              },
              "InsideTemperaturec": {
                "type": "number",
                "description": "Indication of the nominal internal temperature in degrees Celsius.",
                "format": "decimal",
                "nullable": true
              },
              "InstalledCapacitykw": {
                "type": "string",
                "description": "Input of the installed electrical power in kilowatts.",
                "maxLength": 10,
                "nullable": true
              },
              "InsulationMaterial": {
                "type": "string",
                "description": "Enter the material of the cable insulation.",
                "maxLength": 30,
                "nullable": true
              },
              "Latitude": {
                "type": "number",
                "description": "Enter the latitude of the building's location (e.g. the entrance area) for\neasier visualization in map services (e.g. Google Maps).",
                "format": "decimal",
                "nullable": true
              },
              "Length": {
                "type": "number",
                "description": "Enter the building length in meters.",
                "format": "decimal",
                "nullable": true
              },
              "Longitude": {
                "type": "number",
                "description": "Enter the longitude of the building's location (e.g. the entrance area) for\neasier visualization in map services (e.g. Google Maps).",
                "format": "decimal",
                "nullable": true
              },
              "MainUsableAream": {
                "type": "number",
                "description": "Enter the planned value of the main usable area of the building.",
                "format": "decimal",
                "nullable": true
              },
              "MaterialHeatingPipes": {
                "type": "string",
                "description": "Enter the material of the installed heating pipes.",
                "maxLength": 20,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter the full building name We recommend that you use a name indicating the\nfunction of the building (e.g., \"Headquarters Zhizschin Industries,\nShanghai\").",
                "maxLength": 50,
                "nullable": true
              },
              "NavvisCode": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 50,
                "nullable": true
              },
              "NetAreaTarget": {
                "type": "number",
                "description": "Enter the target value of the building’s gross floor area.",
                "format": "decimal",
                "nullable": true
              },
              "NetVolumem": {
                "type": "number",
                "description": "Enter the planned value of the net room content of the building.",
                "format": "decimal",
                "nullable": true
              },
              "Number": {
                "type": "string",
                "description": "Enter the number of the building. The number entered here will be part of the\nbuilding code generated by the system.",
                "maxLength": 10,
                "nullable": true
              },
              "NumberOfConnections": {
                "type": "number",
                "description": "Enter the number of available water connections.",
                "format": "decimal",
                "nullable": true
              },
              "NumberOfFreightelevators": {
                "type": "number",
                "description": "Enter the number of freight elevators available.",
                "format": "decimal",
                "nullable": true
              },
              "NumberOfHeatingcircuits": {
                "type": "number",
                "description": "Enter the number of existing heating circuits.",
                "format": "decimal",
                "nullable": true
              },
              "NumberOfHouseconnections": {
                "type": "number",
                "description": "Enter the number of existing house connections.",
                "format": "decimal",
                "nullable": true
              },
              "NumberOfPassengerlifts": {
                "type": "number",
                "description": "Enter the number of passenger lifts available.",
                "format": "decimal",
                "nullable": true
              },
              "NumberOfTransformerstations": {
                "type": "number",
                "description": "Enter the number of existing transformer stations.",
                "format": "decimal",
                "nullable": true
              },
              "ObjectOwnerName": {
                "type": "string",
                "description": "Enter the name of the person responsible for the object.",
                "maxLength": 50,
                "nullable": true
              },
              "PercentageOfOpcAdministrationFee": {
                "type": "number",
                "description": "Indication of the administrator fee as a percentage of the operating costs.",
                "format": "decimal",
                "nullable": true
              },
              "PlannedOutline": {
                "type": "string",
                "description": "Indication of the date when the demolition of the house is planned, if\nnecessary.",
                "format": "date-time",
                "nullable": true
              },
              "Provisioning": {
                "type": "string",
                "description": "Information on the type of heat supply.",
                "maxLength": 8,
                "nullable": true
              },
              "RainwaterConnections": {
                "type": "number",
                "description": "Enter the number of existing rainwater connections.",
                "format": "decimal",
                "nullable": true
              },
              "Remark": {
                "type": "string",
                "description": "Enter information or comments about the building information.",
                "maxLength": 500,
                "nullable": true
              },
              "RemarkElectro": {
                "type": "string",
                "description": "Input of notes and remarks on the electrical connection.",
                "maxLength": 500,
                "nullable": true
              },
              "RemarkHeating": {
                "type": "string",
                "description": "Entry of notes or remarks on the heating system.",
                "maxLength": 500,
                "nullable": true
              },
              "RemarkMedia": {
                "type": "string",
                "description": "Input of notes or remarks on media supply.",
                "maxLength": 500,
                "nullable": true
              },
              "RemarkProtection": {
                "type": "string",
                "description": "Input of notes or remarks on the protective devices.",
                "maxLength": 500,
                "nullable": true
              },
              "RemarkRoof": {
                "type": "string",
                "description": "Enter notes or remarks about the roof.",
                "maxLength": 500,
                "nullable": true
              },
              "RemarkWater": {
                "type": "string",
                "description": "Enter notes or remarks on the water supply.",
                "maxLength": 500,
                "nullable": true
              },
              "RentableUntil": {
                "type": "string",
                "description": "Selection of the date up to which the building can be rented.",
                "format": "date-time",
                "nullable": true
              },
              "RentalGuaranteeForrentalagreementno": {
                "type": "string",
                "description": "Selection of the rental contract for the entire house for which a rental\nguarantee has been agreed.",
                "maxLength": 50,
                "nullable": true
              },
              "RentalGuaranteePriceperm": {
                "type": "number",
                "description": "Enter the price per m² agreed under the rental guarantee, which the manager\n(tenant of the entire house) receives from the owner, irrespective of whether\nthe manager was able to sublet the space.",
                "format": "decimal",
                "nullable": true
              },
              "RoofCladding": {
                "type": "string",
                "description": "Enter the type of roofing.",
                "maxLength": 50,
                "nullable": true
              },
              "RoofStructure": {
                "type": "string",
                "description": "Enter the type of roof construction (flat roof, monopitch roof, etc.).",
                "maxLength": 50,
                "nullable": true
              },
              "Street": {
                "type": "string",
                "description": "Enter the name of the street in which the building is located.",
                "maxLength": 50,
                "nullable": true
              },
              "StreetNumber": {
                "type": "string",
                "description": "Enter the house number of the building.",
                "maxLength": 10,
                "nullable": true
              },
              "TargetGrossAreaTarget": {
                "type": "number",
                "description": "Enter the target value of the building’s gross floor area.",
                "format": "decimal",
                "nullable": true
              },
              "TargetGrossVolume": {
                "type": "number",
                "description": "If the building dimensions have been specified, the gross room contents can be\ncalculated from the dimensions.",
                "format": "decimal",
                "nullable": true
              },
              "TelephoneResponsibleFortheobject": {
                "type": "string",
                "description": "Enter the telephone number of the person responsible for the object.",
                "maxLength": 50,
                "nullable": true
              },
              "TemperatureSpread": {
                "type": "string",
                "description": "Enter the temperature spread of the heating circuit in degrees Celsius.",
                "maxLength": 7,
                "nullable": true
              },
              "TrafficArea": {
                "type": "number",
                "description": "Enter the planned value of the traffic area of the building.",
                "format": "decimal",
                "nullable": true
              },
              "TypeOfHeatdetection": {
                "type": "string",
                "description": "Enter the type of heat detection.",
                "maxLength": 9,
                "nullable": true
              },
              "TypeOfUse": {
                "type": "string",
                "description": "Selection of the type of building use",
                "maxLength": 40,
                "nullable": true
              },
              "UsefulArea": {
                "type": "number",
                "description": "Enter the planned value of the useful area of the building.",
                "format": "decimal",
                "nullable": true
              },
              "Width": {
                "type": "number",
                "description": "Enter the building width in meters.",
                "format": "decimal",
                "nullable": true
              },
              "YearOfConstruction": {
                "type": "string",
                "description": "Enter the year in which the building was constructed.",
                "maxLength": 50,
                "nullable": true
              },
              "ZipCode": {
                "type": "string",
                "description": "Enter the post code of the building.",
                "maxLength": 10,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Site": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SiteBase"
          },
          {
            "type": "object",
            "description": "Create data records for the different locations of your organization. These\nlocations represent locations of companies and branches and can be selected\nlater, for example in forms for buildings, in order to clearly determine their\nlocation. The \"Locations\" form shows the buildings already assigned to the\nlocation. This assignment of buildings cannot be changed here, but only in the\n\"Buildings\" form. When using eTASK. open spaces, the list of all parking spaces\nat the location is also displayed.",
            "additionalProperties": false,
            "properties": {
              "Documents": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        ]
      },
      "SiteBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Code",
              "DoNotCalculateOperatingCosts"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Country": {
                "type": "integer",
                "description": "Select the country of the location.",
                "format": "int32",
                "nullable": true
              },
              "HierarchicalLevel": {
                "type": "integer",
                "description": "Select the hierarchical level 3 of the location",
                "format": "int32",
                "nullable": true
              },
              "ManagerCompanyAddress": {
                "description": "To be texted by jens.coosmann@etask.de",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "ManagerContactPerson": {
                "description": "Select the administrator’s contact person.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "OwnerCompanyAddress": {
                "description": "Select the proprietor.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "OwnerContactPerson": {
                "description": "Select the proprietor’s contact person.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "PortfolioCategory": {
                "type": "integer",
                "description": "Select the portfolio category to which the present location belongs.",
                "format": "int32",
                "nullable": true
              },
              "PortfolioGroup": {
                "type": "integer",
                "description": "Select the portfolio cluster to which the location belongs.",
                "format": "int32",
                "nullable": true
              },
              "PortfolioType": {
                "type": "integer",
                "description": "Select the portfolio’s portfolio type to which the present location belongs.",
                "format": "int32",
                "nullable": true
              },
              "Buildings": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Building"
                }
              },
              "Code": {
                "type": "string",
                "description": "Enter an abbreviation for the location (e.g. an abbreviation for the location\nmade up of three letters; \"MUC\" for \"Munich\",\n\"BER\" for \"Berlin\"). The location's code forms the first\npart of the codes of all buildings, floors, rooms, and work stations situated at\nthe location.",
                "maxLength": 10,
                "minLength": 1
              },
              "DoNotCalculateOperatingCosts": {
                "type": "boolean",
                "description": "Indicates whether the operating costs for this site should not be calculated."
              },
              "CadastralRegisterNo": {
                "type": "string",
                "description": "Enter the location's cadastral register no.",
                "maxLength": 5,
                "nullable": true
              },
              "CadOid": {
                "type": "string",
                "description": "TRANSLATION MISSING",
                "maxLength": 18,
                "nullable": true
              },
              "City": {
                "type": "string",
                "description": "Enter the city from the location's main address.",
                "maxLength": 50,
                "nullable": true
              },
              "ContactPerson": {
                "type": "string",
                "description": "Enter the name of the main contact person of the location for all issues\ninvolving neighboring parties.",
                "maxLength": 50,
                "nullable": true
              },
              "CostCenter": {
                "type": "string",
                "description": "Enter the cost centers to be used for assessing the financial planning system.",
                "maxLength": 50,
                "nullable": true
              },
              "Email": {
                "type": "string",
                "description": "Enter the primary email address of the location.",
                "maxLength": 50,
                "nullable": true
              },
              "FloorSpaceRatio": {
                "type": "number",
                "description": "Enter the location’s floor space ratio.",
                "format": "decimal",
                "nullable": true
              },
              "IfcGlobalId": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 22,
                "nullable": true
              },
              "Latitude": {
                "type": "string",
                "description": "Enter the latitude of the location (e.g. the entrance area) for easier\nvisualization in map services (such as Google Maps).",
                "maxLength": 50,
                "nullable": true
              },
              "Longitude": {
                "type": "string",
                "description": "Enter the longitude of the location for easier visualization in map services\n(such as Google Maps).",
                "maxLength": 50,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter a detailed name for the location. The abbreviation entered here is the\nstart of the code for all buildings, rooms, floors and workstations created for\nthis location.",
                "maxLength": 50,
                "nullable": true
              },
              "Parcel": {
                "type": "string",
                "description": "Enter the name of the parcel on which the location is built.",
                "maxLength": 50,
                "nullable": true
              },
              "Phone1": {
                "type": "string",
                "description": "Enter the primary phone number of the location (main office).",
                "maxLength": 25,
                "nullable": true
              },
              "Phone2": {
                "type": "string",
                "description": "Enter an alternative phone number for the location.",
                "maxLength": 25,
                "nullable": true
              },
              "ProfitCenter": {
                "type": "string",
                "description": "Enter the profit center to be used for carrying out assessments in the financial\nplanning system.",
                "maxLength": 50,
                "nullable": true
              },
              "Remark": {
                "type": "string",
                "description": "Enter a comment or a note for recording more information about the location.",
                "maxLength": 1000,
                "nullable": true
              },
              "SiteCoverageIndex": {
                "type": "number",
                "description": "Enter the location’s site coverage index.",
                "format": "decimal",
                "nullable": true
              },
              "Street": {
                "type": "string",
                "description": "Enter the street name of the location. The street and house number should be\nentered one after the other (e.g. . \"North street 45\".",
                "maxLength": 50,
                "nullable": true
              },
              "TimeZone": {
                "type": "string",
                "description": "Time Zone",
                "maxLength": 50,
                "nullable": true
              },
              "ZipCode": {
                "type": "string",
                "description": "Enter the postal code of the location's main address.",
                "maxLength": 10,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Floor": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FloorBase"
          },
          {
            "type": "object",
            "description": "Use this form to manage the floors of the buildings by first assigning the\nbuilding in which the floor is located and then entering further information for\nidentifying the floor (name, level, area, etc.). Then assign all rooms on the\nfloor. If eTASK.CAD is also used, the floor plan is displayed in a new tab after\nclicking on the magnifying glass icon. In the \"CAD drawings\" area you can upload\nexisting CAD plans of the floor on the project side.",
            "additionalProperties": false,
            "properties": {
              "Documents": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        ]
      },
      "FloorBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Level"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Building": {
                "description": "Select the building in which the floor is located.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Building"
                  }
                ]
              },
              "BuildingPart": {
                "type": "integer",
                "description": "Select the part of the building in which the floor is located.",
                "format": "int32",
                "nullable": true
              },
              "SpacePool": {
                "type": "integer",
                "description": "Selecting the Pooled Space",
                "format": "int32",
                "nullable": true
              },
              "Rooms": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Room"
                }
              },
              "Level": {
                "type": "integer",
                "description": "Enter a number defining on which level of the building the floor is located. The\nlowest level (e.g. the basement) is always level \"1\". The floors in menu item\n\"Properties/CAD\" are also sorted according to the information entered here.",
                "format": "int32"
              },
              "Code": {
                "type": "string",
                "description": "Displays the floor code which is automatically generated from the code of the\nbuilding in which the floor is located.",
                "maxLength": 50,
                "nullable": true
              },
              "HeightNet": {
                "type": "number",
                "description": "Indication of the net storey height in meters.",
                "format": "decimal",
                "nullable": true
              },
              "HeightRelativeToReferenceHeight": {
                "type": "number",
                "description": "Distance from the zero height of the building to the top edge of the finished\nfloor on the ground floor in meters.",
                "format": "decimal",
                "nullable": true
              },
              "IfcGlobalId": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 22,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "maxLength": 50,
                "nullable": true
              },
              "NavvisCode": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 50,
                "nullable": true
              },
              "Number": {
                "type": "string",
                "description": "Enter a unique abbreviation for the story on which the floor is located (e.g.\n\"2nd\" for \"Second Floor\").",
                "maxLength": 10,
                "nullable": true
              },
              "SpaceGross": {
                "type": "number",
                "description": "Enter the floor's gross surface area in square meters.",
                "format": "decimal",
                "nullable": true
              },
              "SpacePerDesk": {
                "type": "number",
                "description": "Enter the standard space per work station on the present floor in square meters.",
                "format": "decimal",
                "nullable": true
              },
              "StoreyGrossHeight": {
                "type": "number",
                "description": "Indication of the gross floor height in metres.",
                "format": "decimal",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Room": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RoomBase"
          },
          {
            "type": "object",
            "description": "Manage data records for each individual room in the building to ensure complete\nspace management. Only the room area entered here influences the areas of floors\nand buildings. Spatial data sets are the basis for many other components of the\nFM portal and other eTASK products. They are used, for example, to make room\nbookings or to assign employees and objects to them. First select the floor on\nwhich the room is located. Then assign a room number and the space usage of the\nroom according to DIN 277 (or according to in-house standards) to each room. Add\ninformation on the settlement of space costs, the floor space of the room, and\nthe number of work centers available in the room. Then assign the current\nreservation (work center and employee) to the room. Upload a photo of the room\nand manage information on the structural condition of the room (flooring,\ntraffic load, etc.). Add one or more cost centers for the room and data to\ncommunication devices that are available in the room. Finally, you can create or\nview data records for objects in the room. When using eTASK.CAD, the room is\ndisplayed in the floor plan after clicking on the magnifying glass icon. When\nusing eTASK Furniture, all furniture in the room is displayed or added. The same\napplies when using eTASK.equipment/IT for the IT devices in the room. If eTASK.\ndefect management is connected, all construction defects found in the room are\nalso displayed.",
            "additionalProperties": false,
            "properties": {
              "Images": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Image"
                }
              },
              "Documents": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        ]
      },
      "RoomBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "CanBeHeated",
              "Daylight",
              "ElectricitySupply",
              "Elevator",
              "FalseCeiling",
              "FloorDrainage",
              "GuaranteedMinimumRent",
              "Lettable",
              "RentableInComplexContract",
              "Reservable"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "CeilingCovering": {
                "type": "integer",
                "description": "Select the ceiling covering.",
                "format": "int32",
                "nullable": true
              },
              "CompanyAddressOfOwner": {
                "description": "Select the owner of the room if different to the owner of the building.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "CostCenter": {
                "description": "If not building cost center",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              },
              "Floor": {
                "description": "Select the floor on which the room is located.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Floor"
                  }
                ]
              },
              "FloorCovering": {
                "type": "integer",
                "description": "Select the room's floor covering.",
                "format": "int32",
                "nullable": true
              },
              "InternalUsageType": {
                "type": "integer",
                "description": "Select the room usage type defined in-house.",
                "format": "int32",
                "nullable": true
              },
              "Landlord": {
                "description": "Select the lessor of the room.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "PrimaryUsageStatus": {
                "type": "integer",
                "description": "Select the primary usage status.",
                "format": "int32",
                "nullable": true
              },
              "ReservedForTenancyAgreement": {
                "type": "integer",
                "description": "Option to rent for",
                "format": "int32",
                "nullable": true
              },
              "RoomGroup": {
                "type": "integer",
                "description": "Select the room group to which the room belongs.",
                "format": "int32",
                "nullable": true
              },
              "SecondaryUsageStatus": {
                "type": "integer",
                "description": "Select the secondary usage status.",
                "format": "int32",
                "nullable": true
              },
              "SpaceAllocation": {
                "type": "integer",
                "description": "Select the higher level instance to which the room space is assigned and which\nshould be charged with the room costs (e.g. the costs for using a corridor on a\nfloor are split between all residents on that floor).",
                "format": "int32",
                "nullable": true
              },
              "SpaceCategory": {
                "type": "integer",
                "description": "Select the space type.",
                "format": "int32",
                "nullable": true
              },
              "SpaceServiceType": {
                "type": "integer",
                "description": "To be texted by jens.coosmann@etask.de",
                "format": "int32",
                "nullable": true
              },
              "SurchargeForActivityType": {
                "type": "integer",
                "description": "To be texted by jens.coosmann@etask.de",
                "format": "int32",
                "nullable": true
              },
              "Tenant": {
                "description": "Select the company which has leased the room.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "UsageTypeDin277": {
                "description": "Select the room usage type according to DIN 277-2.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Din277UsageType"
                  }
                ]
              },
              "WallCovering": {
                "type": "integer",
                "description": "Select the wall covering.",
                "format": "int32",
                "nullable": true
              },
              "CanBeHeated": {
                "type": "boolean",
                "description": "Indicate whether the room can be heated."
              },
              "Daylight": {
                "type": "boolean",
                "description": "Indicate whether the room is provided with daylight."
              },
              "ElectricitySupply": {
                "type": "boolean",
                "description": "Electricity Supply"
              },
              "Elevator": {
                "type": "boolean",
                "description": "Elevator?"
              },
              "FalseCeiling": {
                "type": "boolean",
                "description": "Please check this box if the room has a suspended ceiling."
              },
              "FloorDrainage": {
                "type": "boolean",
                "description": "Floor drainage"
              },
              "GuaranteedMinimumRent": {
                "type": "boolean",
                "description": "Guaranteed Minimum Rent"
              },
              "Lettable": {
                "type": "boolean",
                "description": "Indicate whether the room is lettable."
              },
              "RentableInComplexContract": {
                "type": "boolean",
                "description": "Rentable in complex manner?"
              },
              "Reservable": {
                "type": "boolean",
                "description": "Reservable?"
              },
              "Acoustics": {
                "type": "string",
                "description": "Enter information about the room's acoustics.",
                "maxLength": 50,
                "nullable": true
              },
              "AlternativeCode": {
                "type": "string",
                "description": "Enter an alternative code for the room if your company uses a different code\nsystem to the one allocated by FM-Portal.",
                "maxLength": 50,
                "nullable": true
              },
              "Area": {
                "type": "number",
                "description": "Enter the room's floor space in square meters. If using eTASK.CAD this field is\nautomatically filled in with the space data from Aperture Client.",
                "format": "decimal",
                "nullable": true
              },
              "Barcode": {
                "type": "string",
                "description": "If your company uses eTASK.Inventory, enter the barcode for the room.",
                "maxLength": 30,
                "nullable": true
              },
              "CadOid": {
                "type": "string",
                "description": "necessary for Aperture visualization",
                "maxLength": 18,
                "nullable": true
              },
              "CategoryDescription": {
                "type": "string",
                "description": "Category",
                "maxLength": 25,
                "nullable": true
              },
              "CeilingArea": {
                "type": "number",
                "description": "If the ceiling dimensions are specified, the area can be calculated\nautomatically.",
                "format": "decimal",
                "nullable": true
              },
              "CeilingAttributes": {
                "type": "string",
                "description": "Indication of ceiling attributes such as e.g. fire retardant, with fill etc.)",
                "maxLength": 50,
                "nullable": true
              },
              "CeilingDepth": {
                "type": "number",
                "description": "Indication of the ceiling length",
                "format": "decimal",
                "nullable": true
              },
              "CeilingLoadBearingCapacity": {
                "type": "number",
                "description": "Specification of the permissible ceiling load",
                "format": "decimal",
                "nullable": true
              },
              "CeilingMaterial": {
                "type": "string",
                "description": "Indication of the ceiling material",
                "maxLength": 50,
                "nullable": true
              },
              "CeilingSystem": {
                "type": "string",
                "description": "Indication of the ceiling system (e.g. removable)",
                "maxLength": 50,
                "nullable": true
              },
              "CeilingWidth": {
                "type": "number",
                "description": "Indication of ceiling width",
                "format": "decimal",
                "nullable": true
              },
              "Circumference": {
                "type": "number",
                "description": "Enter a value for the room’s circumference.",
                "format": "decimal",
                "nullable": true
              },
              "CleanlinessClass": {
                "type": "string",
                "description": "Cleanliness Class",
                "maxLength": 3,
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "Displays the room code which is automatically generated by the system when saved\nfor the first time. The room code consists of the code for the selected floor on\nwhich the room is located as well as the room number.",
                "maxLength": 50,
                "nullable": true
              },
              "CurrentCondition": {
                "type": "string",
                "description": "Current condition",
                "maxLength": 50,
                "nullable": true
              },
              "DateOfLaying": {
                "type": "string",
                "description": "Date of laying",
                "format": "date-time",
                "nullable": true
              },
              "DescriptionOfLocation": {
                "type": "string",
                "description": "Description of Location",
                "maxLength": 50,
                "nullable": true
              },
              "EscapeRoute": {
                "type": "integer",
                "description": "Escape Route",
                "nullable": true
              },
              "FloorStructure": {
                "type": "string",
                "description": "Floor structure",
                "maxLength": 50,
                "nullable": true
              },
              "HeatableSurfacem178": {
                "type": "number",
                "description": "Heatable Surface [m²]",
                "format": "decimal",
                "nullable": true
              },
              "IfcGlobalId": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 22,
                "nullable": true
              },
              "ImputedAreaForSpaceDistribution": {
                "type": "number",
                "description": "Imputed Area for Space Distribution",
                "format": "decimal",
                "nullable": true
              },
              "LeasePricePerSquaremeter": {
                "type": "number",
                "description": "Enter the lease price of the room per square meter.",
                "format": "decimal",
                "nullable": true
              },
              "LightExposureMax": {
                "type": "string",
                "description": "Enter the maximum lighting in lux.",
                "maxLength": 50,
                "nullable": true
              },
              "LightExposureMin": {
                "type": "string",
                "description": "Enter the minimum lighting in lux.",
                "maxLength": 50,
                "nullable": true
              },
              "LimitAirPurity": {
                "type": "string",
                "description": "Enter the maximum limit of air purity in pollution particles per cubic meter.",
                "maxLength": 50,
                "nullable": true
              },
              "LimitHumidity": {
                "type": "string",
                "description": "Enter the maximum limit for relative humidity as a percentage.",
                "maxLength": 50,
                "nullable": true
              },
              "LimitNoiseLevel": {
                "type": "string",
                "description": "Enter the maximum noise level in dBA.",
                "maxLength": 50,
                "nullable": true
              },
              "LoadBearingCapacity": {
                "type": "number",
                "description": "Indication of the carrying capacity of the floor",
                "format": "decimal",
                "nullable": true
              },
              "MaterialNumber": {
                "type": "string",
                "description": "Enter the material number",
                "maxLength": 25,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "maxLength": 50,
                "nullable": true
              },
              "NavvisCode": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 50,
                "nullable": true
              },
              "NetRoomSurface": {
                "type": "number",
                "description": "Net Room Surface [m²]",
                "format": "decimal",
                "nullable": true
              },
              "NumberOnDoorplate": {
                "type": "string",
                "description": "Enter the room number on an already existing door plate if this deviates from\nthe selected system for the building as presented in the room code.",
                "maxLength": 23,
                "nullable": true
              },
              "OptionToRentUntil": {
                "type": "string",
                "description": "Option to rent until",
                "format": "date-time",
                "nullable": true
              },
              "PolygonArea": {
                "type": "number",
                "description": "CAD polygon space",
                "format": "decimal",
                "nullable": true
              },
              "QuantityOfWorkplaces": {
                "type": "integer",
                "description": "Enter a number for the amount of work stations available in the room.",
                "format": "int32",
                "nullable": true
              },
              "RawCeilingHeight": {
                "type": "number",
                "description": "Indication of the raw ceiling height",
                "format": "decimal",
                "nullable": true
              },
              "Remark": {
                "type": "string",
                "description": "Enter comments or information about the room.",
                "maxLength": 50,
                "nullable": true
              },
              "Remark1": {
                "type": "string",
                "description": "Remarks",
                "maxLength": 500,
                "nullable": true
              },
              "Remark5": {
                "type": "string",
                "description": "Here you can enter additional notes and remarks on the ceiling.",
                "maxLength": 500,
                "nullable": true
              },
              "Remark6": {
                "type": "string",
                "description": "Comments",
                "maxLength": 500,
                "nullable": true
              },
              "RentableArea": {
                "type": "number",
                "description": "Record the room’s rentable area here.",
                "format": "decimal",
                "nullable": true
              },
              "RentableAreaFactor": {
                "type": "number",
                "description": "Enter the factor used to calculate the rentable area. The basis for the\ncalculation is the room's surface area.",
                "format": "decimal",
                "nullable": true
              },
              "RentableAreaWithinTheRentableZone": {
                "type": "number",
                "description": "Rentable Area within the Rentable Zone [m²]",
                "format": "decimal",
                "nullable": true
              },
              "RoomHeight": {
                "type": "number",
                "description": "Room Height [m]",
                "format": "decimal",
                "nullable": true
              },
              "RoomNumber": {
                "type": "string",
                "description": "Enter the number of the room.",
                "maxLength": 10,
                "nullable": true
              },
              "RoomType": {
                "type": "string",
                "description": "Room Type",
                "maxLength": 50,
                "nullable": true
              },
              "RoomVolume": {
                "type": "number",
                "description": "Room Volume [m³]",
                "format": "decimal",
                "nullable": true
              },
              "StandardNoOfpowersockets": {
                "type": "number",
                "description": "Standard No. of Power Sockets",
                "format": "decimal",
                "nullable": true
              },
              "SubstractedAream178": {
                "type": "number",
                "description": "Enter the subtraction area used as the polygon area subtraction to determine the\nfloor space.",
                "format": "decimal",
                "nullable": true
              },
              "SuperficialLoad": {
                "type": "number",
                "description": "Indication of the superficial load of the floor",
                "format": "decimal",
                "nullable": true
              },
              "TargetTemperatureSummer": {
                "type": "string",
                "description": "Enter the room's target temperature during the summer (May to September) in\ndegrees Celsius.",
                "maxLength": 50,
                "nullable": true
              },
              "TargetTemperatureWinter": {
                "type": "string",
                "description": "Enter the room's target temperature during the winter (October to April) in\ndegrees Celsius.",
                "maxLength": 50,
                "nullable": true
              },
              "TenantId": {
                "type": "string",
                "description": "Tenant ID",
                "maxLength": 10,
                "nullable": true
              },
              "UnusedArea": {
                "type": "number",
                "description": "Provide the unassigned space of the room in sqm.",
                "format": "double",
                "nullable": true
              },
              "VentilationRate": {
                "type": "string",
                "description": "Enter the air change rate of the room.",
                "maxLength": 50,
                "nullable": true
              },
              "WallArea": {
                "type": "number",
                "description": "Indication of the wall area",
                "format": "decimal",
                "nullable": true
              },
              "WallMaterial": {
                "type": "string",
                "description": "Specifies the material of the wall.",
                "maxLength": 50,
                "nullable": true
              },
              "WorkingLoad": {
                "type": "string",
                "description": "Enter the maximum working load in kilograms per square meter.",
                "maxLength": 50,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Din277UsageType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Din277UsageTypeBase"
          },
          {
            "type": "object",
            "description": "Create data records for usage types of building areas according to DIN 277.\nThese data records can later be selected in the \"Rooms\" form and can also be\nfurther subdivided by the data records in the \"Internal usage types\" list.",
            "additionalProperties": false
          }
        ]
      },
      "Din277UsageTypeBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "UsageGroup": {
                "type": "integer",
                "description": "Select the usage group according to DIN 277.",
                "format": "int32",
                "nullable": true
              },
              "Rooms": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Room"
                }
              },
              "BackgroundColor": {
                "type": "integer",
                "description": "Enter the number of the background color in CAD visualization (from\n\"0\" to \"119\").",
                "format": "int32",
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "Enter the abbreviation for the usage type according to DIN 277 (e.g.,\n\"2.1\" for \"office space\").",
                "maxLength": 10,
                "nullable": true
              },
              "ForegroundColor": {
                "type": "integer",
                "description": "Enter the number of the foreground color in CAD visualization (from\n\"0\" to \"119\").",
                "format": "int32",
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter the full name of the usage type according to DIN 277 (e.g., \"office\nspace\").",
                "maxLength": 100,
                "nullable": true
              },
              "Pattern": {
                "type": "integer",
                "description": "Enter the number of the pattern in CAD visualization (from \"1\" to\n\"77\").",
                "format": "int32",
                "nullable": true
              },
              "UsageGroupCode": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 10,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Overtime": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OvertimeBase"
          },
          {
            "type": "object",
            "description": "Manage the overtime hours paid out to employees of your company.",
            "additionalProperties": false
          }
        ]
      },
      "OvertimeBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Employee": {
                "description": "Employee",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Employee"
                  }
                ]
              },
              "ApplicationDate": {
                "type": "string",
                "description": "Application date",
                "format": "date-time",
                "nullable": true
              },
              "Hours": {
                "type": "number",
                "description": "Hours",
                "format": "decimal",
                "nullable": true
              },
              "PayoutDate": {
                "type": "string",
                "description": "Date of payment",
                "format": "date-time",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "WeeklyWorkingTime": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WeeklyWorkingTimeBase"
          },
          {
            "type": "object",
            "description": "-- SUMMARY MISSING --",
            "additionalProperties": false
          }
        ]
      },
      "WeeklyWorkingTimeBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Employee",
              "AnnualVacationDays",
              "NumberOfHours",
              "ValidFrom"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Employee": {
                "description": "Employee",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Employee"
                  }
                ]
              },
              "AnnualVacationDays": {
                "type": "number",
                "description": "Vacation days",
                "format": "decimal"
              },
              "NumberOfHours": {
                "type": "number",
                "description": "Hours per weeks",
                "format": "decimal"
              },
              "ValidFrom": {
                "type": "string",
                "description": "Valid from",
                "format": "date-time",
                "minLength": 1
              },
              "ValidTo": {
                "type": "string",
                "description": "Valid till",
                "format": "date-time",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "PersonBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Inactive",
              "Locked",
              "PasswordNeverExpires"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "CostCenterPrimary": {
                "description": "Select the cost center used to settle the costs of the employee's services.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              },
              "CostCenterSecondary": {
                "description": "Select a second cost center used to settle the costs of the employee's services.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              },
              "Department": {
                "type": "integer",
                "description": "Select the department in which the employee works.",
                "format": "int32",
                "nullable": true
              },
              "PersonType": {
                "type": "integer",
                "description": "Select the personnel type assigned to the employee.",
                "format": "int32",
                "nullable": true
              },
              "Salutation": {
                "description": "Select the form of address to be used for this employee.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Salutation"
                  }
                ]
              },
              "Site": {
                "description": "Displays the location in which the employee works.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Site"
                  }
                ]
              },
              "SourceOfPersonData": {
                "description": "Select the origin of the personnel data. \"SAP\" means that the personnel data is\nregularly updated via eTASK.PersonnelDataImport. This parameter influences the\npersonnel data import in general after each FM-Portal configuration. \"Local\"\nmeans that the personnel data is only managed in FM-Portal.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DataSourcesOfPersonData"
                  }
                ]
              },
              "Superior": {
                "description": "Selection of the employee's superior.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "WorkflowTicket": {
                "description": "-- SUMMARY MISSING --",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Ticket"
                  }
                ]
              },
              "Inactive": {
                "type": "boolean",
                "description": "Indicate whether the employee is currently inactive."
              },
              "Locked": {
                "type": "boolean",
                "description": "If this check mark is set, the employee can no longer log on to the eTASK\nportal. Depending on the system configuration, the check mark can be set\nautomatically if the employee has logged on several times without success."
              },
              "PasswordNeverExpires": {
                "type": "boolean",
                "description": "Specify whether the employee's local password is to be permanently valid or\nwhether it runs according to the system configuration rules."
              },
              "BirthDate": {
                "type": "string",
                "description": "Select the employee's date of birth from the adjacent date picker.",
                "format": "date-time",
                "nullable": true
              },
              "DoorLabelText": {
                "type": "string",
                "description": "Here you can specify an additional text that can be printed on a door label in\naddition to the name.",
                "maxLength": 255,
                "nullable": true
              },
              "EMail": {
                "type": "string",
                "description": "Enter the employee's email address.",
                "maxLength": 96,
                "nullable": true
              },
              "FaxNumber": {
                "type": "string",
                "description": "Displays the fax number on which the employee can be reached during the day. To\nchange the number, set the required number to the first position further below\nin the \"Contact data\" information area.",
                "maxLength": 50,
                "nullable": true
              },
              "GivenName": {
                "type": "string",
                "description": "Enter the employee's first name.",
                "maxLength": 50,
                "nullable": true
              },
              "HiringDate": {
                "type": "string",
                "description": "Select the employee's employment start date.",
                "format": "date-time",
                "nullable": true
              },
              "LdapImportIdentifier": {
                "type": "string",
                "description": "This column is used for the adjustment during the LDAP import of a user.",
                "maxLength": 256,
                "nullable": true
              },
              "LeavingDate": {
                "type": "string",
                "description": "Select the employee's employment end date.",
                "format": "date-time",
                "nullable": true
              },
              "Location": {
                "type": "string",
                "description": "Enter the name of the city in which the staff member lives.",
                "maxLength": 150,
                "nullable": true
              },
              "LoginFailed": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "LoginName": {
                "type": "string",
                "description": "Enter the user name which the employee should use to log onto FM-Portal.",
                "maxLength": 50,
                "nullable": true
              },
              "MobileNumber": {
                "type": "string",
                "description": "Displays the mobile phone number on which the employee can be reached during the\nday. To change the number, set the required number to the first position further\nbelow in the \"Contact data\" information area.",
                "maxLength": 50,
                "nullable": true
              },
              "NumerOfFailedLoginAttempts": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "Password": {
                "type": "string",
                "description": "Set an option which enables the password used by the employee to log onto\nFM-Portal to be kept or changed.",
                "maxLength": 255,
                "nullable": true
              },
              "PasswordExpiresOn": {
                "type": "string",
                "description": "This entry can be used to limit the validity of a password, regardless of your\nsystem configuration settings.",
                "format": "date-time",
                "nullable": true
              },
              "PersonnelNumberPrimary": {
                "type": "string",
                "description": "Enter the employee's personnel number.",
                "maxLength": 50,
                "nullable": true
              },
              "PersonnelNumberSecondary": {
                "type": "string",
                "description": "Enter the employee's CPID.",
                "maxLength": 50,
                "nullable": true
              },
              "PhoneNumber": {
                "type": "string",
                "description": "Displays the landline on which the employee can be reached during the day. To\nchange the number, set the required number to the first position further below\nin the \"Contact data\" information area.",
                "maxLength": 50,
                "nullable": true
              },
              "PhoneNumberPrivate": {
                "type": "string",
                "description": "Enter the staff member's private phone number.",
                "maxLength": 20,
                "nullable": true
              },
              "Pseudonym": {
                "type": "string",
                "description": "The employee's pseudonym can be entered here if, for example, he or she uses a\nstage name or is not recorded in the personnel database with his or her call\nname.",
                "maxLength": 100,
                "nullable": true
              },
              "Remark": {
                "type": "string",
                "description": "Enter a comment about the employee.",
                "maxLength": 255,
                "nullable": true
              },
              "SocialSecurityNumber": {
                "type": "string",
                "description": "Enter the employee's social security number.",
                "maxLength": 50,
                "nullable": true
              },
              "StreetAddress": {
                "type": "string",
                "description": "Enter the street address and street number of the staff member's home address.",
                "maxLength": 150,
                "nullable": true
              },
              "SurName": {
                "type": "string",
                "description": "Enter the employee's surname.",
                "maxLength": 50,
                "nullable": true
              },
              "Title": {
                "type": "string",
                "description": "Enter the employee's title (e.g., \"PhD\").",
                "maxLength": 50,
                "nullable": true
              },
              "ZipCode": {
                "type": "string",
                "description": "Enter the postal code of the staff member's home address.",
                "maxLength": 50,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Salutation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SalutationBase"
          },
          {
            "type": "object",
            "description": "This list contains all salutatory texts that can be defined as salutations for\nan employee in the \"Personnel\" form. These salutatory texts are already included\nin the delivery of eTASK.FM Portal.",
            "additionalProperties": false
          }
        ]
      },
      "SalutationBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "FormOfAddress": {
                "type": "string",
                "description": "Enter the address text (e.g., \"Mrs.\").",
                "maxLength": 50,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "DataSourcesOfPersonData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataSourcesOfPersonDataBase"
          },
          {
            "type": "object",
            "description": "Manage data origins using this form. Enter various sources of personnel data\nhere if they are imported by a third party system.",
            "additionalProperties": false
          }
        ]
      },
      "DataSourcesOfPersonDataBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "SourceName": {
                "type": "string",
                "maxLength": 50,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Ticket": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TicketBase"
          },
          {
            "type": "object",
            "description": "Workflow tickets are used to store identification, status and history data for a\nrun of any workflow. Each workflow ticket is assigned a unique system-wide\nticket number. View the data of a workflow run in this form.",
            "additionalProperties": false
          }
        ]
      },
      "TicketBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "ServiceStep",
              "Workflow",
              "WorkflowRole",
              "TicketCreateDate",
              "TicketName",
              "TicketNo",
              "WorkflowStartDate"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "ServiceStep": {
                "type": "integer",
                "description": "Displays the current workflow step of the workflow ticket.",
                "format": "int32"
              },
              "Workflow": {
                "type": "integer",
                "description": "Displays the name of the workflow ticket.",
                "format": "int32"
              },
              "WorkflowRole": {
                "type": "integer",
                "description": "Displays the workflow role currently responsible for the workflow ticket.",
                "format": "int32"
              },
              "ServiceTickets": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ServiceTicket"
                }
              },
              "TicketCreateDate": {
                "type": "string",
                "description": "Displays the date on which the data record managed by the workflow was created\non the workflow webform.",
                "format": "date-time",
                "minLength": 1
              },
              "TicketName": {
                "type": "string",
                "description": "Displays the name of the workflow ticket.",
                "maxLength": 500,
                "minLength": 1
              },
              "TicketNo": {
                "type": "string",
                "description": "Displays the ticket number of the workflow run.",
                "maxLength": 18,
                "minLength": 1
              },
              "WorkflowStartDate": {
                "type": "string",
                "description": "Displays the date on which the workflow run was started.",
                "format": "date-time",
                "minLength": 1
              },
              "PlannedFinishOfworkflow": {
                "type": "string",
                "description": "Displays the date on which the workflow should be completed.",
                "format": "date-time",
                "nullable": true
              },
              "WorkflowCompletedOn": {
                "type": "string",
                "description": "Displays the date on which the workflow run ended.",
                "format": "date-time",
                "nullable": true
              },
              "WorkflowTable": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 50,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "ServiceTicket": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceTicketBase"
          },
          {
            "type": "object",
            "description": "eTASK.service ticket allows you to order services (e.g. repairs, special\ncleaning or other freely definable services) and manage their execution within a\nspecified framework. The user selects the category and - if available - the\nsubcategory of his request and describes this with a freely definable text.\nOptionally, requests for other persons and buildings can also be entered. After\nsaving the request, you can still upload a document or add a comment at any\ntime. The service request created is forwarded as a ticket to the group\nresponsible for this category in the selected building. Service tickets can be\nretrieved at any time via the service list of the eTASK.FM portal, depending on\nthe read rights of the logged in user.",
            "additionalProperties": false,
            "properties": {
              "Documents": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "Annotations": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Annotations"
                  }
                ]
              }
            }
          }
        ]
      },
      "ServiceTicketBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Requestor",
              "ServiceTicketCategory",
              "Description",
              "ReportingDate",
              "Uid",
              "WorkTimeUndercut"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Asset": {
                "type": "integer",
                "description": "Affected object",
                "format": "int32",
                "nullable": true
              },
              "Building": {
                "description": "Apllicants building",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Building"
                  }
                ]
              },
              "CostCenter": {
                "description": "Cost Center",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              },
              "MessageByEmail": {
                "type": "integer",
                "description": "To be texted by klaus.aengenvoort@etask.de",
                "format": "int32",
                "nullable": true
              },
              "Move": {
                "type": "integer",
                "description": "To be texted by klaus.aengenvoort@etask.de",
                "format": "int32",
                "nullable": true
              },
              "OtherBuilding": {
                "description": "Deviating building (from applicants building)",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Building"
                  }
                ]
              },
              "OtherPerson": {
                "description": "Deviating applicant",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "OtherRoom": {
                "description": "Selection of the alternative room if the service is requested for someone else\nor if the service is to be performed in a room in which the requester does not\nhave his or her work center.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Room"
                  }
                ]
              },
              "Requestor": {
                "description": "Applicant",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "RequestorCostCenter": {
                "description": "Selection of the cost center via which the service ticket is to be billed.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              },
              "ResonsiblePerson": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "Room": {
                "description": "Affected room",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Room"
                  }
                ]
              },
              "ServiceTicketCategory": {
                "description": "Category",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Category"
                  }
                ]
              },
              "ServiceTicketPriority": {
                "description": "Priority",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Priority"
                  }
                ]
              },
              "SubCategory": {
                "description": "Sub-Category",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SubCategory"
                  }
                ]
              },
              "UserGroup": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "WorkflowTicket": {
                "description": "Ticket no.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Ticket"
                  }
                ]
              },
              "WorkOrder": {
                "type": "integer",
                "description": "Corresponding maintenance order",
                "format": "int32",
                "nullable": true
              },
              "Description": {
                "type": "string",
                "description": "Description",
                "maxLength": 4000,
                "minLength": 1
              },
              "ReportingDate": {
                "type": "string",
                "description": "Reporting date",
                "format": "date-time",
                "minLength": 1
              },
              "Uid": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "format": "guid",
                "minLength": 1
              },
              "WorkTimeUndercut": {
                "type": "boolean",
                "description": "-- SUMMARY MISSING --"
              },
              "DesiredDeliveryDate": {
                "type": "string",
                "description": "Enter a desired delivery date[DD.MM.YYYYY] and a desired delivery time[hh:mm].",
                "format": "date-time",
                "nullable": true
              },
              "TicketNumber": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 18,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Category": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CategoryBase"
          },
          {
            "type": "object",
            "description": "Enter here the names fu¨r and the service categories you want to offer the\nservice ticket to u¨ber (e.g. \"Cleaning\"). Then add a group of people to be\nresponsible for processing the service tickets in this category. If you want to\nexpand the category further, add a sub-category (e.g. \"Window cleaning\").",
            "additionalProperties": false
          }
        ]
      },
      "CategoryBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "SubCategories": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/SubCategory"
                }
              },
              "Classification": {
                "type": "integer",
                "description": "Classification",
                "format": "int32",
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "Enter an abbreviation for the service category.",
                "maxLength": 50,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter the full name for the service category.",
                "maxLength": 100,
                "nullable": true
              },
              "Position": {
                "type": "integer",
                "description": "Position",
                "format": "int32",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "SubCategory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubCategoryBase"
          },
          {
            "type": "object",
            "description": "Here you can further subdivide the categories created for service tickets. For\neach category, you can define any number of subcategories, all of which are to\nbe handled by the same responsible group, e.g. subcategories \"Replace lamps\" and\n\"Seal windows\" in the category \"Caretaker\".",
            "additionalProperties": false
          }
        ]
      },
      "SubCategoryBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "ServiceTicketCategory": {
                "description": "Displays the service category in which this sub-category is available.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Category"
                  }
                ]
              },
              "Code": {
                "type": "string",
                "description": "Enter an abbreviation for the sub-category.",
                "maxLength": 50,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter the full name for the sub-category.",
                "maxLength": 100,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Priority": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriorityBase"
          },
          {
            "type": "object",
            "description": "At this point, define priorities that a contractor can assign, e.g. \"high\",\n\"medium\" or \"low\". Avoid numerical priorities where the applicant cannot see\nwhether \"1\" is high or low.",
            "additionalProperties": false
          }
        ]
      },
      "PriorityBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Code": {
                "type": "string",
                "description": "Enter an abbreviation for the priority.",
                "maxLength": 50,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter the full name for the priority.",
                "maxLength": 100,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Exception": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Message": {
            "type": "string",
            "nullable": true
          },
          "InnerException": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Exception"
              }
            ]
          },
          "StackTrace": {
            "type": "string",
            "nullable": true
          },
          "Source": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Substitute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubstituteBase"
          },
          {
            "type": "object",
            "description": "This form can be used to determine who can represent which person, in which\nperiod and with what authorization.",
            "additionalProperties": false
          }
        ]
      },
      "SubstituteBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Active",
              "DateFrom"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "SubstitutedPerson": {
                "description": "-- SUMMARY MISSING --",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "SubstitutingPerson": {
                "description": "-- SUMMARY MISSING --",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "Active": {
                "type": "boolean",
                "description": "-- SUMMARY MISSING --"
              },
              "DateFrom": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "minLength": 1
              },
              "DateTo": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              }
            }
          }
        ]
      },
      "RentalMonth": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RentalMonthBase"
          },
          {
            "type": "object",
            "description": "This list contains the months provided by the system (day, number of\ndays/month).",
            "additionalProperties": false
          }
        ]
      },
      "RentalMonthBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "DaysInMonth",
              "FirstDayMonth",
              "LastDayMonth",
              "Month"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "DaysInMonth": {
                "type": "number",
                "description": "[de]Tage",
                "format": "decimal"
              },
              "FirstDayMonth": {
                "type": "string",
                "description": "[de]Von",
                "format": "date-time",
                "minLength": 1
              },
              "LastDayMonth": {
                "type": "string",
                "description": "[de]Bis",
                "format": "date-time",
                "minLength": 1
              },
              "Month": {
                "type": "string",
                "description": "[de]Monat",
                "maxLength": 7,
                "minLength": 1
              },
              "MonthName": {
                "type": "string",
                "description": "[de]Name",
                "maxLength": 15,
                "nullable": true
              },
              "Vat": {
                "type": "number",
                "description": "-- SUMMARY MISSING --",
                "format": "decimal",
                "nullable": true
              },
              "VatReduced": {
                "type": "number",
                "description": "-- SUMMARY MISSING --",
                "format": "decimal",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "EtaskEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EtaskEntityBase"
          },
          {
            "type": "object",
            "description": "This list represents a directory of the available database tables in the FM\nportal.",
            "additionalProperties": false
          }
        ]
      },
      "EtaskEntityBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "CanBeInventoried",
              "Name",
              "ObjectExplorer",
              "Obsolete",
              "OrderOfDataUpdate",
              "TranslationMissing",
              "Type",
              "UpdateSettings"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Namespace": {
                "description": "To be texted by jens.coosmann@etask.de",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Application"
                  }
                ]
              },
              "ParentEntity": {
                "description": "Displays the UID of the higher level pages of the table.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EtaskEntity"
                  }
                ]
              },
              "CanBeInventoried": {
                "type": "boolean",
                "description": "Indicates whether the data record in the table can be inventoried using\neTASK.Inventory."
              },
              "Name": {
                "type": "string",
                "description": "Displays he table's table name.",
                "maxLength": 50,
                "minLength": 1
              },
              "ObjectExplorer": {
                "type": "boolean",
                "description": "Indicates whether the table is an object table included in Object Explorer."
              },
              "Obsolete": {
                "type": "boolean",
                "description": "To be texted by jens.coosmann@etask.de"
              },
              "OrderOfDataUpdate": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32"
              },
              "TranslationMissing": {
                "type": "integer",
                "description": "TRANSLATION MISSING",
                "format": "int32"
              },
              "Type": {
                "type": "string",
                "description": "Displays the page type. There are six types. \"Root\" is the root\ndirectory of FM-Portal. \"Node\" is a page which is only used as nodes\nand which does not refer to any content. \"Table\" refers to a table.\n\"Page\" is a page containing configurable content (the contents are set\nin the respective sections). \"Wizard\" refers to a Wizard.\n\"VWSLink\" contains a link to Aperture Visual Web Solutions content.",
                "maxLength": 10,
                "minLength": 1
              },
              "UpdateSettings": {
                "type": "integer",
                "description": "Displays whether the table data should be taken over onto the customer server by\ndemo.etask if a new customer portal is set up. On delivery, eTASK transfers\nFM-Portal to demo.etask.de on the customer server. This means that the contents\nof specified tables are also delivered. However, other tables are emptied prior\nto delivery. Value \"1\" in this field means that the table’s data is delivered."
              },
              "Configuration": {
                "type": "string",
                "description": "Displays the XML configuration of the table (TableConfig) in plain text.",
                "nullable": true
              },
              "CshKeyOftable": {
                "type": "string",
                "description": "Displays the CSH-Key for help with the table. This key is not currently used. In\nthe past, it was used as a reference by the table’s webform to an external help\nsystem which was replaced by the portal’s own system.",
                "maxLength": 255,
                "nullable": true
              },
              "CshKeyOfwebform": {
                "type": "string",
                "description": "Displays the CSH-Key for help with the webform. This key is not currently used.\nIn the past, it was used as a reference by the table’s webform to an external\nhelp system which was replaced by the portal’s own system.",
                "maxLength": 255,
                "nullable": true
              },
              "Description": {
                "type": "string",
                "description": "Displays the menu path in which the table can be found.",
                "maxLength": 255,
                "nullable": true
              },
              "SystemName": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 255,
                "nullable": true
              },
              "XmlConfigurationOfpage": {
                "type": "string",
                "description": "Displays the XML configuration of the table page (PageConfig) in plain text.",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              }
            }
          }
        ]
      },
      "Application": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationBase"
          },
          {
            "type": "object",
            "description": "The abbreviations of the FM modules are assigned to their complete names via\nthis portal-internal administration table. Note: The data records may only be\nchanged by system administrators. Every change can lead to system-wide\ncomplications!",
            "additionalProperties": false
          }
        ]
      },
      "ApplicationBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "ApplicationName",
              "Code",
              "Obsolete"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "EtaskEntities": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/EtaskEntity"
                }
              },
              "ApplicationName": {
                "type": "string",
                "description": "FM module name.",
                "maxLength": 50,
                "minLength": 1
              },
              "Code": {
                "type": "string",
                "description": "FM module abbreviation.",
                "maxLength": 4,
                "minLength": 1
              },
              "Obsolete": {
                "type": "boolean",
                "description": "To be texted by jens.coosmann@etask.de"
              },
              "Description": {
                "type": "string",
                "description": "FM module description.",
                "maxLength": 1000,
                "nullable": true
              },
              "SqlFolder": {
                "type": "string",
                "description": "SQL Folder",
                "maxLength": 255,
                "nullable": true
              },
              "SystemName": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 255,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "SystemConfiguration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SystemConfigurationBase"
          },
          {
            "type": "object",
            "description": "This is where the individual system configuration is managed centrally within\nthe FM portal. The available configuration values can be retrieved clearly using\nthe ConfigCheck report. ATTENTION: This list strongly influences the\nfunctionality of the FM portal. End users are therefore not allowed to make any\nchanges.",
            "additionalProperties": false
          }
        ]
      },
      "SystemConfigurationBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Project",
              "ConfigurationType",
              "ConfigurationVariable",
              "dekennwort",
              "ReadOnly"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Project": {
                "type": "string",
                "description": "Project",
                "format": "guid",
                "minLength": 1
              },
              "ConfigurationType": {
                "type": "string",
                "description": "Displays the type of configuration parameter.",
                "maxLength": 50,
                "minLength": 1
              },
              "ConfigurationVariable": {
                "type": "string",
                "description": "Displays the name of the configuration parameter.",
                "maxLength": 50,
                "minLength": 1
              },
              "dekennwort": {
                "type": "boolean",
                "description": "Enter the password if required."
              },
              "ReadOnly": {
                "type": "boolean",
                "description": "Read only?"
              },
              "ConfigurationValue": {
                "type": "string",
                "description": "Displays the value of the configuration parameter.",
                "maxLength": 1000,
                "nullable": true
              },
              "Remark": {
                "type": "string",
                "description": "Enter information about the function of the configuration parameter. Contact\nyour project manager for more information.",
                "maxLength": 2000,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "AllocationMeterToMeterGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AllocationMeterToMeterGroupBase"
          },
          {
            "type": "object",
            "description": "Use this form to assign meters to a meter group and define the validity of the\nassignment.",
            "additionalProperties": false
          }
        ]
      },
      "AllocationMeterToMeterGroupBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "MeterGroups",
              "Meters",
              "RentalMonthEnd",
              "PlusOrMinus"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "MeterGroups": {
                "type": "integer",
                "description": "Specification of the meter group to which a meter is assigned.",
                "format": "int32"
              },
              "Meters": {
                "description": "Selection of the meter to be assigned to the meter group.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Meter"
                  }
                ]
              },
              "MeterType": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "RentalMonthEnd": {
                "description": "Selection of the time from which the assignment is valid.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RentalMonth"
                  }
                ]
              },
              "RentalMonthStart": {
                "description": "Selection of the time up to which the assignment applies.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RentalMonth"
                  }
                ]
              },
              "PlusOrMinus": {
                "type": "number",
                "description": "Specifies whether the meter readings are to be added to or subtracted from the\ngroup consumption.",
                "format": "decimal"
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Meter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MeterBase"
          },
          {
            "type": "object",
            "description": "Enter all relevant meter data for your company in this form, including the meter\nnumber, the location of the meter via the room, information on the meter's\ncertification, calibration and testing, information on the meter's register,\nconfiguration of the meter's mobile meter reading and relevant information on\noperating cost billing.",
            "additionalProperties": false
          }
        ]
      },
      "MeterBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "MeterAccountingType",
              "BasePriceSupplier",
              "BasicFeeMeterReadingPeriod",
              "ConversionFactor",
              "CounterActive",
              "MobileMeterReading",
              "Tariff"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Building": {
                "description": "This entry is stored as an alternative to the distribution formula and is\nrequired if the selected cost center or lease-out is valid for several\nbuildings.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Building"
                  }
                ]
              },
              "CatalogueType": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "CompanyAddress": {
                "description": "Selection of the person who performed the check.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "CostCenter": {
                "description": "Selection of the cost center that is used to settle the meter.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              },
              "InvoiceAllocation": {
                "type": "integer",
                "description": "Selection of the distribution formula if the costs are to be apportioned to the\nrooms of a group of buildings.",
                "format": "int32",
                "nullable": true
              },
              "LastCounterPosition": {
                "description": "-- SUMMARY MISSING --",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/MeterReading"
                  }
                ]
              },
              "MeterAccountingType": {
                "type": "integer",
                "description": "Depending on the value selected here, different additional fields are activated\nto ensure correct billing, allowing different billing scenarios in\neTASK.Operating Costs Accounting.",
                "format": "int32"
              },
              "MeterBasePriceType": {
                "type": "integer",
                "description": "Selection of the basic price type of the supplier",
                "format": "int32",
                "nullable": true
              },
              "MeterMobileFormatBaseData": {
                "type": "integer",
                "description": "Selection of the file format to be used for the exchange by the import and\nexport function for external meter reading.",
                "format": "int32",
                "nullable": true
              },
              "MeterReadingPeriods": {
                "type": "integer",
                "description": "Selecting the Meter Reading Period",
                "format": "int32",
                "nullable": true
              },
              "MeterType": {
                "type": "integer",
                "description": "Selection of the meter type (FM portal only).",
                "format": "int32",
                "nullable": true
              },
              "MiscLocation": {
                "type": "integer",
                "description": "If the meter is not in a recorded room, the location can be selected here; these\nother locations must be recorded beforehand.",
                "format": "int32",
                "nullable": true
              },
              "NominalAccounts": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "PaidBy": {
                "description": "Selection of the person who performed the certification.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "ReadingIntervals": {
                "type": "integer",
                "description": "Selection of the interval in which invoices are to be created for the current\nmeter.",
                "format": "int32",
                "nullable": true
              },
              "Room": {
                "description": "Selection of the room in which the meter is located.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Room"
                  }
                ]
              },
              "Site": {
                "description": "Selection / display of the location to which the meter belongs.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Site"
                  }
                ]
              },
              "TenancyAgreement": {
                "type": "integer",
                "description": "Selection of the lease-out to which the meter costs are assigned.",
                "format": "int32",
                "nullable": true
              },
              "AllocationMeterToMeterGroups": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AllocationMeterToMeterGroup"
                }
              },
              "MeterHierarchiesOfMeters": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/MeterHierarchy"
                }
              },
              "MeterHierarchiesOfParentMeter": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/MeterHierarchy"
                }
              },
              "MeterReadings": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/MeterReading"
                }
              },
              "AssignmentTechnicalDetailToMeters": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AssignmentTechnicalDetailToMeter"
                }
              },
              "AllocationsRoomsToSupplyZones": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AllocationsRoomsToSupplyZone"
                }
              },
              "BasePriceSupplier": {
                "type": "number",
                "description": "Enter the basic price of the supplier",
                "format": "decimal"
              },
              "BasicFeeMeterReadingPeriod": {
                "type": "number",
                "description": "Enter the basic charge for the meter reading period (net) in euros.",
                "format": "decimal"
              },
              "ConversionFactor": {
                "type": "number",
                "description": "Enter the conversion factor for the meter reading displayed, which is used to\ndetermine the actual consumption.",
                "format": "decimal"
              },
              "CounterActive": {
                "type": "boolean",
                "description": "If this check box is activated, the meter data for mobile meter reading is\nexported if the \"Mobile meter reading\" check box is activated at the same time."
              },
              "MobileMeterReading": {
                "type": "boolean",
                "description": "If this check box is activated, the meter data for mobile meter reading is\nexported if the \"Active\" check box is activated at the same time."
              },
              "Tariff": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32"
              },
              "Barcode": {
                "type": "string",
                "description": "Bar Code",
                "maxLength": 18,
                "nullable": true
              },
              "CadOid": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 18,
                "nullable": true
              },
              "CalibrationYear": {
                "type": "string",
                "description": "Enter the year in which the meter was last calibrated in YYYY format.",
                "maxLength": 4,
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "Enter the number of the meter; the number should be the actual meter number,\notherwise problems may occur during meter reading.",
                "maxLength": 50,
                "nullable": true
              },
              "EquipmentNo": {
                "type": "string",
                "description": "Equipment No.",
                "maxLength": 50,
                "nullable": true
              },
              "FinalTest": {
                "type": "string",
                "description": "Select the date on which the meter was last checked.",
                "format": "date-time",
                "nullable": true
              },
              "GltId": {
                "type": "string",
                "description": "Enter the data point of the meter in the building management system.",
                "maxLength": 50,
                "nullable": true
              },
              "Identification01": {
                "type": "string",
                "description": "Identification 01",
                "maxLength": 50,
                "nullable": true
              },
              "Identification02": {
                "type": "string",
                "description": "Identification 02",
                "maxLength": 50,
                "nullable": true
              },
              "InitialCounterPositionDate": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "InitialLevel": {
                "type": "number",
                "description": "Enter the meter reading when installing the meter.",
                "format": "decimal",
                "nullable": true
              },
              "InitialOperation": {
                "type": "string",
                "description": "Selection of the date on which the meter was commissioned.",
                "format": "date-time",
                "nullable": true
              },
              "Manufacturer": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "Maximum": {
                "type": "number",
                "description": "Selection of the maximum value that the counter can display.",
                "format": "decimal",
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter the name of the meter.",
                "maxLength": 60,
                "nullable": true
              },
              "NextExamination": {
                "type": "string",
                "description": "Selection of the date of the next meter check in the date selection opposite.",
                "format": "date-time",
                "nullable": true
              },
              "Node": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 20,
                "nullable": true
              },
              "OtherSupplyAreas": {
                "type": "string",
                "description": "Enter other objects that are counted by the counter.",
                "maxLength": 255,
                "nullable": true
              },
              "PaymentYear": {
                "type": "string",
                "description": "Enter the year in which the meter was last certified in the format YYYY.",
                "maxLength": 4,
                "nullable": true
              },
              "ReadingOrder": {
                "type": "number",
                "description": "To be texted by detlef.klonsdorf@etask.de",
                "format": "decimal",
                "nullable": true
              },
              "Recalibration": {
                "type": "string",
                "description": "Selection of the date on which the meter must be calibrated the next time.",
                "format": "date-time",
                "nullable": true
              },
              "Remark": {
                "type": "string",
                "description": "Entry of remarks or notes on the meter.",
                "maxLength": 8000,
                "nullable": true
              },
              "TextOnBarcode": {
                "type": "string",
                "description": "Text for Bar Code",
                "maxLength": 25,
                "nullable": true
              },
              "ToBePaidUntil": {
                "type": "string",
                "description": "Selection of the date up to which the meter is certified.",
                "format": "date-time",
                "nullable": true
              },
              "TransformerRatio": {
                "type": "string",
                "maxLength": 15,
                "nullable": true
              },
              "Transponders": {
                "type": "string",
                "description": "Enter the transponder code of the meter.",
                "maxLength": 50,
                "nullable": true
              },
              "UnitPriceNet": {
                "type": "number",
                "description": "Enter the net price per unit in euros if it differs from the standard price per\nunit.",
                "format": "decimal",
                "nullable": true
              },
              "YearOfManufacture": {
                "type": "string",
                "description": "Enter the year of manufacture of the meter in YYYY format.",
                "maxLength": 4,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "MeterReading": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MeterReadingBase"
          },
          {
            "type": "object",
            "description": "Use this form to enter the meter readings of a meter for specific meter reading\ndata.",
            "additionalProperties": false
          }
        ]
      },
      "MeterReadingBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Meter",
              "BasicFee",
              "BasicFeeByEnergySupplier",
              "DaysOfBasicFeeByEnergySupplier",
              "ValueOfBasicFeeByEnergySupplier"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Building": {
                "description": "Display of the building to which the meter is assigned.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Building"
                  }
                ]
              },
              "CostCenter": {
                "description": "Display of the cost center through which the consumption monitored by the meter\nis billed.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              },
              "ImportId": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "InvoiceAllocation": {
                "type": "integer",
                "description": "Display of the distribution formula of the meter.",
                "format": "int32",
                "nullable": true
              },
              "Meter": {
                "description": "Counter for which a counter reading is entered.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Meter"
                  }
                ]
              },
              "MeterAccountingType": {
                "type": "integer",
                "description": "Display of the settlement type of the meter.",
                "format": "int32",
                "nullable": true
              },
              "MeterBasePriceType": {
                "type": "integer",
                "description": "Selection of the basic price type of the supplier",
                "format": "int32",
                "nullable": true
              },
              "MeterGroups": {
                "type": "integer",
                "description": "If necessary, select the group from which the allocation to the group of this\ncounter differs from the counter specification.",
                "format": "int32",
                "nullable": true
              },
              "MeterImport": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "NominalAccounts": {
                "type": "integer",
                "description": "Display of the G/L account used for billing the consumption values monitored by\nthe meter.",
                "format": "int32",
                "nullable": true
              },
              "ParentMeter": {
                "description": "If available, please select the higher-level counter here.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Meter"
                  }
                ]
              },
              "RentalMonth": {
                "description": "Selection of the month for which the meter reading is entered (billing month).",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RentalMonth"
                  }
                ]
              },
              "TenancyAgreement": {
                "type": "integer",
                "description": "Display of the lease-out to which the meter is assigned.",
                "format": "int32",
                "nullable": true
              },
              "BasicFee": {
                "type": "number",
                "description": "Display of the basic charge for the meter reading period.",
                "format": "decimal"
              },
              "BasicFeeByEnergySupplier": {
                "type": "number",
                "description": "Enter the basic price of the supplier",
                "format": "decimal"
              },
              "DaysOfBasicFeeByEnergySupplier": {
                "type": "integer",
                "description": "Enter the share of the supplier's basic price (number of days)",
                "format": "int32"
              },
              "ValueOfBasicFeeByEnergySupplier": {
                "type": "number",
                "description": "Enter the share of the supplier's base price (value)",
                "format": "decimal"
              },
              "BuildingControlSystemId": {
                "type": "string",
                "description": "Display of the data point of the meter in the building management system.",
                "maxLength": 50,
                "nullable": true
              },
              "Casualties": {
                "type": "number",
                "description": "Proportional losses from the meter group for this meter",
                "format": "decimal",
                "nullable": true
              },
              "DailyConsumption": {
                "type": "number",
                "description": "Displays the average consumption per day in the meter reading period.",
                "format": "decimal",
                "nullable": true
              },
              "MeterReadingDateold": {
                "type": "string",
                "description": "Date of previous meter reading",
                "format": "date-time",
                "nullable": true
              },
              "Multiplier": {
                "type": "number",
                "description": "The consumption is calculated from the meter reading difference (new - old) and\nthe factor.",
                "format": "decimal",
                "nullable": true
              },
              "NetConsumption": {
                "type": "number",
                "description": "This value is used to determine the operating costs.",
                "format": "decimal",
                "nullable": true
              },
              "NewReading": {
                "type": "number",
                "description": "Enter the new counter reading.",
                "format": "decimal",
                "nullable": true
              },
              "NumberConsumptionDays": {
                "type": "integer",
                "description": "Enter the number of consumption days",
                "format": "int32",
                "nullable": true
              },
              "OldReading": {
                "type": "number",
                "description": "Display of the meter reading at the previous reading  Can also be changed\nmanually.",
                "format": "decimal",
                "nullable": true
              },
              "Price": {
                "type": "number",
                "description": "Display of the costs of consumption taking into account the factor and the unit\nprice.",
                "format": "decimal",
                "nullable": true
              },
              "PricePerUnitNet": {
                "type": "number",
                "description": "Display of the price per unit of consumption.",
                "format": "decimal",
                "nullable": true
              },
              "ReadingDate": {
                "type": "string",
                "description": "Input / selection of the meter reading date.",
                "format": "date-time",
                "nullable": true
              },
              "Subcounter": {
                "type": "number",
                "description": "Display of the consumption of the subcounter of the current meter.",
                "format": "decimal",
                "nullable": true
              },
              "Wastage": {
                "type": "number",
                "description": "Display of consumption in the meter reading period, taking the factor into\naccount.",
                "format": "decimal",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "MeterHierarchy": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MeterHierarchyBase"
          },
          {
            "type": "object",
            "description": "Use this form to define the meter hierarchy by assigning a meter to a\nhigher-level meter To avoid multiple consumption calculations, the meter reading\nmust be subtracted from the higher-level meter.",
            "additionalProperties": false
          }
        ]
      },
      "MeterHierarchyBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Meters",
              "ParentMeter",
              "SubtractFromSuperiorCounter"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Meters": {
                "description": "Selection of the higher-level counter.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Meter"
                  }
                ]
              },
              "ParentMeter": {
                "description": "Selection of the counter that is assigned to the counter hierarchy.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Meter"
                  }
                ]
              },
              "RentalMonthEnd": {
                "description": "Selection of the time up to which the assignment is valid.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RentalMonth"
                  }
                ]
              },
              "RentalMonthStart": {
                "description": "Selection of the point in time from which the assignment applies.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RentalMonth"
                  }
                ]
              },
              "SubtractFromSuperiorCounter": {
                "type": "boolean",
                "description": "Specifies whether the meter readings of the lower-level meter are to be\nsubtracted from those of the higher-level meter during consumption billing."
              },
              "Losses": {
                "type": "number",
                "description": "-- SUMMARY MISSING --",
                "format": "decimal",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "AssignmentTechnicalDetailToMeter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AssignmentTechnicalDetailToMeterBase"
          },
          {
            "type": "object",
            "description": "Use this form to assign your technical details to counters.",
            "additionalProperties": false
          }
        ]
      },
      "AssignmentTechnicalDetailToMeterBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Meters",
              "TechnicalDetails"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Meters": {
                "description": "Meter Number",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Meter"
                  }
                ]
              },
              "TechnicalDetails": {
                "type": "integer",
                "description": "Selection of the technical detail to be assigned to the meter.",
                "format": "int32"
              },
              "Unit": {
                "type": "string",
                "description": "Select the unit for the value of the technical detail (e.g. \"m³\" at a flow\nrate).",
                "maxLength": 10,
                "nullable": true
              },
              "Value": {
                "type": "string",
                "description": "Value",
                "maxLength": 10,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "AllocationsRoomsToSupplyZone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AllocationsRoomsToSupplyZoneBase"
          },
          {
            "type": "object",
            "description": "If a meter is assigned the billing type \"Meter group\", rooms must be contained\nin the utility area so that the operating cost billing can be completed\nsuccessfully.",
            "additionalProperties": false
          }
        ]
      },
      "AllocationsRoomsToSupplyZoneBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Meters"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Meters": {
                "description": "Display of the meter whose supply area is defined by assigning a room.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Meter"
                  }
                ]
              },
              "NominalAccounts": {
                "type": "integer",
                "description": "Selection of a G/L account that differs from the standard setting in the meter\ngroup This selection is only necessary if the costs for a room are assigned\ndifferently within the service area than in the meter group (for example, for\ncorridors, common areas).",
                "format": "int32",
                "nullable": true
              },
              "RentalMonthEnd": {
                "description": "Input/selection of the month from which the assignment applies, in the format\nYYYYY-MM.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RentalMonth"
                  }
                ]
              },
              "RentalMonthStart": {
                "description": "Input/selection of the time up to which the assignment is valid in the format\nYYYYY-MM.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RentalMonth"
                  }
                ]
              },
              "Room": {
                "description": "Selection of the room whose consumption the meter measures.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Room"
                  }
                ]
              },
              "RoomPercentage": {
                "type": "number",
                "description": "Percentage share with which the room belongs to the current service area.",
                "format": "decimal",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "BimSoftware": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BimSoftwareBase"
          },
          {
            "type": "object",
            "description": "To be texted by jens.coosmann@etask.de",
            "additionalProperties": false
          }
        ]
      },
      "BimSoftwareBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Name"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Name": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 150,
                "minLength": 1
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Model": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          },
          {
            "type": "object",
            "description": "styles",
            "additionalProperties": false
          }
        ]
      },
      "ModelBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "ModelType",
              "Site",
              "Code",
              "Name",
              "RetentionPerioddays"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "CurrentModelPhase": {
                "type": "integer",
                "description": "To be texted by jens.coosmann@etask.de",
                "format": "int32",
                "nullable": true
              },
              "DisplayVariant": {
                "type": "integer",
                "description": "To be texted by jens.coosmann@etask.de",
                "format": "int32",
                "nullable": true
              },
              "ModelType": {
                "type": "integer",
                "description": "To be texted by jens.coosmann@etask.de",
                "format": "int32"
              },
              "Site": {
                "description": "To be texted by jens.coosmann@etask.de",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Site"
                  }
                ]
              },
              "Code": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 100,
                "minLength": 1
              },
              "Name": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 150,
                "minLength": 1
              },
              "RetentionPerioddays": {
                "type": "integer",
                "description": "To be texted by jens.coosmann@etask.de",
                "format": "int32"
              },
              "BimServerUrl": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 100,
                "nullable": true
              },
              "Building": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "Mapping": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "TicketDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "TicketNumber",
              "Category",
              "SubCategory",
              "Description",
              "Building",
              "Room"
            ],
            "properties": {
              "TicketNumber": {
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "pattern": "[0-9]{3}.[0-9]{3}.[0-9]{3}.[0-9]{3}"
              },
              "Category": {
                "type": "string",
                "description": "Eindeutiger Code der Kategorie (e.g. ????)",
                "maxLength": 100,
                "minLength": 3
              },
              "SubCategory": {
                "type": "string",
                "description": "Eindeutiger Code der untergeordnetes Kategorie",
                "maxLength": 100,
                "minLength": 3
              },
              "Description": {
                "type": "string",
                "description": "Beschreibung des Problems",
                "maxLength": 4000,
                "minLength": 3
              },
              "Building": {
                "type": "string",
                "description": "Eindeutiger Code des Gebäudes",
                "maxLength": 50,
                "minLength": 3
              },
              "Room": {
                "type": "string",
                "description": "Eindeutiger Code des Raumes",
                "maxLength": 50,
                "minLength": 3
              },
              "AssetId": {
                "type": "integer",
                "format": "int32",
                "default": "0"
              }
            }
          }
        ]
      },
      "DtoBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Guid"
        ],
        "properties": {
          "Guid": {
            "type": "string",
            "description": "global identifier (GUID/UUID)",
            "format": "guid"
          }
        }
      },
      "BuildingDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "Name",
              "Number",
              "City",
              "ZipCode",
              "StreetNumber",
              "Street",
              "CostCenter",
              "Site"
            ],
            "properties": {
              "Code": {
                "type": "string",
                "readOnly": true,
                "description": "Eindeutiger Code des Gebäudes (e.g. CGN)",
                "maxLength": 50,
                "minLength": 3,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Bezeichnung des Gebäudes",
                "maxLength": 50,
                "minLength": 3
              },
              "Number": {
                "type": "string",
                "description": "Nummer des Gebäudes",
                "maxLength": 10,
                "minLength": 3
              },
              "City": {
                "type": "string",
                "maxLength": 50,
                "minLength": 1
              },
              "ZipCode": {
                "type": "string",
                "maxLength": 10,
                "minLength": 1
              },
              "StreetNumber": {
                "type": "string",
                "maxLength": 10,
                "minLength": 1
              },
              "Street": {
                "type": "string",
                "maxLength": 50,
                "minLength": 1
              },
              "CostCenter": {
                "type": "string",
                "maxLength": 50,
                "minLength": 1
              },
              "Site": {
                "type": "string",
                "maxLength": 10,
                "minLength": 1
              }
            }
          }
        ]
      },
      "ApiException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Exception"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "ErrorCode": {
                "description": "Gets or sets the error code (HTTP status code)",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/HttpStatusCode"
                  }
                ]
              },
              "ErrorContent": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Exception"
                  }
                ]
              },
              "Source": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "HttpStatusCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Continue",
          "SwitchingProtocols",
          "OK",
          "Created",
          "Accepted",
          "NonAuthoritativeInformation",
          "NoContent",
          "ResetContent",
          "PartialContent",
          "MultipleChoices",
          "Ambiguous",
          "MovedPermanently",
          "Moved",
          "Found",
          "Redirect",
          "SeeOther",
          "RedirectMethod",
          "NotModified",
          "UseProxy",
          "Unused",
          "TemporaryRedirect",
          "RedirectKeepVerb",
          "BadRequest",
          "Unauthorized",
          "PaymentRequired",
          "Forbidden",
          "NotFound",
          "MethodNotAllowed",
          "NotAcceptable",
          "ProxyAuthenticationRequired",
          "RequestTimeout",
          "Conflict",
          "Gone",
          "LengthRequired",
          "PreconditionFailed",
          "RequestEntityTooLarge",
          "RequestUriTooLong",
          "UnsupportedMediaType",
          "RequestedRangeNotSatisfiable",
          "ExpectationFailed",
          "UpgradeRequired",
          "InternalServerError",
          "NotImplemented",
          "BadGateway",
          "ServiceUnavailable",
          "GatewayTimeout",
          "HttpVersionNotSupported"
        ],
        "enum": [
          "Continue",
          "SwitchingProtocols",
          "OK",
          "Created",
          "Accepted",
          "NonAuthoritativeInformation",
          "NoContent",
          "ResetContent",
          "PartialContent",
          "MultipleChoices",
          "MultipleChoices",
          "MovedPermanently",
          "MovedPermanently",
          "Redirect",
          "Redirect",
          "SeeOther",
          "SeeOther",
          "NotModified",
          "UseProxy",
          "Unused",
          "TemporaryRedirect",
          "TemporaryRedirect",
          "BadRequest",
          "Unauthorized",
          "PaymentRequired",
          "Forbidden",
          "NotFound",
          "MethodNotAllowed",
          "NotAcceptable",
          "ProxyAuthenticationRequired",
          "RequestTimeout",
          "Conflict",
          "Gone",
          "LengthRequired",
          "PreconditionFailed",
          "RequestEntityTooLarge",
          "RequestUriTooLong",
          "UnsupportedMediaType",
          "RequestedRangeNotSatisfiable",
          "ExpectationFailed",
          "UpgradeRequired",
          "InternalServerError",
          "NotImplemented",
          "BadGateway",
          "ServiceUnavailable",
          "GatewayTimeout",
          "HttpVersionNotSupported"
        ]
      },
      "RoomDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "Name",
              "Number"
            ],
            "properties": {
              "Code": {
                "type": "string",
                "readOnly": true,
                "description": "Eindeutiger Code des Raumes (e.g. CGN-AKS2-EG00-R001)",
                "maxLength": 50,
                "minLength": 3,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Bezeichnung des Raumes",
                "maxLength": 4000,
                "minLength": 3
              },
              "Number": {
                "type": "string",
                "description": "Eindeutige 'Nummer' des Raumes (e.g. R001)",
                "maxLength": 10,
                "minLength": 1
              },
              "TypeOfUsage": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "CategoryDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "Code",
              "Name"
            ],
            "properties": {
              "Code": {
                "type": "string",
                "description": "Eindeutiger Code der Kategorie (e.g. ????)",
                "maxLength": 100,
                "minLength": 3
              },
              "Name": {
                "type": "string",
                "description": "Bezeichnung der Kategorie",
                "maxLength": 200,
                "minLength": 3
              }
            }
          }
        ]
      },
      "SubCategoryDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "Code",
              "Name"
            ],
            "properties": {
              "Code": {
                "type": "string",
                "description": "Eindeutiger Code der Unterkategorie (e.g. ????)",
                "maxLength": 100,
                "minLength": 3
              },
              "Name": {
                "type": "string",
                "description": "Bezeichnung der Unterkategorie",
                "maxLength": 200,
                "minLength": 3
              },
              "Category": {
                "type": "string",
                "readOnly": true,
                "maxLength": 100,
                "minLength": 3,
                "nullable": true
              }
            }
          }
        ]
      },
      "EmployeeDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "description": "Mitarbeiter",
            "additionalProperties": false,
            "properties": {
              "SurName": {
                "type": "string",
                "readOnly": true,
                "description": "Nachname aus dem Personaldatensatz",
                "nullable": true
              },
              "GivenName": {
                "type": "string",
                "readOnly": true,
                "description": "Vorname aus dem Personaldatensatz",
                "nullable": true
              },
              "Email": {
                "type": "string",
                "readOnly": true,
                "description": "E-Mail aus dem Personaldatensatz",
                "nullable": true
              },
              "MaintainTimesheet": {
                "type": "boolean",
                "readOnly": true,
                "description": "Definiert ob der Mitarbeiter verpflichtet ist Leistungsnachweise anzulegen"
              },
              "WorkingTimeAccount": {
                "readOnly": true,
                "description": "Informationen über das aktuelle Stundenkonto des Mitarbeiters",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WorkingTimeAccount"
                  }
                ]
              }
            }
          }
        ]
      },
      "TimesheetDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "description": "Leistungsnachweise",
            "additionalProperties": false,
            "required": [
              "Date",
              "PresenceLocation"
            ],
            "properties": {
              "Date": {
                "type": "string",
                "description": "Datum des Arbeitstages",
                "format": "date-time"
              },
              "CheckIn": {
                "type": "string",
                "readOnly": true,
                "description": "Uhrzeit des Beginns des Arbeitstages (format: HH:MM)",
                "format": "time-span"
              },
              "CheckOut": {
                "type": "string",
                "readOnly": true,
                "description": "Berechnete Uhrzeit des Endes des Arbeitstages (format: HH:MM)",
                "format": "time-span"
              },
              "TotalHours": {
                "type": "number",
                "readOnly": true,
                "description": "Berechnet Anzahl der geleisteten Stunden. Summe aller\nEinzelstunden einer Tätigkeitsbeschreibung",
                "format": "decimal"
              },
              "PresenceLocation": {
                "type": "string",
                "description": "Einsatz-/Arbeitsort (e.g. Büro)"
              }
            }
          }
        ]
      },
      "WorkDescriptionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "description": "Leistungsbeschreibung",
            "additionalProperties": false,
            "required": [
              "InternalOrderNumber",
              "Description",
              "Hours"
            ],
            "properties": {
              "InternalOrderNumber": {
                "type": "string",
                "description": "Eindeutiger Coder der internen Auftragsnummer (e.g. ENTW1810)",
                "minLength": 1
              },
              "Description": {
                "type": "string",
                "description": "Text der Leistungsbeschreibung, mindestens 6 Zeichen",
                "maxLength": 2000,
                "minLength": 6
              },
              "Hours": {
                "type": "number",
                "description": "Stunden der Leistungsbeschreibung, mindestens 0.25h und maximal 12h in viertelstunden Schritten",
                "format": "double",
                "maximum": 12.0,
                "minimum": 0.25
              }
            }
          }
        ]
      },
      "HttpError": {
        "allOf": [
          {
            "type": "object",
            "additionalProperties": {}
          },
          {
            "type": "object",
            "description": "Defines a serializable container for storing error information. This information is stored  as key/value pairs. The dictionary keys to look up standard error information are available on the HttpErrorKeys type.",
            "additionalProperties": false,
            "properties": {
              "Message": {
                "type": "string",
                "description": "Gets or sets the high-level, user-visible message explaining the cause of the error. Information carried in this field should be considered public in that it will go over the wire regardless of the IncludeErrorDetailPolicy. As a result care should be taken not to disclose sensitive information about the server or the application.",
                "nullable": true
              },
              "ModelState": {
                "description": "Gets the ModelState containing information about the errors that occurred during model binding.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/HttpError"
                  }
                ]
              },
              "MessageDetail": {
                "type": "string",
                "description": "Gets or sets a detailed description of the error intended for the developer to understand exactly what failed.",
                "nullable": true
              },
              "ExceptionMessage": {
                "type": "string",
                "description": "Gets or sets the message of the Exception if available.",
                "nullable": true
              },
              "ExceptionType": {
                "type": "string",
                "description": "Gets or sets the type of the Exception if available.",
                "nullable": true
              },
              "StackTrace": {
                "type": "string",
                "description": "Gets or sets the stack trace information associated with this instance if available.",
                "nullable": true
              },
              "InnerException": {
                "description": "Gets the inner Exception associated with this instance if available.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/HttpError"
                  }
                ]
              }
            }
          }
        ]
      },
      "InternalOrderNumberDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "description": "Interne Auftragsnummer (EAN)",
            "additionalProperties": false,
            "required": [
              "Code",
              "Label"
            ],
            "properties": {
              "Code": {
                "type": "string",
                "description": "Eindeutiger Code der internen Auftragsnummer",
                "maxLength": 50,
                "minLength": 3
              },
              "Label": {
                "type": "string",
                "description": "Bezeichnung der internen Auftragsnummer",
                "maxLength": 100,
                "minLength": 10
              },
              "ApplicableFrom": {
                "type": "string",
                "description": "Definiert ab wann diese interne Auftragsnummer verwendet werden kann",
                "format": "date-time"
              },
              "ApplicableTill": {
                "type": "string",
                "description": "Definiert bist wann diese interne Auftragsnummer verwendet werden kann",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "PresenceLocationDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "description": "Einsatz/-Arbeitsort",
            "additionalProperties": false,
            "properties": {
              "Identification": {
                "type": "string",
                "description": "Bezeichnung des Einsatz-/Arbeitsorts",
                "maxLength": 255,
                "minLength": 3,
                "nullable": true
              }
            }
          }
        ]
      },
      "EmployeeAccessibilityDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Day": {
            "type": "string",
            "readOnly": true,
            "description": "Tag der Erreichbarkeit",
            "format": "date-time"
          },
          "PersonalUid": {
            "type": "string",
            "readOnly": true,
            "format": "guid"
          },
          "GivenName": {
            "type": "string",
            "readOnly": true,
            "description": "Vorname",
            "nullable": true
          },
          "SurName": {
            "type": "string",
            "readOnly": true,
            "description": "Nachname",
            "nullable": true
          },
          "Workplace": {
            "type": "string",
            "readOnly": true,
            "description": "Arbeitsort",
            "nullable": true
          },
          "PhoneNumber": {
            "type": "string",
            "readOnly": true,
            "description": "Telefonnummer",
            "nullable": true
          },
          "EMail": {
            "type": "string",
            "readOnly": true,
            "description": "Email Adresse",
            "nullable": true
          },
          "MobileNumber": {
            "type": "string",
            "readOnly": true,
            "description": "Handynummer",
            "nullable": true
          },
          "ComeTime": {
            "type": "string",
            "readOnly": true,
            "description": "Arbeitsbeginn",
            "nullable": true
          },
          "PresencePlace": {
            "type": "string",
            "readOnly": true,
            "description": "Einsatzort\n ",
            "nullable": true
          },
          "ReachablePersonally": {
            "type": "boolean",
            "readOnly": true,
            "description": "persönlich erreichbar"
          },
          "ReachableByPhone": {
            "type": "boolean",
            "readOnly": true,
            "description": "telefonisch erreichbar"
          },
          "ReachableByTeams": {
            "type": "boolean",
            "readOnly": true,
            "description": "mobil erreichbar"
          },
          "ReachableByEmail": {
            "type": "boolean",
            "readOnly": true,
            "description": "per Email erreichbar"
          },
          "ReachabilityColor": {
            "type": "string",
            "readOnly": true,
            "description": "Farbe für die Darstellung der Erreichbarkeit",
            "nullable": true
          },
          "IsHoliday": {
            "type": "boolean",
            "readOnly": true,
            "description": "ist Feiertag"
          },
          "IsWeekend": {
            "type": "boolean",
            "readOnly": true,
            "description": "ist Wochenende"
          },
          "IsLocalHoliday": {
            "type": "boolean",
            "readOnly": true,
            "description": "ist regionaler Feiertag"
          },
          "DayHoursShould": {
            "type": "number",
            "readOnly": true,
            "description": "Arbeitszeit (Stunden)",
            "format": "decimal"
          },
          "LeaveTime": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "PresencePlaceUntil": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          }
        }
      },
      "CustomDataTable": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Columns": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CustomColumn"
            }
          },
          "Rows": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CustomRow"
            }
          }
        }
      },
      "CustomColumn": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ColumnName": {
            "type": "string",
            "nullable": true
          },
          "DataType": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CustomRow": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Items": {
            "type": "array",
            "nullable": true,
            "items": {}
          }
        }
      },
      "Token": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "EtaskApiToken": {
            "type": "string",
            "description": "Token value",
            "nullable": true
          },
          "ExpirationTime": {
            "type": "string",
            "description": "Token expiration time",
            "format": "date-time"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "RefreshToken": {
            "type": "string",
            "description": "Token value",
            "nullable": true
          },
          "RefreshTokenExpirationTime": {
            "type": "string",
            "description": "Token expiration time",
            "format": "date-time"
          }
        }
      },
      "ImageSize": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Original",
          "Medium",
          "Small"
        ],
        "enum": [
          "Original",
          "Medium",
          "Small"
        ]
      },
      "LanguageTable": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LanguageTableBase"
          },
          {
            "type": "object",
            "description": "This list represents a central directory of all texts on the program interface.\nWhen logging in, the texts of the language selected by the user are always\ndisplayed. Frequently used voice messages are loaded into the server's cache\nafter the start of the FM portal to increase the speed.",
            "additionalProperties": false
          }
        ]
      },
      "LanguageTableBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Code",
              "Language",
              "ScriptPlaceofinstallation",
              "Text"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Code": {
                "type": "string",
                "description": "Displays the code of the piece of text to clearly identify the text in the\nprogram code.",
                "maxLength": 225,
                "minLength": 1
              },
              "Language": {
                "type": "string",
                "description": "Displays the abbreviation of the language in which the text is written according\nto ICANN Top-Level Domains (gTLDs).",
                "maxLength": 2,
                "minLength": 1
              },
              "ScriptPlaceofinstallation": {
                "type": "string",
                "description": "Displays the technical system identifier for assigning the text to an internal\npart of the application.",
                "maxLength": 225,
                "minLength": 1
              },
              "Text": {
                "type": "string",
                "description": "Enter the text which is displayed when the text variable is called up.",
                "maxLength": 4000,
                "minLength": 1
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "EtaskApiToken": {
        "type": "apiKey",
        "description": "eTASK.Api Token authentication",
        "name": "EtaskApiToken",
        "in": "header"
      },
      "Basic": {
        "type": "http",
        "description": "HTTP authentication",
        "name": "Basic",
        "in": "header",
        "scheme": "basic"
      }
    }
  },
  "security": [
    {
      "EtaskApiToken": []
    },
    {
      "Basic": []
    }
  ],
  "tags": [
    {
      "name": "Workplace.AllocationPersonnelToHseqFunctions",
      "description": "Here you assign employees to the HSE function they perform. This enables you to assign the employee in participant scheduling to a course in the area of the existing HSE function. If the HSE function is a basic function, all employees can participate in a training course in their area. An additional assignment of employees to the basic function is therefore not necessary, but may be useful for organizational purposes, since the employees actually hold the HSE function during the assignment."
    },
    {
      "name": "Workplace.DataSourcesOfPersonDatas",
      "description": "Manage data origins using this form. Enter various sources of personnel data here if they are imported by a third party system."
    },
    {
      "name": "Workplace.Salutations",
      "description": "This list contains all salutatory texts that can be defined as salutations for an employee in the \"Personnel\" form. These salutatory texts are already included in the delivery of eTASK.FM Portal."
    },
    {
      "name": "WorkflowEngine.Substitutes",
      "description": "This form can be used to determine who can represent which person, in which period and with what authorization."
    },
    {
      "name": "WorkflowEngine.Tickets",
      "description": "Workflow tickets are used to store identification, status and history data for a run of any workflow. Each workflow ticket is assigned a unique system-wide ticket number. View the data of a workflow run in this form."
    },
    {
      "name": "TenancyManagement.RentalMonths",
      "description": "This list contains the months provided by the system (day, number of days/month)."
    },
    {
      "name": "PortalOperation.EtaskEntities",
      "description": "This list represents a directory of the available database tables in the FM portal."
    },
    {
      "name": "PortalOperation.SystemConfigurations",
      "description": "This is where the individual system configuration is managed centrally within the FM portal. The available configuration values can be retrieved clearly using the ConfigCheck report. ATTENTION: This list strongly influences the functionality of the FM portal. End users are therefore not allowed to make any changes."
    },
    {
      "name": "MeterManagement.AllocationMeterToMeterGroups",
      "description": "Use this form to assign meters to a meter group and define the validity of the assignment."
    },
    {
      "name": "MeterManagement.AllocationsRoomsToSupplyZones",
      "description": "If a meter is assigned the billing type \"Meter group\", rooms must be contained in the utility area so that the operating cost billing can be completed successfully."
    },
    {
      "name": "MeterManagement.AssignmentTechnicalDetailToMeters",
      "description": "Use this form to assign your technical details to counters."
    },
    {
      "name": "MeterManagement.MeterHierarchies",
      "description": "Use this form to define the meter hierarchy by assigning a meter to a higher-level meter To avoid multiple consumption calculations, the meter reading must be subtracted from the higher-level meter."
    },
    {
      "name": "MeterManagement.MeterReadings",
      "description": "Use this form to enter the meter readings of a meter for specific meter reading data."
    },
    {
      "name": "MeterManagement.Meters",
      "description": "Enter all relevant meter data for your company in this form, including the meter number, the location of the meter via the room, information on the meter's certification, calibration and testing, information on the meter's register, configuration of the meter's mobile meter reading and relevant information on operating cost billing."
    },
    {
      "name": "Bim.BimSoftwares",
      "description": "To be texted by jens.coosmann@etask.de"
    },
    {
      "name": "Bim.Models",
      "description": "styles"
    },
    {
      "name": "Hseq.Common",
      "description": "<p>Manage of data for Health, Safety, Environment and Quality</p>"
    },
    {
      "name": "Hseq.HseqFunctions",
      "description": "Use this form to create HSE functions or responsibilities (for example, \"first responder\" or \"waste manager\") and assign employees to these functions. You can also specify the intervals for the training courses based on the existing HSE function and define the HSE function as the basic function. The training courses belonging to the function are listed in the lower part of the form."
    },
    {
      "name": "Core.Login",
      "description": "<p>Login into the eTASK Universal BIM API</p>"
    },
    {
      "name": "Core.Applications",
      "description": "The abbreviations of the FM modules are assigned to their complete names via this portal-internal administration table. Note: The data records may only be changed by system administrators. Every change can lead to system-wide complications!"
    },
    {
      "name": "Core.Buildings",
      "description": "Create data records for the various buildings in the organization. Enter information on the identification (assignment of a location and a building number and description) and address of the building as well as the building description. See at a glance how the current use of space (according to DIN 277) is distributed in the building. Assign the floors in the building. If you also use eTASK Maintenance, all maintenance contracts concluded with external or internal service providers for this building are displayed."
    },
    {
      "name": "Core.CompanyAddresses",
      "description": "Enter data records for all external companies with which the FM department cooperates. These data records are available in many places of the FM portal (e.g. to identify the contractor in eTASK Maintenance). Assign the company a type, a trade, address and communication details, and company employee data. Evaluate the company (adherence to delivery dates, price loyalty, etc.) to document the relationship of trust. Upload documents concerning this company. When using eTASK.CAD, the company's identification in CAD plans is also documented here. When using eTASK. contractor logon, the company's employees are registered who have temporary access to the building for work. If eTASK deficiency management is used, the construction projects in which the company is the client are assigned to the company."
    },
    {
      "name": "Core.CostCenters",
      "description": "Here you can create data records for cost centers in your company. The entered cost centers can be selected later in many places of the FM portal."
    },
    {
      "name": "Core.Din277UsageTypes",
      "description": "Create data records for usage types of building areas according to DIN 277. These data records can later be selected in the \"Rooms\" form and can also be further subdivided by the data records in the \"Internal usage types\" list."
    },
    {
      "name": "Core.Floors",
      "description": "Use this form to manage the floors of the buildings by first assigning the building in which the floor is located and then entering further information for identifying the floor (name, level, area, etc.). Then assign all rooms on the floor. If eTASK.CAD is also used, the floor plan is displayed in a new tab after clicking on the magnifying glass icon. In the \"CAD drawings\" area you can upload existing CAD plans of the floor on the project side."
    },
    {
      "name": "Core.LanguageTables",
      "description": "This list represents a central directory of all texts on the program interface. When logging in, the texts of the language selected by the user are always displayed. Frequently used voice messages are loaded into the server's cache after the start of the FM portal to increase the speed."
    },
    {
      "name": "Core.Persons",
      "description": "Use this form to create employee records to keep track of your staff. You can then select the persons entered here in various forms in the FM portal to assign tasks to them, for example. Enter data to identify the employee and his or her contact data. Assign the employee to the room in which he or she works. Manage the employee's access data and rights within the FM portal. Assign the inventory to the employee that he or she uses and that is displayed on his or her personalized start page. When using eTASK. key management, the keys handed out to the employee are displayed. When using eTASK. employee examinations, the company medical examinations in which the employee participated are listed."
    },
    {
      "name": "Core.Rooms",
      "description": "Manage data records for each individual room in the building to ensure complete space management. Only the room area entered here influences the areas of floors and buildings. Spatial data sets are the basis for many other components of the FM portal and other eTASK products. They are used, for example, to make room bookings or to assign employees and objects to them. First select the floor on which the room is located. Then assign a room number and the space usage of the room according to DIN 277 (or according to in-house standards) to each room. Add information on the settlement of space costs, the floor space of the room, and the number of work centers available in the room. Then assign the current reservation (work center and employee) to the room. Upload a photo of the room and manage information on the structural condition of the room (flooring, traffic load, etc.). Add one or more cost centers for the room and data to communication devices that are available in the room. Finally, you can create or view data records for objects in the room. When using eTASK.CAD, the room is displayed in the floor plan after clicking on the magnifying glass icon. When using eTASK Furniture, all furniture in the room is displayed or added. The same applies when using eTASK.equipment/IT for the IT devices in the room. If eTASK. defect management is connected, all construction defects found in the room are also displayed."
    },
    {
      "name": "Core.Sites",
      "description": "Create data records for the different locations of your organization. These locations represent locations of companies and branches and can be selected later, for example in forms for buildings, in order to clearly determine their location. The \"Locations\" form shows the buildings already assigned to the location. This assignment of buildings cannot be changed here, but only in the \"Buildings\" form. When using eTASK. open spaces, the list of all parking spaces at the location is also displayed."
    },
    {
      "name": "ProjectManagement.TimeRecording",
      "description": "Regelt alle Aspekte die aktuell für die Zeiterfassung über die EtaskEmployeeApp zur verfügung gestellt werden sollen."
    }
  ]
}