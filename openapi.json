{
  "x-generator": "NSwag v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "eTASK Universal BIM API",
    "description": "# Welcome to the reference of the eTASK REST API\r\n\r\neTASK is an application for managing your real estate portfolio. You have access also via REST to your data. REST is a web-service protocol that enables an easy and rapid development by using everyday HTTP and JSON technology.\r\n\r\nThe eTASK REST API provides a broad set of operations and resources. The  unified eTASK Universal BIM API enables you to create powerful real estate solutions for a variety of scenarios, e.g.\r\n\r\n* Access and share all information and documents\r\n* Navigate thour your BIM models\r\n* Drive your workflows\r\n* Integrate App on Android oder iOs Devices\r\n* Connect to you sensors or your favourite IoT Platform\r\n\r\nThis API offers a simple, fast and secure access, based on the OpenAPI specification. Write apps, integrate you data into other systems and digitize you workflow with the help of our API.\r\nEvery customer of eTASK has access to the API of the own instance based on the valid license model. In the cloud environment the api is available from the public internet.\r\nWant to share your opinion on how our API works for you? Tell us how you feel about using our API and what we can do to make it better.\r\n\r\n# Getting started\r\n*__Note__: If you need help using eTASK's APIs, then the best place to start is the issue list in the our [Github repository for the API](https://github.com/e-task/EtaskAPI). eTASK's support team for our application isn't able to answer questions about the API. Better, you contact the DEV team via GitHub, if you have a technical question.*\r\n\r\n## HTTP verbs\r\nWhere possible, the API strives to use the following HTTP verbs for each action.\r\n\r\n* __HEAD__ : Can be issued against any resource to get just the HTTP header info.\r\n* __GET__  : Used for retrieving resources.\r\n* __POST__ : Used for creating resources.\r\n* __PUT__   : Used for replacing resources or collections.\r\n* __DELETE__: Used for deleting resources.\r\n\r\n## Request Content-Type\r\nThe Content-Type for POST and PUT requests must be set to application/json, otherwise you may receive a bad request response.\r\n\r\n```\r\nContent-Type: application/json\r\n```\r\n\r\n## Encoding\r\nThe client must include in the header of every request this encoding: \r\n```\r\nAccept-Charset: utf-8\r\n```\r\nThe response will deliver every request in the encoding of UTF-8. \r\n\r\n## Encoding for URL parameters\r\nWhen using GET operation to fetch entries from a form via any REST client, URL parameters may be required. Examples of URL parameters are qualification (q), fields, limit and sort. While using any of these parameters with request URL, these must be encoded properly and then used in the request. Else results may not be as expected.\r\nTo encode URL parameters, use any third party tool or site such as https://www.w3schools.com/html/html_urlencode.asp, where non-encoded URL parameters can be converted into encoded URL parameter string. Use these encoded parameters to send a REST request.\r\n\r\nFor example, for sending qualification on a form like this: ```'Incident Number' = 'INC000000000701'``` the request should be encoded and sent like this: ```%27Incident+Number%27+%3D+%27INC000000000701%27```\r\n\r\n## Timezones\r\nWe apply the following rules, in order of priority, to determine timezone information for API calls. \r\n\r\n* Explicitly provide an ISO 8601 timestamp with timezone information. \r\n* For API calls that allow for a timestamp to be specified, we use that exact timestamp. \r\n* The provisioning of a timestamp in every field of type ```date``` or ```datetime``` is reqired in the API. \r\n* If, for whatever reason, there is no information about the timezone in the request, the API assumes the timezone '+01:00' in creating the answer. So, this request ```2019-02-27T15:05:06``` will be processed like this ```2019-02-27T15:05:06+01:00``` and the time information in the responses will be returned for the timezone '+01:00'.\r\n\r\n## HTTP Status Codes for Success and  Errors\r\nThe response from eTASK will have an HTTP status code that will help you determine the status of the response.  When an error occurs, our API will return an appropriate HTTP status code and an error message description. Our API uses the appropriate HTTP status code to indicate the type of success or the problem that was encountered. \r\n\r\nEvery ressource has documented HTTP status codes for the response with special meaning. Please check the documentation of the ressource you use.\r\n\r\nBelow is a general overview of what those codes mean, along with some suggestions that might help you fix things.\r\n\r\n* __200 Success__: The request has succeeded. The information returned with the response is dependent on the method used in the request.\r\n* __201 Created__: The request has been fulfilled and resulted in a new resource being created.\r\n* __400 Bad Request__: This is likely to be caused by a programming error on your part. Check the requirements of the endpoint you're calling in the HTTP API Reference.\r\n* __401 Unauthorized__: This means that we were not able to authenticate you based on the information provided in the request. Make sure you're sending your access_token and your credentials based on the security specification of our API. The section 'Authentication and API Keys' gives a detailed explanation of how this works. If you're connecting using OAuth, don't forget that tokens can expire. These will need to be refreshed. Not doing so can also result in getting a 401 error. If you need to check your application's system parameters page. This will include the token for your application.\r\n* __403 Forbidden__: You don't have access to whatever it is you're asking for.\r\n* __404 Not Found__: You're asking for something that doesn't exist. Check the URL that you're requesting.\r\n* __406 Not Accessible__: This means it wasn't possible to respond with the format you requested. Check the Accept header that you're sending.\r\n* __422 Unprocessable Entity__: The request was valid, but one or more of the parameters looks a little screwy. It's possible that you sent data in the wrong format. One example would be providing an array when we expected a string.\r\n* __429 Too Many Requests__: To keep the amount of spam on eTASK as low as possible, our API limits the rate at which you can perform certain actions. Read the Rate Limits page to find out more.\r\n* __500 Internal Server Error__: Uh-oh. Something went wrong on our side. We're sorry. We keep track of these, and we'll try to fix it! If possible, read the server log to get more information about this error.\r\n* __503 Service Unavailable__: This means that we're having some trouble, and our servers are too busy to handle your request. You'll want to check for these and give your user a chance to retry the request. We keep track of these and try to make sure they don't happen.\r\n* __504 Gateway Timeout__: This means the request is taking too long. However, it doesn't always mean that we didn't receive your request. We could still be chugging away on the changes you made, and this means that you may want to check before retrying.\r\n\r\n## Business rules\r\nMany ressources own specific business rules. Most of them can be requested in appendinge the element ```/Rules``` to the path of the ressource. The response will then be a list of the rules that shall be applied for the ressource. If the requests does not fulfill one of these rules, the response will contain the name of the violated rule and a notice that descibes the violation more in detail. In these situation you have to correct your request to fulfill with all rules.\r\n\r\n## Cross origin resource sharing\r\nThe API supports Cross Origin Resource Sharing (CORS) for AJAX requests from any origin. You can read the CORS W3C Recommendation, or this intro from the HTML 5 Security Guide.\r\nHere's a sample request sent from a browser hitting http://example.com:\r\n\r\n```\r\ncurl -iH \"Origin: http://example.com\"  \"https://dotnet.etask.de/API/Core/Persons\"\r\nHTTP/1.1 302 Found\r\nAccess-Control-Allow-Origin: *\r\nAccess-Control-Expose-Headers: ETag, Link, X-Etask-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\r\n```\r\n\r\nThis is what the CORS preflight request looks like:\r\n```\r\ncurl -iH \"Origin: http://example.com\" \"https://dotnet.etask.de/API/Core/Persons\" -X OPTIONS\r\nHTTP/1.1 204 No Content\r\nAccess-Control-Allow-Origin: *\r\nAccess-Control-Allow-Headers: Authorization, Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since, X-Etask-OTP, X-Requested-With\r\nAccess-Control-Allow-Methods: GET, POST, PATCH, PUT, DELETE\r\nAccess-Control-Expose-Headers: ETag, Link, X-Etask-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\r\nAccess-Control-Max-Age: 86400\r\n```\r\n\r\n## <a name=\"ua-required\"></a>User agent required\r\nAll API requests MUST include a valid User-Agent header. Requests with no User-Agent header will be rejected. We request that you use your eTASK username, or the name of your application, for the User-Agent header value. This allows us to contact you if there are problems.\r\nHere's an example:\r\n\r\n```\r\nUser-Agent: My-Awesome-Etask-App\r\n```\r\n\r\ncURL sends a valid User-Agent header by default. If you provide an invalid User-Agent header via cURL (or via an alternative client), you will receive a 403 Forbidden response:\r\n\r\n```\r\ncurl -iH \"User-Agent: My-Awesome-Etask-App\" \"https://dotnet.etask.de/API/Core/Persons\"\r\nHTTP/1.0 403 Forbidden\r\nConnection: close\r\nContent-Type: text/html\r\nRequest forbidden by administrative rules.\r\nPlease make sure your request has a User-Agent header.\r\nCheck https://dotnet.etask.de/API for other possible causes.\r\n```\r\n\r\n## Conditional requests\r\nMost responses return an ETag header. Many responses also return a Last-Modified header. You can use the values of these headers to make subsequent requests to those resources using the If-None-Match and If-Modified-Since headers, respectively. If the resource has not changed, the server will return a 304 Not Modified.\r\nNote: Making a conditional request and receiving a 304 response does not count against your Rate Limit, so we encourage you to use it whenever possible.\r\n```\r\ncurl -i \"https://dotnet.etask.de/API/Core/Persons\"\r\n```\r\n\r\n```\r\nHTTP/1.1 200 OK\r\nCache-Control: private, max-age=60\r\nETag: '644b5b0155e6404a9cc4bd9d8b1ae730'\r\nLast-Modified: Thu, 05 Jul 2012 15:31:30 GMT\r\nStatus: 200 OK\r\nVary: Accept, Authorization, Cookie\r\nX-RateLimit-Limit: 5000\r\nX-RateLimit-Remaining: 4996\r\nX-RateLimit-Reset: 1372700873\r\n```\r\n```\r\ncurl -i \"https://dotnet.etask.de/API/Core/Persons\" -H \"If-None-Match: 644b5b0155e6404a9cc4bd9d8b1ae730\"\r\n```\r\n```\r\nHTTP/1.1 304 Not Modified\r\nCache-Control: private, max-age=60\r\nETag: '644b5b0155e6404a9cc4bd9d8b1ae730'\r\nLast-Modified: Thu, 05 Jul 2012 15:31:30 GMT\r\nStatus: 304 Not Modified\r\nVary: Accept, Authorization, Cookie\r\nX-RateLimit-Limit: 5000\r\nX-RateLimit-Remaining: 4996\r\nX-RateLimit-Reset: 1372700873\r\n```\r\n```\r\ncurl -i \"https://dotnet.etask.de/API/Core/Persons\" -H \"If-Modified-Since: Thu, 05 Jul 2012 15:31:30 GMT\"\r\n```\r\n```\r\nHTTP/1.1 304 Not Modified\r\nCache-Control: private, max-age=60\r\nLast-Modified: Thu, 05 Jul 2012 15:31:30 GMT\r\nStatus: 304 Not Modified\r\nVary: Accept, Authorization, Cookie\r\nX-RateLimit-Limit: 5000\r\nX-RateLimit-Remaining: 4996\r\nX-RateLimit-Reset: 1372700873\r\n```\r\n\r\n### Server URI\r\nThis API documentation uses the URI https://dotnet.etask.de/API as a placeholder for all other eTASK installations. Please replace https://dotnet.etask.de/API with the server URI of you eTASK installation. To try out the API, connect directly to your own eTASK installation or contact us to get access to a developer installation.\r\n\r\n### TLS connection required\r\nThe API requires connections based on Transport Layer Security (TLS), more known under it's predecessor designation Secure Sockets Layer (SSL). The API requires TLS 1.2. The server MUST provide a valid certificate, that is accepted by the client's computer. If the client's computer does not trust the certificate, the API will return a 403 Forbidden response:\r\n\r\n```\r\ncurl -iH \"User-Agent: My-Awesome-Etask-App\" \"https://dotnet.etask.de/API/\"\r\nHTTP/1.0 403 Forbidden\r\nConnection: close\r\nContent-Type: text/html\r\nRequest forbidden by administrative rules.\r\nPlease make sure your server provides a valid TLS certificate.\r\nCheck https://dotnet.etask.de/API for other possible causes.\r\n```\r\n\r\nRequests, that do not even use the https protocol will be automatically redirected to https.\r\n\r\n### Application Key\r\nEach application that wants to access the API needs an individual application key (e.g. your mobile App). Please visit our [customer portal](https://kundencenter.etask.de) to request an Application API key for your instance. In your submission, please be prepared to provide the following:\r\n*\tYour instance uri\r\n*\tThe 'live date' of your app and feature that integrates with the API. Briefly describe how the eTASK API integrates with your app and provide screenshots of the implementation.\r\n*\tAs per our section 5 A of our terms of service, we require all apps that use the eTASK API to conspicuously display 'Powered By eTASK' attribution marks where the API is utilized. You can find approved official logo marks here. Please provide screenshots of your attribution placement.\r\n\r\n### API token per user\r\n\r\nEvery request is secured by an user token that is created based on username and password with the ressource ```/Core/Login```. If the authentication was succesful, the API creates a key in the format of a Json Web Token (JWT). This token must be send in the header of every subsequent request (api_token). This ensures the security of all ressources and the compliance with the individual user rights per API ressource.\r\n\r\nTo obtain a user token, please call the following ressource:\r\n```\r\ncurl -iH \"User-Agent: My-Awesome-Etask-App\" \"https://dotnet.etask.de/API/Core/Login\"\r\n```\r\n\r\n## Ressource Names\r\nMost API endpoints provide the same content as their HTML counterparts in the related eTASK FM Portal. For example, the URL /rooms serves a list of rooms, the /api/rooms API provides the same information in JSON format. Please be aware, that the configuration of user rights and other UI related configuration of the FM-Portal can show less information, that the API.\r\n\r\n## Openapi file\r\nThe API is documented, based on the [specification](https://github.com/OAI/OpenAPI-Specification) of the [Openapi Initiative](https://www.openapis.org/) fka as Swagger.\r\n\r\nWe provide direct access to our [Openapi 3.0 file](/API/openapi/v1/openapi.json). Use it in you favourite API tool. \r\n\r\n## Thanks for reading until the end of the docs :-)\r\nIf you have any question, please feel free to contact us.  Please submit API corrections via github issues. Please see our terms of service for any restrictions on using the service. We also recommend using the Postman or another client tool for restfull API’s view the API responses.\r\n\r\nWe are exited about what you will build upon our API. Have you made anything exciting? __Please share [here](https://twitter.com/etask)__.",
    "contact": {
      "name": "eTASK Immobilien Software GmbH",
      "url": "https://etask.de",
      "email": "api@etask.de"
    },
    "license": {
      "name": "License",
      "url": "https://www.etask.de/wp-content/uploads/eTASK_AGB.pdf"
    },
    "version": "2019"
  },
  "servers": [
    {
      "url": "https://dotnet.etask.de/API",
      "description": "Local server"
    }
  ],
  "paths": {
    "/Workplace/AllocationPersonnelToHseqFunctions": {
      "get": {
        "tags": [
          "Workplace.AllocationPersonnelToHseqFunctions"
        ],
        "summary": "Fetch the list of all 'AllocationPersonnelToHseqFunctions'.",
        "operationId": "AllocationPersonnelToHseqFunctions_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllocationPersonnelToHseqFunction"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'AllocationPersonnelToHseqFunctions' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Workplace.AllocationPersonnelToHseqFunctions"
        ],
        "summary": "Create a new 'AllocationPersonnelToHseqFunction'.",
        "operationId": "AllocationPersonnelToHseqFunctions_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'AllocationPersonnelToHseqFunction' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AllocationPersonnelToHseqFunction"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'AllocationPersonnelToHseqFunction' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllocationPersonnelToHseqFunction"
                }
              }
            }
          },
          "400": {
            "description": "if given 'AllocationPersonnelToHseqFunction' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Workplace/AllocationPersonnelToHseqFunctions/{guid}": {
      "get": {
        "tags": [
          "Workplace.AllocationPersonnelToHseqFunctions"
        ],
        "summary": "Fetch a 'AllocationPersonnelToHseqFunction' by the global identifier.",
        "operationId": "AllocationPersonnelToHseqFunctions_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllocationPersonnelToHseqFunction"
                }
              }
            }
          },
          "404": {
            "description": "'AllocationPersonnelToHseqFunction' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Workplace.AllocationPersonnelToHseqFunctions"
        ],
        "summary": "Delete a 'AllocationPersonnelToHseqFunction' by given global identifier",
        "operationId": "AllocationPersonnelToHseqFunctions_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'AllocationPersonnelToHseqFunction' by given identifier was deleted"
          },
          "400": {
            "description": "'AllocationPersonnelToHseqFunction' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Workplace.AllocationPersonnelToHseqFunctions"
        ],
        "summary": "Update an specified 'AllocationPersonnelToHseqFunction' by given global identifier.",
        "operationId": "AllocationPersonnelToHseqFunctions_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'AllocationPersonnelToHseqFunction' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AllocationPersonnelToHseqFunction"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'AllocationPersonnelToHseqFunction' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllocationPersonnelToHseqFunction"
                }
              }
            }
          },
          "404": {
            "description": "'AllocationPersonnelToHseqFunction' not found!"
          },
          "400": {
            "description": "if 'AllocationPersonnelToHseqFunction' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Workplace/AllocationPersonnelToHseqFunctions/Count": {
      "get": {
        "tags": [
          "Workplace.AllocationPersonnelToHseqFunctions"
        ],
        "summary": "Fetch the total count of 'AllocationPersonnelToHseqFunctions'.",
        "operationId": "AllocationPersonnelToHseqFunctions_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'AllocationPersonnelToHseqFunctions' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Workplace/AllocationPersonnelToHseqFunctions/{guid}/Download/{filename}": {
      "get": {
        "tags": [
          "Workplace.AllocationPersonnelToHseqFunctions"
        ],
        "summary": "TODO",
        "operationId": "AllocationPersonnelToHseqFunctions_Download",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "description": "filename",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "item or file not found"
          },
          "200": {
            "description": "returns one file specified filename of an item specified by guid",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Workplace/AllocationPersonnelToHseqFunctions/{guid}/Documents": {
      "get": {
        "tags": [
          "Workplace.AllocationPersonnelToHseqFunctions"
        ],
        "summary": "TODO",
        "operationId": "AllocationPersonnelToHseqFunctions_Documents",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns all documents (without content) of an item specified by guid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/WorkflowEngine/Substitutes": {
      "get": {
        "tags": [
          "WorkflowEngine.Substitutes"
        ],
        "summary": "Fetch the list of all 'Substitutes'.",
        "operationId": "Substitutes_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Substitute"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Substitutes' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "WorkflowEngine.Substitutes"
        ],
        "summary": "Create a new 'Substitute'.",
        "operationId": "Substitutes_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Substitute' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Substitute"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Substitute' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Substitute"
                }
              }
            }
          },
          "400": {
            "description": "if given 'Substitute' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/WorkflowEngine/Substitutes/{guid}": {
      "get": {
        "tags": [
          "WorkflowEngine.Substitutes"
        ],
        "summary": "Fetch a 'Substitute' by the global identifier.",
        "operationId": "Substitutes_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Substitute"
                }
              }
            }
          },
          "404": {
            "description": "'Substitute' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "WorkflowEngine.Substitutes"
        ],
        "summary": "Delete a 'Substitute' by given global identifier",
        "operationId": "Substitutes_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'Substitute' by given identifier was deleted"
          },
          "400": {
            "description": "'Substitute' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "WorkflowEngine.Substitutes"
        ],
        "summary": "Update an specified 'Substitute' by given global identifier.",
        "operationId": "Substitutes_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Substitute' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Substitute"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'Substitute' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Substitute"
                }
              }
            }
          },
          "404": {
            "description": "'Substitute' not found!"
          },
          "400": {
            "description": "if 'Substitute' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/WorkflowEngine/Substitutes/Count": {
      "get": {
        "tags": [
          "WorkflowEngine.Substitutes"
        ],
        "summary": "Fetch the total count of 'Substitutes'.",
        "operationId": "Substitutes_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'Substitutes' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/WorkflowEngine/Substitutes/ByPerson/{login}": {
      "get": {
        "tags": [
          "WorkflowEngine.Substitutes"
        ],
        "summary": "Fetches all 'Substitute' for Person.",
        "operationId": "Substitutes_GetByLogin",
        "parameters": [
          {
            "name": "login",
            "in": "path",
            "required": true,
            "description": "The login name.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all Substitutes for user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Substitute"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Substitute' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/WorkflowEngine/Substitutes/SubstitutedPersonsByLogin/{login}": {
      "get": {
        "tags": [
          "WorkflowEngine.Substitutes"
        ],
        "summary": "Get substituted persons by loginname",
        "operationId": "Substitutes_GetSubstitutedPersonsByLogin",
        "parameters": [
          {
            "name": "login",
            "in": "path",
            "required": true,
            "description": "The login.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of related objects, that shall be returned additionally",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all persons for whom the user is listed as a substitute.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Substitute"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no person found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/ProjectManagement/TimeRecording/Employee": {
      "get": {
        "tags": [
          "ProjectManagement.TimeRecording"
        ],
        "summary": "Returns the employee data record of the logged in user.",
        "operationId": "TimeRecording_GetEmployee",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeDto"
                }
              }
            }
          },
          "500": {
            "description": "Not specified in more detail, see message for more information"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/ProjectManagement/TimeRecording/Timesheet": {
      "get": {
        "tags": [
          "ProjectManagement.TimeRecording"
        ],
        "summary": "Delivers the one time sheet including hour entries for the current day",
        "operationId": "TimeRecording_GetEmployeeTimesheetOfToday",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetDto"
                }
              }
            }
          },
          "404": {
            "description": "No timesheet for today has been started yet"
          },
          "500": {
            "description": "Not specified in more detail, see message for more information"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/ProjectManagement/TimeRecording/Timesheet/WorkDescriptions": {
      "get": {
        "tags": [
          "ProjectManagement.TimeRecording"
        ],
        "summary": "Returns the list of the hour entries of today's time sheet.",
        "operationId": "TimeRecording_GetTimesheetWorkDescriptionsOfDate",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkDescriptionDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No timesheet or work description found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          },
          "500": {
            "description": "Not specified in more detail, see message for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/ProjectManagement/TimeRecording/Timesheet/StartDay": {
      "put": {
        "tags": [
          "ProjectManagement.TimeRecording"
        ],
        "summary": "Starts a time sheet for today. If such a time sheet already exists, it is returned and no new one is created..",
        "operationId": "TimeRecording_StartTimesheetOfToday",
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "required": true,
            "description": "Presence location (e.g. HomeOffice)",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetDto"
                }
              }
            }
          },
          "500": {
            "description": "Not specified in more detail, see message for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/ProjectManagement/TimeRecording/Timesheet/WorkDescription": {
      "post": {
        "tags": [
          "ProjectManagement.TimeRecording"
        ],
        "summary": "Adds a work description to today's time sheet",
        "operationId": "TimeRecording_AddTimesheetWorkDescription",
        "requestBody": {
          "x-name": "data",
          "description": "Stundeneintrag",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkDescriptionDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkDescriptionDto"
                }
              }
            }
          },
          "500": {
            "description": "Not specified in more detail, see message for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpError"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/ProjectManagement/TimeRecording/Overtime": {
      "post": {
        "tags": [
          "ProjectManagement.TimeRecording"
        ],
        "summary": "Adds a overtime payment request ",
        "operationId": "TimeRecording_PostOvertime",
        "parameters": [
          {
            "name": "number",
            "in": "query",
            "required": true,
            "description": "Number of hours to be paid out",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 999.0,
              "minimum": 1.0
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OvertimeDto"
                }
              }
            }
          },
          "500": {
            "description": "Not specified in more detail, see message for more information"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/ProjectManagement/TimeRecording/InternalOrderNumbers": {
      "get": {
        "tags": [
          "ProjectManagement.TimeRecording"
        ],
        "summary": "Returns a list of all EANs that can be used today.",
        "operationId": "TimeRecording_GetInternalOrderNumbers",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InternalOrderNumberDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Not specified in more detail, see message for more information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpError"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/ProjectManagement/TimeRecording/PresenceLocations": {
      "get": {
        "tags": [
          "ProjectManagement.TimeRecording"
        ],
        "summary": "Delivers a list of all usable presence locations",
        "operationId": "TimeRecording_GetPresenceLocations",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PresenceLocationDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Not specified in more detail, see message for more information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/ProjectManagement/TimeRecording/Accessibility": {
      "get": {
        "tags": [
          "ProjectManagement.TimeRecording"
        ],
        "summary": "Provides an availability list of employees on the date specified by {date} ",
        "operationId": "TimeRecording_GetEmployeeAccessibilityAll",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "required": true,
            "description": "date",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeAccessibilityDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Not specified in more detail, see message for more information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/ProjectManagement/TimeRecording/Accessibility/Today": {
      "get": {
        "tags": [
          "ProjectManagement.TimeRecording"
        ],
        "summary": "Provides an availability list of the employees on the current day ",
        "operationId": "TimeRecording_GetEmployeeAccessibility",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeAccessibilityDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Not specified in more detail, see message for more information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/Common/Sites": {
      "get": {
        "tags": [
          "Hseq.Common"
        ],
        "summary": "Get a list of all sites that have at minimum one HSEQ function attached",
        "operationId": "Hseq_GetAllSites",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "a list of all sites that have at minimum one HSEQ function attached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Site"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Sites not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/Common/Sites/{guid}/Buildings": {
      "get": {
        "tags": [
          "Hseq.Common"
        ],
        "summary": "Get a list of all sites that have at minimum one HSEQ function attached",
        "operationId": "Hseq_GetBuildingsforSitesByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of buildings that have at minimum one HSEQ function attached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Building"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Buildings not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/Common/Sites/{guid}/BuildingsCount": {
      "get": {
        "tags": [
          "Hseq.Common"
        ],
        "summary": "Get a number of buildings in site that have at minimum one HSEQ function attached",
        "operationId": "Hseq_GetSiteBuildingsCount",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "guid",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns count of buildings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "Site not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/Common/Sites/Count": {
      "get": {
        "tags": [
          "Hseq.Common"
        ],
        "summary": "Get a number of sites that have at minimum one HSEQ function attached",
        "operationId": "Hseq_GetSitesCount",
        "responses": {
          "200": {
            "description": "returns count of sites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "Sites not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/Common/Buildings": {
      "get": {
        "tags": [
          "Hseq.Common"
        ],
        "summary": "Get a list of all buildings that have at minimum one HSEQ function attached",
        "operationId": "Hseq_GetAllBuildings",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "a list of all buildings that have at minimum one HSEQ function attached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Building"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Buildings not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/Common/Buildings/{code}": {
      "get": {
        "tags": [
          "Hseq.Common"
        ],
        "summary": "Get a list of all buildings that have at minimum one HSEQ function attached",
        "operationId": "Hseq_SearchBuildings",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "a list of all buildings that have at minimum one HSEQ function attached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Building"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Buildings not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/Common/Sites/{code}": {
      "get": {
        "tags": [
          "Hseq.Common"
        ],
        "summary": "Get a list of all sites that have at minimum one HSEQ function attached",
        "operationId": "Hseq_SearchSites",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "a list of all Sites that have at minimum one HSEQ function attached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Site"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Sites not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/Common/Building/{guid}/Persons": {
      "get": {
        "tags": [
          "Hseq.Common"
        ],
        "summary": "Get a list of personnel with HseqFunctions for the Building",
        "operationId": "Hseq_GetAllPersons",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "building id that have at minimum one HSEQ function attached.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "a list of personnel with HseqFunctions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllocationPersonnelToHseqFunction"
                  }
                }
              }
            }
          },
          "404": {
            "description": "personnel not found!"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/HseqFunctions": {
      "get": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "summary": "Fetch the list of all 'HseqFunctions'.",
        "operationId": "HseqFunctions_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HseqFunction"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'HseqFunctions' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "summary": "Create a new 'HseqFunction'.",
        "operationId": "HseqFunctions_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'HseqFunction' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/HseqFunction"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'HseqFunction' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HseqFunction"
                }
              }
            }
          },
          "400": {
            "description": "if given 'HseqFunction' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/HseqFunctions/{guid}": {
      "get": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "summary": "Fetch a 'HseqFunction' by the global identifier.",
        "operationId": "HseqFunctions_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HseqFunction"
                }
              }
            }
          },
          "404": {
            "description": "'HseqFunction' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "summary": "Delete a 'HseqFunction' by given global identifier",
        "operationId": "HseqFunctions_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'HseqFunction' by given identifier was deleted"
          },
          "400": {
            "description": "'HseqFunction' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "summary": "Update an specified 'HseqFunction' by given global identifier.",
        "operationId": "HseqFunctions_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'HseqFunction' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/HseqFunction"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'HseqFunction' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HseqFunction"
                }
              }
            }
          },
          "404": {
            "description": "'HseqFunction' not found!"
          },
          "400": {
            "description": "if 'HseqFunction' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/HseqFunctions/ByCode/{code}": {
      "get": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "summary": "Fetch a single 'HseqFunction' based on its code.",
        "operationId": "HseqFunctions_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HseqFunction"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'HseqFunctions' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/HseqFunctions/Count": {
      "get": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "summary": "Fetch the total count of 'HseqFunctions'.",
        "operationId": "HseqFunctions_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'HseqFunctions' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/HseqFunctions/CommissionerBuilding": {
      "get": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "summary": "TODO",
        "operationId": "HseqFunctions_GetCommissionerBuilding",
        "parameters": [
          {
            "name": "buildingGlobalUid",
            "in": "query",
            "required": true,
            "description": "buildingGlobalUid",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomDataTable"
                }
              }
            }
          },
          "404": {
            "description": "no 'HseqFunctions' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/HseqFunctions/CommissionerBuildingRecords": {
      "get": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "summary": "TODO",
        "operationId": "HseqFunctions_GetCommissionerBuildingRecords",
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomRow"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'HseqFunctions' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Hseq/HseqFunctions/EmailAdresses": {
      "get": {
        "tags": [
          "Hseq.HseqFunctions"
        ],
        "summary": "TODO",
        "operationId": "HseqFunctions_GetEmailAdresses",
        "parameters": [
          {
            "name": "buildingGlobalUid",
            "in": "query",
            "required": true,
            "description": "buildingGlobalUid",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'HseqFunctions' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Integration/Broker/Start": {
      "get": {
        "tags": [
          "Integration.Broker"
        ],
        "summary": "Starts the configured broker",
        "operationId": "Broker_StartSystem",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResult"
                }
              }
            }
          },
          "500": {
            "description": "Not specified in more detail, see message for more information"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Integration/Broker/Stop": {
      "get": {
        "tags": [
          "Integration.Broker"
        ],
        "summary": "Stops the configured broker",
        "operationId": "Broker_StopSystem",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResult"
                }
              }
            }
          },
          "500": {
            "description": "Not specified in more detail, see message for more information"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Integration/Broker/Restart": {
      "get": {
        "tags": [
          "Integration.Broker"
        ],
        "summary": "Restarts the configured broker",
        "operationId": "Broker_RestartSystem",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResult"
                }
              }
            }
          },
          "500": {
            "description": "Not specified in more detail, see message for more information"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Integration/Broker/RetryMessage": {
      "get": {
        "tags": [
          "Integration.Broker"
        ],
        "summary": "Retries sending  the logged message again",
        "operationId": "Broker_RetryMessage",
        "parameters": [
          {
            "name": "loggedMessageUid",
            "in": "query",
            "required": true,
            "description": "loggedMessageUid",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResult"
                }
              }
            }
          },
          "500": {
            "description": "Not specified in more detail, see message for more information"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/FleetManagement/Vehicles": {
      "get": {
        "tags": [
          "FleetManagement.Vehicles"
        ],
        "summary": "Fetch the list of all 'Vehicles'.",
        "operationId": "Vehicles_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Vehicle"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Vehicles' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "FleetManagement.Vehicles"
        ],
        "summary": "Create a new 'Vehicle'.",
        "operationId": "Vehicles_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Vehicle' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Vehicle"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Vehicle' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vehicle"
                }
              }
            }
          },
          "400": {
            "description": "if given 'Vehicle' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/FleetManagement/Vehicles/{guid}": {
      "get": {
        "tags": [
          "FleetManagement.Vehicles"
        ],
        "summary": "Fetch a 'Vehicle' by the global identifier.",
        "operationId": "Vehicles_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vehicle"
                }
              }
            }
          },
          "404": {
            "description": "'Vehicle' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "FleetManagement.Vehicles"
        ],
        "summary": "Delete a 'Vehicle' by given global identifier",
        "operationId": "Vehicles_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'Vehicle' by given identifier was deleted"
          },
          "400": {
            "description": "'Vehicle' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "FleetManagement.Vehicles"
        ],
        "summary": "Update an specified 'Vehicle' by given global identifier.",
        "operationId": "Vehicles_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Vehicle' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Vehicle"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'Vehicle' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vehicle"
                }
              }
            }
          },
          "404": {
            "description": "'Vehicle' not found!"
          },
          "400": {
            "description": "if 'Vehicle' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/FleetManagement/Vehicles/ByCode/{code}": {
      "get": {
        "tags": [
          "FleetManagement.Vehicles"
        ],
        "summary": "Fetch a single 'Vehicle' based on its code.",
        "operationId": "Vehicles_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Vehicle"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Vehicles' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/FleetManagement/Vehicles/Count": {
      "get": {
        "tags": [
          "FleetManagement.Vehicles"
        ],
        "summary": "Fetch the total count of 'Vehicles'.",
        "operationId": "Vehicles_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'Vehicles' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/FleetManagement/Vehicles/{guid}/Download/{filename}": {
      "get": {
        "tags": [
          "FleetManagement.Vehicles"
        ],
        "summary": "TODO",
        "operationId": "Vehicles_Download",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "description": "filename",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "item or file not found"
          },
          "200": {
            "description": "returns one file specified filename of an item specified by guid",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/FleetManagement/Vehicles/{guid}/Documents": {
      "get": {
        "tags": [
          "FleetManagement.Vehicles"
        ],
        "summary": "TODO",
        "operationId": "Vehicles_Documents",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns all documents (without content) of an item specified by guid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/FleetManagement/VehicleStates": {
      "get": {
        "tags": [
          "FleetManagement.VehicleStates"
        ],
        "summary": "Fetch the list of all 'VehicleStates'.",
        "operationId": "VehicleStates_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleState"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'VehicleStates' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "FleetManagement.VehicleStates"
        ],
        "summary": "Create a new 'VehicleState'.",
        "operationId": "VehicleStates_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'VehicleState' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/VehicleState"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'VehicleState' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleState"
                }
              }
            }
          },
          "400": {
            "description": "if given 'VehicleState' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/FleetManagement/VehicleStates/{guid}": {
      "get": {
        "tags": [
          "FleetManagement.VehicleStates"
        ],
        "summary": "Fetch a 'VehicleState' by the global identifier.",
        "operationId": "VehicleStates_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleState"
                }
              }
            }
          },
          "404": {
            "description": "'VehicleState' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "FleetManagement.VehicleStates"
        ],
        "summary": "Delete a 'VehicleState' by given global identifier",
        "operationId": "VehicleStates_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'VehicleState' by given identifier was deleted"
          },
          "400": {
            "description": "'VehicleState' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "FleetManagement.VehicleStates"
        ],
        "summary": "Update an specified 'VehicleState' by given global identifier.",
        "operationId": "VehicleStates_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'VehicleState' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/VehicleState"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'VehicleState' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleState"
                }
              }
            }
          },
          "404": {
            "description": "'VehicleState' not found!"
          },
          "400": {
            "description": "if 'VehicleState' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/FleetManagement/VehicleStates/ByCode/{code}": {
      "get": {
        "tags": [
          "FleetManagement.VehicleStates"
        ],
        "summary": "Fetch a single 'VehicleState' based on its code.",
        "operationId": "VehicleStates_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleState"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'VehicleStates' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/FleetManagement/VehicleStates/Count": {
      "get": {
        "tags": [
          "FleetManagement.VehicleStates"
        ],
        "summary": "Fetch the total count of 'VehicleStates'.",
        "operationId": "VehicleStates_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'VehicleStates' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Ticket": {
      "get": {
        "tags": [
          "Services.Ticket"
        ],
        "summary": "Liefert die vollständige Liste aller Tickets (PS: aus meiner sicht überflüssig im WebApi)",
        "operationId": "Ticket_GetAll",
        "responses": {
          "200": {
            "description": "Alle Tickets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Services.Ticket"
        ],
        "summary": "Erzeugung eines neuen ServiceTickets",
        "description": "{\"Category\": \"001 BCF-Test\",\"Description\": \"Beschreibung\",\"Building\": \"CGN-AKS2\"}",
        "operationId": "Ticket_PostServiceTicket",
        "requestBody": {
          "x-name": "data",
          "description": "data for creating the service ticket",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/TicketDto"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "Das neu erzeugte Ticket",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Ticket/Mine": {
      "get": {
        "tags": [
          "Services.Ticket"
        ],
        "summary": "Liefert die Liste aller Tickets, die \"von mir angefordert\" wurden.",
        "operationId": "Ticket_GetMine",
        "responses": {
          "200": {
            "description": "Alle vom eingeloggten User beauftragte Tickets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Ticket/Monitored": {
      "get": {
        "tags": [
          "Services.Ticket"
        ],
        "summary": "Liefert die Liste aller beobachteten Tickets.",
        "operationId": "Ticket_GetMonitored",
        "responses": {
          "200": {
            "description": "Alle vom eingeloggten User beobachteten Tickets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Ticket/Tasks": {
      "get": {
        "tags": [
          "Services.Ticket"
        ],
        "summary": "Liefert die Liste aller bearbeitbaren Tickets.",
        "operationId": "Ticket_GetTasks",
        "responses": {
          "200": {
            "description": "Alle vom eingeloggten User bearbeitbaren Tickets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Ticket/{guid}": {
      "get": {
        "tags": [
          "Services.Ticket"
        ],
        "summary": "Liefert ein Ticket welches durch den GUID/UUID ({guid}) spezifiziert wurde",
        "operationId": "Ticket_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "guid",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ein Ticket",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Ticket/{guid}/Documents": {
      "get": {
        "tags": [
          "Services.Ticket"
        ],
        "summary": "Liefert alle Dokumente (ohne Inhalt) eines Tickets (spezifiziert durch {guid})",
        "operationId": "Ticket_GetFiles",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "guid",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Alle Dokumente (ohne Inhalt) am Ticket hängen.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Ticket/{guid}/Documents/{filename}/Download": {
      "get": {
        "tags": [
          "Services.Ticket"
        ],
        "summary": "Die erste gefundene Datei, des Ticket (spezifiziert durch {guid}), die durch {filename} spezifiziert wurde",
        "operationId": "Ticket_GetFile",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "guid",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "description": "download",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Inhalt des Dokumentes.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Ticket/Buildings": {
      "get": {
        "tags": [
          "Services.Ticket"
        ],
        "summary": "Liste aller im Ticket verwendbaren Gebäude",
        "operationId": "Ticket_GetBuildings",
        "responses": {
          "200": {
            "description": "Alle Gebäude",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BuildingDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "see response for further information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Ticket/Buildings/{code}/Rooms": {
      "get": {
        "tags": [
          "Services.Ticket"
        ],
        "summary": "Liste aller Räume des durch den Code identifizieren Gebäudes",
        "operationId": "Ticket_GetRoomsInBuilding",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "eindeutiger Gebäude Code",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Alle Räume des spezifizierten ({code}) Gebäudes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoomDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Ticket/Categories": {
      "get": {
        "tags": [
          "Services.Ticket"
        ],
        "summary": "Liste aller im Ticket verwendbaren Kategorien",
        "operationId": "Ticket_GetCategories",
        "responses": {
          "200": {
            "description": "Alle Kategorien die für ein Ticket verwendet werden können.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Ticket/Categories/{code}/SubCategories": {
      "get": {
        "tags": [
          "Services.Ticket"
        ],
        "summary": "Liste aller Unterkategorieren der durch den Code identifizieren Kategorie",
        "operationId": "Ticket_GetSubcategories",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "eindeutiger Kategorie Code",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Alle Unterkategorien der spezifizierten ({code}) Kategorie.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubCategoryDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Report": {
      "post": {
        "tags": [
          "Services.Report"
        ],
        "summary": "Creation of a new service report",
        "operationId": "Report_PostServiceTicket",
        "requestBody": {
          "x-name": "data",
          "description": "data for creating the service report",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/TicketDto"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "The newly created report.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Report/Buildings": {
      "get": {
        "tags": [
          "Services.Report"
        ],
        "summary": "List of all buildings that can be used in the report",
        "operationId": "Report_GetBuildings",
        "responses": {
          "200": {
            "description": "All useable buildings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BuildingDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "requested building not found"
          },
          "500": {
            "description": "see response for further information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Report/Buildings/{latitude}/{longitude}": {
      "get": {
        "tags": [
          "Services.Report"
        ],
        "summary": "determines the nearest building based on the smallest distance",
        "operationId": "Report_GetBuildingsByCoordinates",
        "parameters": [
          {
            "name": "latitude",
            "in": "path",
            "required": true,
            "description": "of current position",
            "schema": {
              "type": "number",
              "format": "double",
              "maximum": 90.0,
              "minimum": -90.0
            },
            "x-position": 1
          },
          {
            "name": "longitude",
            "in": "path",
            "required": true,
            "description": "of current position",
            "schema": {
              "type": "number",
              "format": "double",
              "maximum": 180.0,
              "minimum": -180.0
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "nearest building to the coordinates given",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingDto"
                }
              }
            }
          },
          "500": {
            "description": "see response for further information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Report/Buildings/{building}/Rooms": {
      "get": {
        "tags": [
          "Services.Report"
        ],
        "summary": "All rooms of the building specified (by {code}).",
        "operationId": "Report_GetRoomsInBuilding",
        "parameters": [
          {
            "name": "building",
            "in": "path",
            "required": true,
            "description": "distinct code",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "All rooms of the building specified (by {code}).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoomDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Report/Categories": {
      "get": {
        "tags": [
          "Services.Report"
        ],
        "summary": "List of all categories that can be used in the report",
        "operationId": "Report_GetCategories",
        "responses": {
          "200": {
            "description": "List of all categories that can be used in the report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Report/Categories/{category}/SubCategories": {
      "get": {
        "tags": [
          "Services.Report"
        ],
        "summary": "All subcategories of the specified ({category}) category.",
        "operationId": "Report_GetSubCategoriesInCategory",
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "required": true,
            "description": "distinct code of category",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "All subcategories of the specified ({code}) category.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubCategoryDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Report/Categories/{category}/MinimalDate/{building}": {
      "get": {
        "tags": [
          "Services.Report"
        ],
        "summary": "delivers the minimum possible desired date from the combination of building ({building}) and category ({category})",
        "operationId": "Report_GetCategoryMinimalDesireDate",
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "required": true,
            "description": "distinct code of category",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "building",
            "in": "path",
            "required": true,
            "description": "distinct code of building",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "delivers the minimum possible desired date from the combination of building ({building}) and category ({category})",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "404": {
            "description": "minimum possible desired date not found"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Services/Report/Buildings/{building}/MinimalDate/{category}": {
      "get": {
        "tags": [
          "Services.Report"
        ],
        "summary": "delivers the minimum possible desired date from the combination of building ({building}) and category ({category})",
        "operationId": "Report_GetCategoryMinimalDesireDate2",
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "required": true,
            "description": "distinct code of category",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "building",
            "in": "path",
            "required": true,
            "description": "distinct code of building",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "delivers the minimum possible desired date from the combination of building ({building}) and category ({category})",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "404": {
            "description": "minimum possible desired date not found"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Files/Image/Upload/{table}/{section}/{guid}": {
      "post": {
        "tags": [
          "Core.Files"
        ],
        "summary": "upload a single image to a specific data record identified by {table}-Name, {sectionGuid} and {guid} of parent record",
        "operationId": "Files_UploadImageFromRequestBody",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "required": true,
            "description": "table name (system value)",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "section",
            "in": "path",
            "required": true,
            "description": "global identifier of section (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier of the parent record (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 3
          },
          {
            "name": "filename",
            "in": "query",
            "description": "(optional) of uploaded document",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "file_content",
          "description": "file content as binary string",
          "content": {
            "image/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "upload Ok"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Files/Image/{guid}": {
      "get": {
        "tags": [
          "Core.Files"
        ],
        "summary": "all information about an image except the content",
        "operationId": "Files_GetImageInfo",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier of image (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "image information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageDto"
                }
              }
            }
          },
          "404": {
            "description": "requested image not found"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.Files"
        ],
        "summary": "delete an existing image",
        "operationId": "Files_DeleteImage",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier of image (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "requested image deleted"
          },
          "404": {
            "description": "requested image not found"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Files/Image/{guid}/Download": {
      "get": {
        "tags": [
          "Core.Files"
        ],
        "summary": "download content of an image",
        "operationId": "Files_DownloadImage",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier of image (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "size",
            "in": "query",
            "required": true,
            "description": "size of returned image",
            "schema": {
              "$ref": "#/components/schemas/ImageSize"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "file of content-type image/*",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Files/Document/Upload/{table}/{section}/{guid}": {
      "post": {
        "tags": [
          "Core.Files"
        ],
        "summary": "upload a single document to a specific data record identified by {table}-Name, {sectionGuid} and {guid} of parent record",
        "operationId": "Files_UploadDocumentFromRequestBody",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "required": true,
            "description": "table name (system value)",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "section",
            "in": "path",
            "required": true,
            "description": "global identifier of section (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier of the parent record (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 3
          },
          {
            "name": "filename",
            "in": "query",
            "description": "(optional) of uploaded document",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "file_content",
          "description": "file content as binary string",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "upload Ok"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Files/Document/{guid}/Download": {
      "get": {
        "tags": [
          "Core.Files"
        ],
        "summary": "download content of an document",
        "operationId": "Files_DownloadDocument",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier of document (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "file of content-type application/*",
            "content": {
              "application/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Files/Document/{guid}": {
      "get": {
        "tags": [
          "Core.Files"
        ],
        "summary": "all information about an image except the content",
        "operationId": "Files_GetDocumentInfo",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier of document (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "document information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              }
            }
          },
          "404": {
            "description": "requested document not found"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.Files"
        ],
        "summary": "delete an existing document",
        "operationId": "Files_DeleteDocument",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier of document (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "requested document deleted"
          },
          "404": {
            "description": "requested document not found"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Assets": {
      "get": {
        "tags": [
          "Core.Assets"
        ],
        "summary": "Fetch the list of all 'Assets'.",
        "operationId": "Assets_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Assets' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Core.Assets"
        ],
        "summary": "Create a new 'Asset'.",
        "operationId": "Assets_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Asset' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Asset"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Asset' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "400": {
            "description": "if given 'Asset' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Assets/{guid}": {
      "get": {
        "tags": [
          "Core.Assets"
        ],
        "summary": "Fetch a 'Asset' by the global identifier.",
        "operationId": "Assets_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "404": {
            "description": "'Asset' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.Assets"
        ],
        "summary": "Delete a 'Asset' by given global identifier",
        "operationId": "Assets_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'Asset' by given identifier was deleted"
          },
          "400": {
            "description": "'Asset' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Core.Assets"
        ],
        "summary": "Update an specified 'Asset' by given global identifier.",
        "operationId": "Assets_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Asset' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Asset"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'Asset' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "404": {
            "description": "'Asset' not found!"
          },
          "400": {
            "description": "if 'Asset' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Assets/ByCode/{code}": {
      "get": {
        "tags": [
          "Core.Assets"
        ],
        "summary": "Fetch a single 'Asset' based on its code.",
        "operationId": "Assets_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Assets' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Assets/Count": {
      "get": {
        "tags": [
          "Core.Assets"
        ],
        "summary": "Fetch the total count of 'Assets'.",
        "operationId": "Assets_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'Assets' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Assets/{guid}/Download/{filename}": {
      "get": {
        "tags": [
          "Core.Assets"
        ],
        "summary": "TODO",
        "operationId": "Assets_Download",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "description": "filename",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "item or file not found"
          },
          "200": {
            "description": "returns one file specified filename of an item specified by guid",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Assets/{guid}/Documents": {
      "get": {
        "tags": [
          "Core.Assets"
        ],
        "summary": "TODO",
        "operationId": "Assets_Documents",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns all documents (without content) of an item specified by guid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Barcode/{barcode}/Room": {
      "get": {
        "tags": [
          "Core.Barcode"
        ],
        "summary": "Determines the room deposited for the barcode",
        "operationId": "Barcode_GetRoomByBarcode",
        "parameters": [
          {
            "name": "barcode",
            "in": "path",
            "required": true,
            "description": "barcode number to search for",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "a room",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomDto"
                }
              }
            }
          },
          "404": {
            "description": "requested room for barcode not found"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/MatchCodes": {
      "get": {
        "tags": [
          "Core.MatchCodes"
        ],
        "summary": "Fetch the list of all 'MatchCodes'.",
        "operationId": "MatchCodes_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchCode"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'MatchCodes' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Core.MatchCodes"
        ],
        "summary": "Create a new 'MatchCode'.",
        "operationId": "MatchCodes_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'MatchCode' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/MatchCode"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'MatchCode' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchCode"
                }
              }
            }
          },
          "400": {
            "description": "if given 'MatchCode' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/MatchCodes/{guid}": {
      "get": {
        "tags": [
          "Core.MatchCodes"
        ],
        "summary": "Fetch a 'MatchCode' by the global identifier.",
        "operationId": "MatchCodes_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchCode"
                }
              }
            }
          },
          "404": {
            "description": "'MatchCode' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.MatchCodes"
        ],
        "summary": "Delete a 'MatchCode' by given global identifier",
        "operationId": "MatchCodes_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'MatchCode' by given identifier was deleted"
          },
          "400": {
            "description": "'MatchCode' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Core.MatchCodes"
        ],
        "summary": "Update an specified 'MatchCode' by given global identifier.",
        "operationId": "MatchCodes_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'MatchCode' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/MatchCode"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'MatchCode' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchCode"
                }
              }
            }
          },
          "404": {
            "description": "'MatchCode' not found!"
          },
          "400": {
            "description": "if 'MatchCode' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/MatchCodes/ByCode/{code}": {
      "get": {
        "tags": [
          "Core.MatchCodes"
        ],
        "summary": "Fetch a single 'MatchCode' based on its code.",
        "operationId": "MatchCodes_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchCode"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'MatchCodes' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/MatchCodes/Count": {
      "get": {
        "tags": [
          "Core.MatchCodes"
        ],
        "summary": "Fetch the total count of 'MatchCodes'.",
        "operationId": "MatchCodes_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'MatchCodes' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/MatchCodes/{guid}/Download/{filename}": {
      "get": {
        "tags": [
          "Core.MatchCodes"
        ],
        "summary": "TODO",
        "operationId": "MatchCodes_Download",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "description": "filename",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "item or file not found"
          },
          "200": {
            "description": "returns one file specified filename of an item specified by guid",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/MatchCodes/{guid}/Documents": {
      "get": {
        "tags": [
          "Core.MatchCodes"
        ],
        "summary": "TODO",
        "operationId": "MatchCodes_Documents",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns all documents (without content) of an item specified by guid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/ObjectTypes": {
      "get": {
        "tags": [
          "Core.ObjectTypes"
        ],
        "summary": "Fetch the list of all 'ObjectTypes'.",
        "operationId": "ObjectTypes_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ObjectType"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'ObjectTypes' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Core.ObjectTypes"
        ],
        "summary": "Create a new 'ObjectType'.",
        "operationId": "ObjectTypes_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'ObjectType' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ObjectType"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'ObjectType' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              }
            }
          },
          "400": {
            "description": "if given 'ObjectType' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/ObjectTypes/{guid}": {
      "get": {
        "tags": [
          "Core.ObjectTypes"
        ],
        "summary": "Fetch a 'ObjectType' by the global identifier.",
        "operationId": "ObjectTypes_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              }
            }
          },
          "404": {
            "description": "'ObjectType' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.ObjectTypes"
        ],
        "summary": "Delete a 'ObjectType' by given global identifier",
        "operationId": "ObjectTypes_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'ObjectType' by given identifier was deleted"
          },
          "400": {
            "description": "'ObjectType' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Core.ObjectTypes"
        ],
        "summary": "Update an specified 'ObjectType' by given global identifier.",
        "operationId": "ObjectTypes_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'ObjectType' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ObjectType"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'ObjectType' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              }
            }
          },
          "404": {
            "description": "'ObjectType' not found!"
          },
          "400": {
            "description": "if 'ObjectType' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/ObjectTypes/ByCode/{code}": {
      "get": {
        "tags": [
          "Core.ObjectTypes"
        ],
        "summary": "Fetch a single 'ObjectType' based on its code.",
        "operationId": "ObjectTypes_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ObjectType"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'ObjectTypes' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/ObjectTypes/Count": {
      "get": {
        "tags": [
          "Core.ObjectTypes"
        ],
        "summary": "Fetch the total count of 'ObjectTypes'.",
        "operationId": "ObjectTypes_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'ObjectTypes' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/ObjectTypes/{guid}/Download/{filename}": {
      "get": {
        "tags": [
          "Core.ObjectTypes"
        ],
        "summary": "TODO",
        "operationId": "ObjectTypes_Download",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "description": "filename",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "item or file not found"
          },
          "200": {
            "description": "returns one file specified filename of an item specified by guid",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/ObjectTypes/{guid}/Documents": {
      "get": {
        "tags": [
          "Core.ObjectTypes"
        ],
        "summary": "TODO",
        "operationId": "ObjectTypes_Documents",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns all documents (without content) of an item specified by guid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Floors": {
      "get": {
        "tags": [
          "Core.Floors"
        ],
        "summary": "Fetch the list of all 'Floors'.",
        "operationId": "Floors_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Floor"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Floors' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Core.Floors"
        ],
        "summary": "Create a new 'Floor'.",
        "operationId": "Floors_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Floor' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Floor"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Floor' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Floor"
                }
              }
            }
          },
          "400": {
            "description": "if given 'Floor' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Floors/{guid}": {
      "get": {
        "tags": [
          "Core.Floors"
        ],
        "summary": "Fetch a 'Floor' by the global identifier.",
        "operationId": "Floors_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Floor"
                }
              }
            }
          },
          "404": {
            "description": "'Floor' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.Floors"
        ],
        "summary": "Delete a 'Floor' by given global identifier",
        "operationId": "Floors_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'Floor' by given identifier was deleted"
          },
          "400": {
            "description": "'Floor' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Core.Floors"
        ],
        "summary": "Update an specified 'Floor' by given global identifier.",
        "operationId": "Floors_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Floor' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Floor"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'Floor' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Floor"
                }
              }
            }
          },
          "404": {
            "description": "'Floor' not found!"
          },
          "400": {
            "description": "if 'Floor' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Floors/ByCode/{code}": {
      "get": {
        "tags": [
          "Core.Floors"
        ],
        "summary": "Fetch a single 'Floor' based on its code.",
        "operationId": "Floors_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Floor"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Floors' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Floors/Count": {
      "get": {
        "tags": [
          "Core.Floors"
        ],
        "summary": "Fetch the total count of 'Floors'.",
        "operationId": "Floors_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'Floors' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Floors/{guid}/Download/{filename}": {
      "get": {
        "tags": [
          "Core.Floors"
        ],
        "summary": "TODO",
        "operationId": "Floors_Download",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "description": "filename",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "item or file not found"
          },
          "200": {
            "description": "returns one file specified filename of an item specified by guid",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Floors/{guid}/Documents": {
      "get": {
        "tags": [
          "Core.Floors"
        ],
        "summary": "TODO",
        "operationId": "Floors_Documents",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns all documents (without content) of an item specified by guid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Rooms": {
      "get": {
        "tags": [
          "Core.Rooms"
        ],
        "summary": "Fetch the list of all 'Rooms'.",
        "operationId": "Rooms_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Room"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Rooms' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Core.Rooms"
        ],
        "summary": "Create a new 'Room'.",
        "operationId": "Rooms_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Room' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Room"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Room' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          },
          "400": {
            "description": "if given 'Room' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Rooms/{guid}": {
      "get": {
        "tags": [
          "Core.Rooms"
        ],
        "summary": "Fetch a 'Room' by the global identifier.",
        "operationId": "Rooms_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          },
          "404": {
            "description": "'Room' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.Rooms"
        ],
        "summary": "Delete a 'Room' by given global identifier",
        "operationId": "Rooms_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'Room' by given identifier was deleted"
          },
          "400": {
            "description": "'Room' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Core.Rooms"
        ],
        "summary": "Update an specified 'Room' by given global identifier.",
        "operationId": "Rooms_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Room' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Room"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'Room' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          },
          "404": {
            "description": "'Room' not found!"
          },
          "400": {
            "description": "if 'Room' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Rooms/ByCode/{code}": {
      "get": {
        "tags": [
          "Core.Rooms"
        ],
        "summary": "Fetch a single 'Room' based on its code.",
        "operationId": "Rooms_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Room"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Rooms' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Rooms/Count": {
      "get": {
        "tags": [
          "Core.Rooms"
        ],
        "summary": "Fetch the total count of 'Rooms'.",
        "operationId": "Rooms_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'Rooms' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Rooms/{guid}/Download/{filename}": {
      "get": {
        "tags": [
          "Core.Rooms"
        ],
        "summary": "TODO",
        "operationId": "Rooms_Download",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "description": "filename",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "item or file not found"
          },
          "200": {
            "description": "returns one file specified filename of an item specified by guid",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Rooms/{guid}/Documents": {
      "get": {
        "tags": [
          "Core.Rooms"
        ],
        "summary": "TODO",
        "operationId": "Rooms_Documents",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns all documents (without content) of an item specified by guid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Token": {
      "get": {
        "tags": [
          "Core.Login"
        ],
        "summary": "Access token - This resource retrieves the EtaskApiToken based on basic authentication.",
        "operationId": "Login_GetToken",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "language",
            "schema": {
              "type": "string",
              "default": "en",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "EtaskApiToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "401": {
            "description": "Invalid user or password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/Core/RenewAccessToken": {
      "get": {
        "tags": [
          "Core.Login"
        ],
        "summary": "Get new access token - This resource is used by clients to exchange a refresh token for an access token when the access token has expired\n ",
        "operationId": "Login_GetNewAccessToken",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "query",
            "required": true,
            "description": "refreshToken",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "New access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "401": {
            "description": "Refresh token invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Logout": {
      "get": {
        "tags": [
          "Core.Login"
        ],
        "summary": "Logout from the eTASK Universal BIM API.\n ",
        "operationId": "Login_Logout",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "query",
            "required": true,
            "description": "language",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "User logged out successfully"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Dummy": {
      "get": {
        "tags": [
          "Core.SignalR"
        ],
        "summary": "Dummy",
        "operationId": "Dummy_Dummy",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Buildings": {
      "get": {
        "tags": [
          "Core.Buildings"
        ],
        "summary": "Fetch the list of all 'Buildings'.",
        "operationId": "Buildings_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Building"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Buildings' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Core.Buildings"
        ],
        "summary": "Create a new 'Building'.",
        "operationId": "Buildings_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Building' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Building"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Building' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Building"
                }
              }
            }
          },
          "400": {
            "description": "if given 'Building' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Buildings/{guid}": {
      "get": {
        "tags": [
          "Core.Buildings"
        ],
        "summary": "Fetch a 'Building' by the global identifier.",
        "operationId": "Buildings_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Building"
                }
              }
            }
          },
          "404": {
            "description": "'Building' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.Buildings"
        ],
        "summary": "Delete a 'Building' by given global identifier",
        "operationId": "Buildings_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'Building' by given identifier was deleted"
          },
          "400": {
            "description": "'Building' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Core.Buildings"
        ],
        "summary": "Update an specified 'Building' by given global identifier.",
        "operationId": "Buildings_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Building' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Building"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'Building' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Building"
                }
              }
            }
          },
          "404": {
            "description": "'Building' not found!"
          },
          "400": {
            "description": "if 'Building' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Buildings/ByCode/{code}": {
      "get": {
        "tags": [
          "Core.Buildings"
        ],
        "summary": "Fetch a single 'Building' based on its code.",
        "operationId": "Buildings_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Building"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Buildings' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Buildings/Count": {
      "get": {
        "tags": [
          "Core.Buildings"
        ],
        "summary": "Fetch the total count of 'Buildings'.",
        "operationId": "Buildings_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'Buildings' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Buildings/{guid}/Download/{filename}": {
      "get": {
        "tags": [
          "Core.Buildings"
        ],
        "summary": "TODO",
        "operationId": "Buildings_Download",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "description": "filename",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "item or file not found"
          },
          "200": {
            "description": "returns one file specified filename of an item specified by guid",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Buildings/{guid}/Documents": {
      "get": {
        "tags": [
          "Core.Buildings"
        ],
        "summary": "TODO",
        "operationId": "Buildings_Documents",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns all documents (without content) of an item specified by guid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CompanyAddresses": {
      "get": {
        "tags": [
          "Core.CompanyAddresses"
        ],
        "summary": "Fetch the list of all 'CompanyAddresses'.",
        "operationId": "CompanyAddresses_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'CompanyAddresses' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Core.CompanyAddresses"
        ],
        "summary": "Create a new 'CompanyAddress'.",
        "operationId": "CompanyAddresses_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'CompanyAddress' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'CompanyAddress' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyAddress"
                }
              }
            }
          },
          "400": {
            "description": "if given 'CompanyAddress' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CompanyAddresses/{guid}": {
      "get": {
        "tags": [
          "Core.CompanyAddresses"
        ],
        "summary": "Fetch a 'CompanyAddress' by the global identifier.",
        "operationId": "CompanyAddresses_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyAddress"
                }
              }
            }
          },
          "404": {
            "description": "'CompanyAddress' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.CompanyAddresses"
        ],
        "summary": "Delete a 'CompanyAddress' by given global identifier",
        "operationId": "CompanyAddresses_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'CompanyAddress' by given identifier was deleted"
          },
          "400": {
            "description": "'CompanyAddress' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Core.CompanyAddresses"
        ],
        "summary": "Update an specified 'CompanyAddress' by given global identifier.",
        "operationId": "CompanyAddresses_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'CompanyAddress' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'CompanyAddress' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyAddress"
                }
              }
            }
          },
          "404": {
            "description": "'CompanyAddress' not found!"
          },
          "400": {
            "description": "if 'CompanyAddress' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CompanyAddresses/ByCode/{code}": {
      "get": {
        "tags": [
          "Core.CompanyAddresses"
        ],
        "summary": "Fetch a single 'CompanyAddress' based on its code.",
        "operationId": "CompanyAddresses_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'CompanyAddresses' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CompanyAddresses/Count": {
      "get": {
        "tags": [
          "Core.CompanyAddresses"
        ],
        "summary": "Fetch the total count of 'CompanyAddresses'.",
        "operationId": "CompanyAddresses_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'CompanyAddresses' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CompanyAddresses/{guid}/Download/{filename}": {
      "get": {
        "tags": [
          "Core.CompanyAddresses"
        ],
        "summary": "TODO",
        "operationId": "CompanyAddresses_Download",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "description": "filename",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "item or file not found"
          },
          "200": {
            "description": "returns one file specified filename of an item specified by guid",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CompanyAddresses/{guid}/Documents": {
      "get": {
        "tags": [
          "Core.CompanyAddresses"
        ],
        "summary": "TODO",
        "operationId": "CompanyAddresses_Documents",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns all documents (without content) of an item specified by guid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CostCenters": {
      "get": {
        "tags": [
          "Core.CostCenters"
        ],
        "summary": "Fetch the list of all 'CostCenters'.",
        "operationId": "CostCenters_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'CostCenters' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Core.CostCenters"
        ],
        "summary": "Create a new 'CostCenter'.",
        "operationId": "CostCenters_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'CostCenter' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'CostCenter' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostCenter"
                }
              }
            }
          },
          "400": {
            "description": "if given 'CostCenter' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CostCenters/{guid}": {
      "get": {
        "tags": [
          "Core.CostCenters"
        ],
        "summary": "Fetch a 'CostCenter' by the global identifier.",
        "operationId": "CostCenters_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostCenter"
                }
              }
            }
          },
          "404": {
            "description": "'CostCenter' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.CostCenters"
        ],
        "summary": "Delete a 'CostCenter' by given global identifier",
        "operationId": "CostCenters_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'CostCenter' by given identifier was deleted"
          },
          "400": {
            "description": "'CostCenter' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Core.CostCenters"
        ],
        "summary": "Update an specified 'CostCenter' by given global identifier.",
        "operationId": "CostCenters_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'CostCenter' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'CostCenter' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostCenter"
                }
              }
            }
          },
          "404": {
            "description": "'CostCenter' not found!"
          },
          "400": {
            "description": "if 'CostCenter' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CostCenters/ByCode/{code}": {
      "get": {
        "tags": [
          "Core.CostCenters"
        ],
        "summary": "Fetch a single 'CostCenter' based on its code.",
        "operationId": "CostCenters_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'CostCenters' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/CostCenters/Count": {
      "get": {
        "tags": [
          "Core.CostCenters"
        ],
        "summary": "Fetch the total count of 'CostCenters'.",
        "operationId": "CostCenters_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'CostCenters' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Sites": {
      "get": {
        "tags": [
          "Core.Sites"
        ],
        "summary": "Fetch the list of all 'Sites'.",
        "operationId": "Sites_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) A csv list of all child properties to expand for this resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Site"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Sites' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Core.Sites"
        ],
        "summary": "Create a new 'Site'.",
        "operationId": "Sites_Create",
        "requestBody": {
          "x-name": "item",
          "description": "The 'Site' to create.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Site"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "creates a 'Site' and returns the new item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          },
          "400": {
            "description": "if given 'Site' is invalid"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Sites/{guid}": {
      "get": {
        "tags": [
          "Core.Sites"
        ],
        "summary": "Fetch a 'Site' by the global identifier.",
        "operationId": "Sites_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          },
          "404": {
            "description": "'Site' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.Sites"
        ],
        "summary": "Delete a 'Site' by given global identifier",
        "operationId": "Sites_Delete",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "'Site' by given identifier was deleted"
          },
          "400": {
            "description": "'Site' could not be delete"
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Core.Sites"
        ],
        "summary": "Update an specified 'Site' by given global identifier.",
        "operationId": "Sites_Update",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "item",
          "description": "The 'Site' to update.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Site"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "updates an specified 'Site' by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          },
          "404": {
            "description": "'Site' not found!"
          },
          "400": {
            "description": "if 'Site' is not valid"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Sites/ByCode/{code}": {
      "get": {
        "tags": [
          "Core.Sites"
        ],
        "summary": "Fetch a single 'Site' based on its code.",
        "operationId": "Sites_GetByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The code.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) start page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "limit",
            "in": "query",
            "description": "(optional) limit of  records per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 2147483647.0,
              "minimum": 1.0,
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "expand",
            "in": "query",
            "description": "(optional) The csv list of properties to expand in result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of all items identified by the 'code'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Site"
                  }
                }
              }
            }
          },
          "404": {
            "description": "no 'Sites' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter 'code' missing"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Sites/Count": {
      "get": {
        "tags": [
          "Core.Sites"
        ],
        "summary": "Fetch the total count of 'Sites'.",
        "operationId": "Sites_GetCount",
        "responses": {
          "200": {
            "description": "returns a count of items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "no 'Sites' found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Sites/{guid}/Download/{filename}": {
      "get": {
        "tags": [
          "Core.Sites"
        ],
        "summary": "TODO",
        "operationId": "Sites_Download",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "description": "filename",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "404": {
            "description": "item or file not found"
          },
          "200": {
            "description": "returns one file specified filename of an item specified by guid",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Sites/{guid}/Documents": {
      "get": {
        "tags": [
          "Core.Sites"
        ],
        "summary": "TODO",
        "operationId": "Sites_Documents",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns all documents (without content) of an item specified by guid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Sites/{siteGuid}/{buildingGuid}/FlatHierarchy": {
      "get": {
        "tags": [
          "Core.Sites"
        ],
        "summary": "TODO",
        "operationId": "Sites_FlatHierarchy",
        "parameters": [
          {
            "name": "siteGuid",
            "in": "path",
            "required": true,
            "description": "global site identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "buildingGuid",
            "in": "path",
            "required": true,
            "description": "global building identifier (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns flat hierarchy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomDataTable"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Subscribe/{subscriberGuid}": {
      "get": {
        "tags": [
          "Core.Webhooks"
        ],
        "summary": "Get info about a subscriber",
        "operationId": "Subscribe_Subscribe",
        "parameters": [
          {
            "name": "subscriberGuid",
            "in": "path",
            "required": true,
            "description": "subscriberGuid",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Subscriber data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              }
            }
          },
          "404": {
            "description": "Subscriber not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Core.Webhooks"
        ],
        "summary": "Unsubscribe from a web hook",
        "operationId": "Subscribe_Unsubscribe",
        "parameters": [
          {
            "name": "subscriberGuid",
            "in": "path",
            "required": true,
            "description": "subscriberGuid",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Subscribe": {
      "post": {
        "tags": [
          "Core.Webhooks"
        ],
        "summary": "Subscribe to a web hook",
        "operationId": "Subscribe_Subscribe2",
        "requestBody": {
          "x-name": "data",
          "description": "data",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SubscribeParameter"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "subscriberGuid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/eInvoice/UBLById": {
      "get": {
        "tags": [
          "eInvoice"
        ],
        "summary": "Trial version, get xRechnung XML data for outgoing invoice.",
        "operationId": "Xinvoice_UBLById",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "query",
            "required": true,
            "description": "outgoing invoice ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns eInvoice UBL (Universal Business Language)",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "'eInvoice not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'invoice ID'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/eInvoice/ZUGFeRdById": {
      "get": {
        "tags": [
          "eInvoice"
        ],
        "summary": "Trial version, get ZUGFeRD 2 XML data for outgoing invoice.",
        "operationId": "Xinvoice_ZUGFeRdById",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "query",
            "required": true,
            "description": "outgoing invoice ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "returns ZUGFeRd XML-invoice data",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "'Invoice not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'invoice ID'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/eInvoice/CreateInvoiceFromXml": {
      "post": {
        "tags": [
          "eInvoice"
        ],
        "summary": "created incomming invoice from posted xml document ",
        "operationId": "Xinvoice_CreateInvoiceFromXml",
        "responses": {
          "200": {
            "description": "returns Guid of neu invoice",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "404": {
            "description": "'Invoice not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'xmlData'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/My/Info": {
      "get": {
        "tags": [
          "My"
        ],
        "summary": "provides information about the logged-in user",
        "operationId": "My_GetMyInfo",
        "responses": {
          "200": {
            "description": "Me (the logged-in user)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogonUserDto"
                }
              }
            }
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/My/Buildings": {
      "get": {
        "tags": [
          "My"
        ],
        "summary": "provides all buildings for which a room allocation could be determined.",
        "operationId": "My_GetMyBuildings",
        "responses": {
          "200": {
            "description": "a list of 'my' buildings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BuildingDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/My/Buildings/{building}/Rooms": {
      "get": {
        "tags": [
          "My"
        ],
        "summary": "returns all rooms for which a room allocation could be determined based on the given building {building}",
        "operationId": "My_GetMyRoomsInBuilding",
        "parameters": [
          {
            "name": "building",
            "in": "path",
            "required": true,
            "description": "unique code",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "a list of 'my' rooms in building",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoomDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Elements/{guid}/{type}": {
      "get": {
        "tags": [
          "Core.Elements"
        ],
        "summary": "Fetch a 'Element' by the global identifier.",
        "operationId": "Elements_GetByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier (GUID/UUID) - 5b0a59d9-a283-4bd1-8dc5-2e0ec5a74fed",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "description": "type",
            "schema": {
              "$ref": "#/components/schemas/ElementType"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "returns an item specified by given identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementDto"
                }
              }
            }
          },
          "404": {
            "description": "'Element' not found!"
          },
          "401": {
            "description": "Unauthorized, the EtaskApiToken is missing or invalid (expired)"
          },
          "400": {
            "description": "Parameter missing 'guid'"
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Elements/{guid}/{type}/Annotation": {
      "post": {
        "tags": [
          "Core.Elements"
        ],
        "summary": "TODO",
        "operationId": "Elements_CreateAnnotation",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "global identifier of element (GUID/UUID)",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "description": "type",
            "schema": {
              "$ref": "#/components/schemas/ElementType"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "data",
          "description": "data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": "upload Ok"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Core/Elements": {
      "put": {
        "tags": [
          "Core.Elements"
        ],
        "summary": "TODO",
        "operationId": "Elements_Update",
        "requestBody": {
          "x-name": "data",
          "description": "data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ElementDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Update - OK"
          },
          "404": {
            "description": "Update - Not found!"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Exception"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    },
    "/Client/Url": {
      "get": {
        "tags": [
          "Client.Query"
        ],
        "summary": "Query the usage info of a customer for use in an app ",
        "operationId": "Client_GetUrlByCode",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "description": "of client, excat 4 letters",
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z]{4,}"
            },
            "x-position": 1
          },
          {
            "name": "appName",
            "in": "query",
            "required": true,
            "description": "of requesting (android/iOS/Web or other) app",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "appVersion",
            "in": "query",
            "required": true,
            "description": "of requesting (android/iOS/Web or other) app",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "the usage info of a customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageInfoDto"
                }
              }
            }
          },
          "404": {
            "description": "requested usage info for customer not found"
          },
          "400": {
            "description": "client code is not valid"
          },
          "500": {
            "description": "see response for further information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiException"
                }
              }
            }
          }
        },
        "security": [
          {
            "EtaskApiToken": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AllocationPersonnelToHseqFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AllocationPersonnelToHseqFunctionBase"
          },
          {
            "type": "object",
            "description": "Here you assign employees to the HSE function they perform. This enables you to\nassign the employee in participant scheduling to a course in the area of the\nexisting HSE function. If the HSE function is a basic function, all employees\ncan participate in a training course in their area. An additional assignment of\nemployees to the basic function is therefore not necessary, but may be useful\nfor organizational purposes, since the employees actually hold the HSE function\nduring the assignment.",
            "additionalProperties": false,
            "properties": {
              "Documents": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Documents"
                  }
                ]
              },
              "Annotations": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Annotations"
                  }
                ]
              }
            }
          }
        ]
      },
      "Documents": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilesOfDocument"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "FilesOfDocument": {
        "allOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "UploadSectionGuid": {
                "type": "string",
                "format": "guid"
              },
              "SelectColumns": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "Document": {
        "allOf": [
          {
            "$ref": "#/components/schemas/File"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "File": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ContentType": {
            "type": "string",
            "description": "type of content",
            "nullable": true
          },
          "Filename": {
            "type": "string",
            "description": "name of file in database",
            "nullable": true
          },
          "Filesize": {
            "type": "integer",
            "description": "size in byte of file",
            "format": "int32",
            "nullable": true
          },
          "Guid": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "Annotations": {
        "allOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Annotation"
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "SelectColumns": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "Annotation": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "SystemInfo": {
            "type": "boolean"
          },
          "User": {
            "type": "string",
            "nullable": true
          },
          "UserEmail": {
            "type": "string",
            "nullable": true
          },
          "Text": {
            "type": "string",
            "nullable": true
          },
          "Subject": {
            "type": "string",
            "nullable": true
          },
          "Recipients": {
            "type": "string",
            "nullable": true
          },
          "CcRecipients": {
            "type": "string",
            "nullable": true
          },
          "Guid": {
            "type": "string",
            "format": "guid"
          },
          "IsValid": {
            "type": "boolean"
          },
          "IsNew": {
            "type": "boolean"
          },
          "IsLoaded": {
            "type": "boolean"
          }
        }
      },
      "AllocationPersonnelToHseqFunctionBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "HseqFunction",
              "Person",
              "InEmergencyCalllist",
              "Visible"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "HseqFunction": {
                "description": "HSE Function",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/HseqFunction"
                  }
                ]
              },
              "Person": {
                "description": "Staff Member",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "InEmergencyCalllist": {
                "type": "boolean",
                "description": "Specify here whether this person is published in the emergency call list."
              },
              "Visible": {
                "type": "boolean",
                "description": "visible?"
              },
              "AppointmentSince": {
                "type": "string",
                "description": "Specify the date of the official appointment of the Commissioner.",
                "format": "date-time",
                "nullable": true
              },
              "DispatchOfAguformtoworkscouncilon": {
                "type": "string",
                "description": "Enter the date on which the \"Registration and deregistration form for\nrepresentatives for occupational safety, health and environmental protection\"\n(AGU) was sent to the works council.",
                "format": "date-time",
                "nullable": true
              },
              "LoggedOutOn": {
                "type": "string",
                "description": "Specify the date from which the representative is no longer appointed to the HSE\nfunction.",
                "format": "date-time",
                "nullable": true
              },
              "MarkedOn": {
                "type": "string",
                "description": "Enter the date from which the person responsible for the HSE function is\nflagged.",
                "format": "date-time",
                "nullable": true
              },
              "ReceiptOfAguformfromworkscouncilon": {
                "type": "string",
                "description": "Enter the date on which the \"Registration and deregistration form for\nrepresentatives for occupational safety, health and environmental protection\"\n(AGU) completed by the works council is available.",
                "format": "date-time",
                "nullable": true
              },
              "RequirementsForHsefunctionfulfilledsince": {
                "type": "string",
                "description": "Specify here the date from which the agent fulfills all requirements for the HSE\nfunction.",
                "format": "date-time",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "HseqFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HseqFunctionBase"
          },
          {
            "type": "object",
            "description": "Use this form to create HSE functions or responsibilities (for example, \"first\nresponder\" or \"waste manager\") and assign employees to these functions. You can\nalso specify the intervals for the training courses based on the existing HSE\nfunction and define the HSE function as the basic function. The training courses\nbelonging to the function are listed in the lower part of the form.",
            "additionalProperties": false,
            "properties": {
              "Images": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Images"
                  }
                ]
              }
            }
          }
        ]
      },
      "Images": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilesOfImage"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "FilesOfImage": {
        "allOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "UploadSectionGuid": {
                "type": "string",
                "format": "guid"
              },
              "SelectColumns": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "Image": {
        "allOf": [
          {
            "$ref": "#/components/schemas/File"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "HseqFunctionBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "BasicHseFunction",
              "DisplayInFloorplan",
              "LegalObligationToReport"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Person": {
                "description": "Coordinator",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "BasicHseFunction": {
                "type": "boolean",
                "description": "Basic HSE Function"
              },
              "DisplayInFloorplan": {
                "type": "boolean",
                "description": "Specifies whether the HSE function is to be displayed in the floor plan."
              },
              "LegalObligationToReport": {
                "type": "boolean",
                "description": "Legal Obligation to Report"
              },
              "BasicTrainingIntervalmonths": {
                "type": "integer",
                "description": "Basic Training Interval [Months]",
                "format": "int32",
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "Code",
                "maxLength": 50,
                "nullable": true
              },
              "Description": {
                "type": "string",
                "description": "Enter a detailed description of the HSE function.",
                "maxLength": 4000,
                "nullable": true
              },
              "FollowUpTrainingIntervalMonths": {
                "type": "integer",
                "description": "Follow-Up Training Interval [Months]",
                "format": "int32",
                "nullable": true
              },
              "LegalFoundationForOrder": {
                "type": "string",
                "description": "Legal Foundation for Order",
                "maxLength": 50,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Name",
                "maxLength": 50,
                "nullable": true
              },
              "NotificationInterval": {
                "type": "integer",
                "description": "Notification Interval",
                "format": "int32",
                "nullable": true
              },
              "Remark": {
                "type": "string",
                "description": "Remark",
                "maxLength": 200,
                "nullable": true
              },
              "ReminderLeadTimeMonths": {
                "type": "integer",
                "description": "Specify the lead time for a reminder for the next follow-up training in months.",
                "format": "int32",
                "nullable": true
              },
              "RequiredQualification": {
                "type": "string",
                "description": "Required Qualification",
                "maxLength": 50,
                "nullable": true
              },
              "SortingInFloorPlan": {
                "type": "integer",
                "description": "Enter the position at which the HSE function is to be displayed in the floor\nplan.",
                "format": "int32",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Person": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PersonBase"
          },
          {
            "type": "object",
            "description": "Use this form to create employee records to keep track of your staff. You can\nthen select the persons entered here in various forms in the FM portal to assign\ntasks to them, for example. Enter data to identify the employee and his or her\ncontact data. Assign the employee to the room in which he or she works. Manage\nthe employee's access data and rights within the FM portal. Assign the inventory\nto the employee that he or she uses and that is displayed on his or her\npersonalized start page. When using eTASK. key management, the keys handed out\nto the employee are displayed. When using eTASK. employee examinations, the\ncompany medical examinations in which the employee participated are listed.",
            "additionalProperties": false,
            "properties": {
              "Images": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Images"
                  }
                ]
              },
              "Employee": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Employee"
                  }
                ]
              },
              "MyRooms": {
                "description": "meine Räume",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Rooms"
                  }
                ]
              },
              "MyFloors": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Floors"
                  }
                ]
              },
              "MyBuildings": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Buildings"
                  }
                ]
              },
              "MySites": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Sites"
                  }
                ]
              },
              "MyRoles": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "Employee": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EmployeeBase"
          },
          {
            "type": "object",
            "description": "Create data records for the employees in your company so that you can manage\nthem within project management. Enter the personal data and the bank details for\npayroll. Write down information on working hours and the employee's leave times.",
            "additionalProperties": false,
            "properties": {
              "WorkingTimeAccount": {
                "description": "Gets or sets the working time account.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WorkingTimeAccount"
                  }
                ]
              }
            }
          }
        ]
      },
      "WorkingTimeAccount": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Workplace": {
            "type": "string",
            "description": "Gets or sets the workplace of the projectstaff",
            "nullable": true
          },
          "TotalTargetHours": {
            "type": "number",
            "description": "Gets or sets the total target hours.",
            "format": "double"
          },
          "TotalWorkedHours": {
            "type": "number",
            "description": "Gets or sets the total worked hours.",
            "format": "double"
          },
          "TotalHoursDifference": {
            "type": "number",
            "description": "Gets difference TotalTargetHours - TotalWorkedHours",
            "format": "double"
          },
          "OvertimeHours": {
            "type": "number",
            "description": "Gets or sets the overtime hours.",
            "format": "double"
          },
          "OvertimePaid": {
            "type": "number",
            "description": "Gets or sets the paid overtime.",
            "format": "double"
          },
          "RemainingVacationLastYear": {
            "type": "number",
            "description": "Gets remaining vacation from last year",
            "format": "double"
          },
          "TotalVacationThisYear": {
            "type": "number",
            "description": "Gets vacation entitlement this year",
            "format": "double"
          },
          "VacationEntitlement": {
            "type": "number",
            "description": "Gets total vacation this year",
            "format": "double"
          },
          "RemainingVacation": {
            "type": "number",
            "description": "Gets or sets the remaining vacation.",
            "format": "double"
          },
          "TakenVacationThisYear": {
            "type": "number",
            "description": "Gets taken Vacation this year",
            "format": "double"
          },
          "TakenVacationThisMonth": {
            "type": "number",
            "description": "Gets taken Vacation this month",
            "format": "double"
          }
        }
      },
      "EmployeeBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "HasWorkingTimeAccount",
              "IsProjectManager",
              "MaintainTimesheet"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Person": {
                "description": "Selection of the employee These entries come from the personnel list.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "Timesheets": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Timesheet"
                }
              },
              "Overtimes": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Overtime"
                }
              },
              "WeeklyWorkingTimes": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/WeeklyWorkingTime"
                }
              },
              "HasWorkingTimeAccount": {
                "type": "boolean",
                "description": "Specifies whether the employee has an hours account. The hours in the hours\naccount are then paid by the company."
              },
              "IsProjectManager": {
                "type": "boolean",
                "description": "Project manager"
              },
              "MaintainTimesheet": {
                "type": "boolean",
                "description": "Timesheets"
              },
              "GivenName": {
                "type": "string",
                "description": "First name",
                "maxLength": 50,
                "nullable": true
              },
              "HiringDate": {
                "type": "string",
                "description": "Date of staff entry",
                "format": "date-time",
                "nullable": true
              },
              "LeavingDate": {
                "type": "string",
                "description": "Exit Date",
                "format": "date-time",
                "nullable": true
              },
              "SurName": {
                "type": "string",
                "description": "Last name",
                "maxLength": 50,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Timesheet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TimesheetBase"
          },
          {
            "type": "object",
            "description": "Enter the services you performed on a workday. This also involves the\npreparation of service invoices to customers.",
            "additionalProperties": false
          }
        ]
      },
      "TimesheetBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Employee": {
                "description": "Personnel",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Employee"
                  }
                ]
              },
              "PresenceLoaction": {
                "description": "Type of attendance time (availability) on this working day, e.g. office, home\noffice",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PresenceLocation"
                  }
                ]
              },
              "WorkDescriptions": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/WorkDescription"
                }
              },
              "CheckIn": {
                "type": "string",
                "description": "Arrived (hh:mm)",
                "maxLength": 5,
                "nullable": true
              },
              "CheckOut": {
                "type": "string",
                "description": "Leaving (hh:mm)",
                "maxLength": 5,
                "nullable": true
              },
              "Date": {
                "type": "string",
                "description": "Date",
                "format": "date-time",
                "nullable": true
              },
              "TotalBillableHours": {
                "type": "number",
                "description": "Daily total of billable hours",
                "format": "decimal",
                "nullable": true
              },
              "TotalHours": {
                "type": "number",
                "description": "Daily total Hours",
                "format": "decimal",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "PresenceLocation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PresenceLocationBase"
          },
          {
            "type": "object",
            "description": "Usual place of work of the employee in the case of office work.",
            "additionalProperties": false
          }
        ]
      },
      "PresenceLocationBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Identification"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Identification": {
                "type": "string",
                "description": "Designation of the type of presence at the workplace, e.g. office or home office",
                "maxLength": 255,
                "minLength": 1
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "BusinessObjectBase": {
        "type": "object",
        "description": "Base class for business object",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "RecordCreated": {
            "type": "string",
            "format": "date-time"
          },
          "RecordModified": {
            "type": "string",
            "format": "date-time"
          },
          "RecordCreatedBy": {
            "type": "string",
            "nullable": true
          },
          "RecordModifiedBy": {
            "type": "string",
            "nullable": true
          },
          "RecordModifiedFrom": {
            "type": "string",
            "nullable": true
          },
          "RecordModifiedWith": {
            "type": "string",
            "nullable": true
          },
          "RecordDeactivated": {
            "type": "boolean"
          },
          "RecordValidFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "RecordValidTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "WorkDescription": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkDescriptionBase"
          },
          {
            "type": "object",
            "description": "Enter descriptions for the services processed here. Assign an internal billing\nnumber (EAN) to the service, via which the service is to be billed for, and\nenter an exact description of the service.",
            "additionalProperties": false,
            "properties": {
              "Documents": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Documents"
                  }
                ]
              }
            }
          }
        ]
      },
      "WorkDescriptionBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Timesheet",
              "Calculation"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "InternalOrderNumber": {
                "description": "EAN",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/InternalOrderNumber"
                  }
                ]
              },
              "OutgoingInvoiceItem": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "Timesheet": {
                "description": "Day of performance of services to combine several works on one working day.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Timesheet"
                  }
                ]
              },
              "Calculation": {
                "type": "boolean",
                "description": "Calculation"
              },
              "debisHhmm": {
                "type": "string",
                "description": "Time of end of activity",
                "maxLength": 5,
                "nullable": true
              },
              "Description": {
                "type": "string",
                "description": "Service description",
                "maxLength": 2000,
                "nullable": true
              },
              "devonHhmm": {
                "type": "string",
                "description": "Time of the start of the activity",
                "maxLength": 5,
                "nullable": true
              },
              "Hours": {
                "type": "number",
                "description": "Hours",
                "format": "double",
                "nullable": true
              },
              "QmCommentId": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "QmNumber": {
                "type": "string",
                "description": "Recording of the QM number from qm.etask.de",
                "maxLength": 15,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "InternalOrderNumber": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InternalOrderNumberBase"
          },
          {
            "type": "object",
            "description": "Use this form to create internal payroll numbers (EANs) that your employees can\nuse to run payroll for their hours. Also make various settings for billing the\nhours.",
            "additionalProperties": false
          }
        ]
      },
      "InternalOrderNumberBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "AllowModifications",
              "Calculation",
              "Code",
              "FlatrateAccounting",
              "Locked",
              "NoWorkingTimeAccountInfluence",
              "SettlementLevel",
              "SoftwareExtension"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Category": {
                "description": "Category",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/InternalOrderNumberCategory"
                  }
                ]
              },
              "Product": {
                "type": "integer",
                "description": "The product that can be extended by the services registered on this EAN at the\ncustomer's request.",
                "format": "int32",
                "nullable": true
              },
              "AssignmentEansToReceifedOrderItems": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AssignmentEansToReceifedOrderItem"
                }
              },
              "WorkDescriptions": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/WorkDescription"
                }
              },
              "AllowModifications": {
                "type": "boolean",
                "description": "allow modifications"
              },
              "Calculation": {
                "type": "boolean",
                "description": "Calculation"
              },
              "Code": {
                "type": "string",
                "description": "Code",
                "maxLength": 50,
                "minLength": 1
              },
              "FlatrateAccounting": {
                "type": "boolean",
                "description": "Specifies whether the settlement of the hours entered on the EAN is flat-rate,\nwhich means that the hours are not displayed on the customer invoice but are\npaid flat-rate."
              },
              "Locked": {
                "type": "boolean",
                "description": "blocked?"
              },
              "NoWorkingTimeAccountInfluence": {
                "type": "boolean",
                "description": "no influence on working-time account"
              },
              "SettlementLevel": {
                "type": "boolean",
                "description": "Specifies whether a billing rate is used The billing rate specifies the\npercentage of the hourly service performed within the framework of an order that\nis paid directly by the customer."
              },
              "SoftwareExtension": {
                "type": "boolean",
                "description": "Calculation of these services in the update service for software extensions"
              },
              "Description": {
                "type": "string",
                "description": "Description",
                "maxLength": 4000,
                "nullable": true
              },
              "Identification": {
                "type": "string",
                "description": "Identification",
                "maxLength": 100,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "InternalOrderNumberCategory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InternalOrderNumberCategoryBase"
          },
          {
            "type": "object",
            "description": "Use this form to create categories for internal settlement numbers so that you\ncan specify them later.",
            "additionalProperties": false
          }
        ]
      },
      "InternalOrderNumberCategoryBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Code"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Code": {
                "type": "string",
                "description": "Code",
                "maxLength": 8,
                "minLength": 1
              },
              "Identification": {
                "type": "string",
                "description": "Identification",
                "maxLength": 255,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "AssignmentEansToReceifedOrderItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AssignmentEansToReceifedOrderItemBase"
          },
          {
            "type": "object",
            "description": "Internal settlement numbers (EANs) are assigned to order items here.",
            "additionalProperties": false
          }
        ]
      },
      "AssignmentEansToReceifedOrderItemBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "InternalOrdersEan",
              "ReceivedOrderItem"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "InternalOrdersEan": {
                "description": "EAN",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/InternalOrderNumber"
                  }
                ]
              },
              "ReceivedOrderItem": {
                "description": "Order item",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ReceivedOrderItem"
                  }
                ]
              },
              "ApplicableFrom": {
                "type": "string",
                "description": "Valid from",
                "format": "date-time",
                "nullable": true
              },
              "ApplicableTill": {
                "type": "string",
                "description": "Valid till",
                "format": "date-time",
                "nullable": true
              },
              "StandardTextSettlement": {
                "type": "string",
                "description": "Defining the text that is printed as standard text in the settlement of this\norder item on the A/R invoice",
                "maxLength": 255,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "ReceivedOrderItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReceivedOrderItemBase"
          },
          {
            "type": "object",
            "description": "Here you create order items for an order.",
            "additionalProperties": false
          }
        ]
      },
      "ReceivedOrderItemBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "FixedPrice"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "NominalAccounts": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "Product": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "ReceivedOrder": {
                "description": "Ordering number",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ReceivedOrder"
                  }
                ]
              },
              "ReceivedOrderItemType": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "SalesCategories": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "AssignmentEansToReceifedOrderItems": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AssignmentEansToReceifedOrderItem"
                }
              },
              "FixedPrice": {
                "type": "boolean",
                "description": "Fixed Price"
              },
              "Code": {
                "type": "string",
                "description": "Code",
                "maxLength": 10,
                "nullable": true
              },
              "ItemText": {
                "type": "string",
                "description": "Item text",
                "maxLength": 100,
                "nullable": true
              },
              "Value": {
                "type": "number",
                "description": "Value [€]",
                "format": "decimal",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "ReceivedOrder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReceivedOrderBase"
          },
          {
            "type": "object",
            "description": "You can manage all orders that have been issued to your company here. Enter\nidentification data and store all important order data, for example, the type\nand content of the order. Manage the settlement of the order and specify the\nquotation to which it belongs.",
            "additionalProperties": false,
            "properties": {
              "Documents": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Documents"
                  }
                ]
              },
              "Annotations": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Annotations"
                  }
                ]
              }
            }
          }
        ]
      },
      "ReceivedOrderBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Finished",
              "InvoicingAsBudgeted",
              "OralAgreement",
              "StandardDiscountNotapplicableinthefuture"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "CompanyAddress": {
                "description": "Selection of the company that accepted the order.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "Contract": {
                "type": "integer",
                "description": "Assign the contract on the basis of which the order was placed to the order.",
                "format": "int32",
                "nullable": true
              },
              "Corporation": {
                "type": "integer",
                "description": "Company in whose name the order is performed. This company is legally the\noffering and invoicing organisation",
                "format": "int32",
                "nullable": true
              },
              "Customer": {
                "type": "integer",
                "description": "Customer",
                "format": "int32",
                "nullable": true
              },
              "Debitor": {
                "type": "integer",
                "description": "Customer (customer) who ordered the services that are organized, performed and\nbilled using this order",
                "format": "int32",
                "nullable": true
              },
              "InvoiceAddress": {
                "type": "integer",
                "description": "Invoice address",
                "format": "int32",
                "nullable": true
              },
              "Offer": {
                "type": "integer",
                "description": "go to offer",
                "format": "int32",
                "nullable": true
              },
              "PaymentDueDate": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "ProjectStaff": {
                "description": "Project manager",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Employee"
                  }
                ]
              },
              "ReceivedOrderType": {
                "type": "integer",
                "description": "Service level",
                "format": "int32",
                "nullable": true
              },
              "ReceivedOrderItems": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ReceivedOrderItem"
                }
              },
              "Finished": {
                "type": "boolean",
                "description": "done"
              },
              "InvoicingAsBudgeted": {
                "type": "boolean",
                "description": "invoicing as budgeted"
              },
              "OralAgreement": {
                "type": "boolean",
                "description": "Oral agreement?"
              },
              "StandardDiscountNotapplicableinthefuture": {
                "type": "boolean",
                "description": "Specifies whether the standard discount should be estimated for settlement of\nthe order."
              },
              "BriefDescription": {
                "type": "string",
                "description": "Short order/job description",
                "maxLength": 50,
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "Code",
                "maxLength": 50,
                "nullable": true
              },
              "CostCenter": {
                "type": "string",
                "description": "Cost center",
                "maxLength": 50,
                "nullable": true
              },
              "Date": {
                "type": "string",
                "description": "Date",
                "format": "date-time",
                "nullable": true
              },
              "DeliverySpecialist": {
                "type": "string",
                "description": "Delivery specialist",
                "maxLength": 255,
                "nullable": true
              },
              "DetailedDescription": {
                "type": "string",
                "description": "Detailed description",
                "maxLength": 255,
                "nullable": true
              },
              "InvoicingSpecialist": {
                "type": "string",
                "description": "Invoicing specialist",
                "maxLength": 255,
                "nullable": true
              },
              "JoborderEnd": {
                "type": "string",
                "description": "job/order end",
                "format": "date-time",
                "nullable": true
              },
              "OrderingNumber": {
                "type": "string",
                "description": "Ordering number",
                "maxLength": 50,
                "nullable": true
              },
              "OrderSpecialist": {
                "type": "string",
                "description": "Order specialist",
                "maxLength": 50,
                "nullable": true
              },
              "OrderTotal": {
                "type": "number",
                "description": "Order total [€]",
                "format": "decimal",
                "nullable": true
              },
              "Remarks": {
                "type": "string",
                "description": "Remarks",
                "maxLength": 4000,
                "nullable": true
              },
              "SettlementType": {
                "type": "string",
                "description": "Settlement type",
                "maxLength": 255,
                "nullable": true
              },
              "TermOfPayment": {
                "type": "integer",
                "description": "Term of payment",
                "format": "int32",
                "nullable": true
              },
              "Unassigned": {
                "type": "string",
                "description": "unassigned",
                "maxLength": 255,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "CompanyAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CompanyAddressBase"
          },
          {
            "type": "object",
            "description": "Enter data records for all external companies with which the FM department\ncooperates. These data records are available in many places of the FM portal\n(e.g. to identify the contractor in eTASK Maintenance). Assign the company a\ntype, a trade, address and communication details, and company employee data.\nEvaluate the company (adherence to delivery dates, price loyalty, etc.) to\ndocument the relationship of trust. Upload documents concerning this company.\nWhen using eTASK.CAD, the company's identification in CAD plans is also\ndocumented here. When using eTASK. contractor logon, the company's employees are\nregistered who have temporary access to the building for work. If eTASK\ndeficiency management is used, the construction projects in which the company is\nthe client are assigned to the company.",
            "additionalProperties": false,
            "properties": {
              "Images": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Images"
                  }
                ]
              },
              "Documents": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Documents"
                  }
                ]
              },
              "Annotations": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Annotations"
                  }
                ]
              }
            }
          }
        ]
      },
      "CompanyAddressBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "ActivationForRegistrationManagement",
              "ContactPersonMailContact",
              "Customer",
              "ExportFlag",
              "IsInternalCompany",
              "Lessee",
              "Lessor",
              "Manufacturer",
              "Orderer",
              "Owner",
              "ServiceProvider",
              "ShowInEmergencyList",
              "Supplier"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "AddressType": {
                "type": "integer",
                "description": "Address Type",
                "format": "int32",
                "nullable": true
              },
              "CostCenter": {
                "description": "Select the cost center that the company belongs to.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              },
              "Trade": {
                "type": "integer",
                "description": "Select the trade to which the company should be assigned.",
                "format": "int32",
                "nullable": true
              },
              "UserGroups": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              },
              "Assets": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Asset"
                }
              },
              "ActivationForRegistrationManagement": {
                "type": "boolean",
                "description": "Indicate whether electronic personnel tracking should be activated for the\ncompany."
              },
              "ContactPersonMailContact": {
                "type": "boolean",
                "description": "Specifies whether the main contact person is to be activated for electronic\ninvoicing."
              },
              "Customer": {
                "type": "boolean",
                "description": "Indicate whether the company is a customer of your company"
              },
              "ExportFlag": {
                "type": "number",
                "description": "-- SUMMARY MISSING --",
                "format": "decimal"
              },
              "IsInternalCompany": {
                "type": "boolean",
                "description": "Indicate whether the company is an in-house company (e.g. an in-house\ndepartment)."
              },
              "Lessee": {
                "type": "boolean",
                "description": "Indicate whether the company has leased rooms from your company."
              },
              "Lessor": {
                "type": "boolean",
                "description": "Indicate whether the company leases out any premises used by your company."
              },
              "Manufacturer": {
                "type": "boolean",
                "description": "Indicate whether the company manufactures any installations used by your\ncompany."
              },
              "Orderer": {
                "type": "boolean",
                "description": "Indicate whether the company is a contracting entity for your company."
              },
              "Owner": {
                "type": "boolean",
                "description": "Indicate whether the company owns any assets or objects used by your company."
              },
              "ServiceProvider": {
                "type": "boolean",
                "description": "Indicate whether the company is a service provider for your company."
              },
              "ShowInEmergencyList": {
                "type": "boolean",
                "description": "Specify here whether this company should be displayed in the company emergency\nlist."
              },
              "Supplier": {
                "type": "boolean",
                "description": "Indicate whether the company is a supplier for your company."
              },
              "AccountingSystem": {
                "type": "string",
                "description": "Enter the name of the in-house accounting system which performs the company's\nbookkeeping.",
                "maxLength": 50,
                "nullable": true
              },
              "AreaCode": {
                "type": "string",
                "description": "Enter the area code for the company's telephone number (e.g. \"221\" for\nCologne).",
                "maxLength": 10,
                "nullable": true
              },
              "BackgroundColor": {
                "type": "integer",
                "description": "Enter the number of the background color in CAD visualization (from\n\"0\" to \"119\").",
                "format": "int32",
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "Enter an abbreviation for the company. We recommend that you do not use a\nsequential numeric code but that you use an abbreviation from which the full\ncompany name can be derived.",
                "maxLength": 50,
                "nullable": true
              },
              "CollectedBy": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 50,
                "nullable": true
              },
              "CollectionDate": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "CompanyName": {
                "type": "string",
                "description": "Enter the full company name.",
                "maxLength": 50,
                "nullable": true
              },
              "CompanyName2": {
                "type": "string",
                "description": "Company Name (2nd Row)",
                "maxLength": 50,
                "nullable": true
              },
              "CompanyName3": {
                "type": "string",
                "description": "Company Name (3rd Row)",
                "maxLength": 50,
                "nullable": true
              },
              "CompanyNameOnDoorplate": {
                "type": "string",
                "description": "Company Name on Door Plate",
                "maxLength": 50,
                "nullable": true
              },
              "ContactPerson": {
                "type": "string",
                "description": "Enter the name of the main contact person.",
                "maxLength": 50,
                "nullable": true
              },
              "ContactPersonPhoneNumber": {
                "type": "string",
                "description": "Enter the contact person's telephone number.",
                "maxLength": 50,
                "nullable": true
              },
              "ContractorNumber": {
                "type": "string",
                "description": "Contractor No.",
                "maxLength": 10,
                "nullable": true
              },
              "Country": {
                "type": "string",
                "description": "Country",
                "maxLength": 60,
                "nullable": true
              },
              "CountryDialCode": {
                "type": "string",
                "description": "Enter the country dialing code for the company's telephone number (e.g.\n\"0049\" for Germany).",
                "maxLength": 10,
                "nullable": true
              },
              "Department": {
                "type": "string",
                "description": "Department",
                "maxLength": 50,
                "nullable": true
              },
              "EMailAddress": {
                "type": "string",
                "description": "Enter the contact person's email address.",
                "maxLength": 50,
                "nullable": true
              },
              "EmailBusinessContact": {
                "type": "string",
                "description": "E-Mail",
                "maxLength": 100,
                "nullable": true
              },
              "EmailPersonalContact": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 100,
                "nullable": true
              },
              "ExternalId": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "FaxNumber": {
                "type": "string",
                "description": "Enter the company's fax number without the country or area code.",
                "maxLength": 50,
                "nullable": true
              },
              "ForegroundColor": {
                "type": "integer",
                "description": "Enter the number of the foreground color in CAD visualization (from\n\"0\" to \"119\").",
                "format": "int32",
                "nullable": true
              },
              "Function": {
                "type": "string",
                "description": "Function",
                "maxLength": 50,
                "nullable": true
              },
              "Gender": {
                "type": "string",
                "description": "Madam/Sir",
                "maxLength": 5,
                "nullable": true
              },
              "GivenName": {
                "type": "string",
                "description": "First Name",
                "maxLength": 50,
                "nullable": true
              },
              "Group": {
                "type": "string",
                "description": "Group",
                "maxLength": 50,
                "nullable": true
              },
              "GroupCode": {
                "type": "string",
                "description": "Enter the group of companies that the company belongs to.",
                "maxLength": 50,
                "nullable": true
              },
              "LastContactmeeting": {
                "type": "string",
                "description": "Last Contact/Meeting",
                "maxLength": 50,
                "nullable": true
              },
              "LetterSalutation": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 50,
                "nullable": true
              },
              "MailingAddress": {
                "type": "string",
                "description": "If created, used for correspondence instead of other address lines.",
                "maxLength": 400,
                "nullable": true
              },
              "MobilePhoneNo": {
                "type": "string",
                "description": "Enter the contact person's mobile phone number.",
                "maxLength": 50,
                "nullable": true
              },
              "NextContactMeeting": {
                "type": "string",
                "description": "Next Contact/Meeting",
                "maxLength": 50,
                "nullable": true
              },
              "OurCustomerNo": {
                "type": "string",
                "description": "Our Customer No.",
                "maxLength": 50,
                "nullable": true
              },
              "PartnerNo": {
                "type": "string",
                "description": "Enter the company’s partner number.",
                "maxLength": 50,
                "nullable": true
              },
              "Pattern": {
                "type": "integer",
                "description": "Enter the number of the pattern in CAD visualization (from \"1\" to\n\"77\").",
                "format": "int32",
                "nullable": true
              },
              "PhoneMobile": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 50,
                "nullable": true
              },
              "PhoneNo": {
                "type": "string",
                "description": "Enter the company's telephone number without the country or area code.",
                "maxLength": 50,
                "nullable": true
              },
              "PhoneNoOfficial": {
                "type": "string",
                "description": "Phone No. (official)",
                "maxLength": 50,
                "nullable": true
              },
              "PhoneNoPrivate": {
                "type": "string",
                "description": "Phone No. (private)",
                "maxLength": 50,
                "nullable": true
              },
              "PhoneNumberCentral": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 50,
                "nullable": true
              },
              "PoBox": {
                "type": "string",
                "description": "Enter a P.O. box for this company.",
                "maxLength": 15,
                "nullable": true
              },
              "PostalCode": {
                "type": "string",
                "description": "Enter the post code in the company's address.",
                "maxLength": 12,
                "nullable": true
              },
              "PostalCode2": {
                "type": "string",
                "description": "Enter the postcode for the P.O. box, if different to the general address.",
                "maxLength": 12,
                "nullable": true
              },
              "Remarks": {
                "type": "string",
                "description": "Remarks",
                "maxLength": 255,
                "nullable": true
              },
              "RemarksAdditional": {
                "type": "string",
                "description": "Remarks",
                "maxLength": 255,
                "nullable": true
              },
              "SalesTaxId": {
                "type": "string",
                "description": "Enter the company's European sales tax made up of the country code (e.g.\n\"DE\" for Germany) and max. 12 more alphanumerical characters.",
                "maxLength": 12,
                "nullable": true
              },
              "Status": {
                "type": "string",
                "description": "Status",
                "maxLength": 255,
                "nullable": true
              },
              "StreetAddress": {
                "type": "string",
                "description": "Enter the company's street address.",
                "maxLength": 50,
                "nullable": true
              },
              "Superior": {
                "type": "string",
                "description": "Superior",
                "maxLength": 50,
                "nullable": true
              },
              "SurName": {
                "type": "string",
                "description": "Last Name",
                "maxLength": 50,
                "nullable": true
              },
              "TextEmergencyList": {
                "type": "string",
                "description": "Here you can specify the malfunction for which the company is to be displayed on\nthe company emergency list (e.g. \"Heating fault clearance\").",
                "maxLength": 250,
                "nullable": true
              },
              "Title": {
                "type": "string",
                "description": "Title",
                "maxLength": 30,
                "nullable": true
              },
              "TitleForm": {
                "type": "string",
                "description": "Title Form",
                "maxLength": 50,
                "nullable": true
              },
              "Town": {
                "type": "string",
                "description": "Enter the town in the company's address.",
                "maxLength": 50,
                "nullable": true
              },
              "UserNameFmPortal": {
                "type": "string",
                "description": "Enter the user name used by the company to receive and edit tickets in the\nAperture Workflow Portal.",
                "maxLength": 50,
                "nullable": true
              },
              "Website": {
                "type": "string",
                "description": "Enter the company's website address (e.g. \"http://www.etask.de\")",
                "maxLength": 200,
                "nullable": true
              },
              "WebSitePrivate": {
                "type": "string",
                "description": "Web Site (private)",
                "maxLength": 100,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "CostCenter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CostCenterBase"
          },
          {
            "type": "object",
            "description": "Here you can create data records for cost centers in your company. The entered\ncost centers can be selected later in many places of the FM portal.",
            "additionalProperties": false
          }
        ]
      },
      "CostCenterBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Billable",
              "CanBePostedTo",
              "Code"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "CompanyAddress": {
                "description": "Select the company in which the cost center is valid.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "CostCenterType": {
                "type": "integer",
                "description": "Cost Center Type",
                "format": "int32",
                "nullable": true
              },
              "Department": {
                "type": "integer",
                "description": "Select the department to which this cost center is assigned.",
                "format": "int32",
                "nullable": true
              },
              "Buildings": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Building"
                }
              },
              "Billable": {
                "type": "boolean",
                "description": "Indicate whether the cost center is basically deemed to be projectable. Uncheck\nthe checkbox if the cost center is temporarily not projectable."
              },
              "CanBePostedTo": {
                "type": "boolean",
                "description": "Set the check mark to indicate that costs can be posted to this cost center. In\ncase the cost center is blocked for postings, uncheck the box."
              },
              "Code": {
                "type": "string",
                "description": "Enter the abbreviation for the cost center. Use the abbreviation already used\nin-house by your company.",
                "maxLength": 30,
                "minLength": 1
              },
              "BackgroundColor": {
                "type": "integer",
                "description": "Enter the number of the background color in CAD visualization (from\n\"0\" to \"119\").",
                "format": "int32",
                "nullable": true
              },
              "CompanyCode": {
                "type": "string",
                "description": "Enter the name of the accounting area in which the cost center is valid.",
                "maxLength": 10,
                "nullable": true
              },
              "CostCenterValidFrom": {
                "type": "string",
                "description": "Select the date from which the cost center is valid and bookable. You can also\nmanually enter the date in dd.mm.yyyy format.",
                "format": "date-time",
                "nullable": true
              },
              "CostCenterValidTo": {
                "type": "string",
                "description": "Select the date from which the cost center is no longer valid or bookable. You\ncan also manually enter the date in dd.mm.yyyy format.",
                "format": "date-time",
                "nullable": true
              },
              "ExternalCode": {
                "type": "string",
                "description": "In the case of an import or export of the cost center, the external code is\nstored here.",
                "maxLength": 30,
                "nullable": true
              },
              "ForegroundColor": {
                "type": "integer",
                "description": "Enter the number of the foreground color in CAD visualization (from\n\"0\" to \"119\").",
                "format": "int32",
                "nullable": true
              },
              "Hierarchy": {
                "type": "string",
                "description": "If the cost center is structured hierarchically, the higher-level cost center\ncan be entered here.",
                "maxLength": 30,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter the full name of the cost center.",
                "maxLength": 50,
                "nullable": true
              },
              "Pattern": {
                "type": "integer",
                "description": "Enter the number of the pattern in CAD visualization (from \"1\" to\n\"77\").",
                "format": "int32",
                "nullable": true
              },
              "PersonInChargeForCostcenter": {
                "type": "string",
                "description": "Staff number of person in charge",
                "maxLength": 50,
                "nullable": true
              },
              "PersonResponsibleForCostcenter": {
                "type": "string",
                "description": "Select the person responsible for the cost center from the combobox.",
                "maxLength": 50,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Building": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BuildingBase"
          },
          {
            "type": "object",
            "description": "Create data records for the various buildings in the organization. Enter\ninformation on the identification (assignment of a location and a building\nnumber and description) and address of the building as well as the building\ndescription. See at a glance how the current use of space (according to DIN 277)\nis distributed in the building. Assign the floors in the building. If you also\nuse eTASK Maintenance, all maintenance contracts concluded with external or\ninternal service providers for this building are displayed.",
            "additionalProperties": false,
            "properties": {
              "Images": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Images"
                  }
                ]
              },
              "Documents": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Documents"
                  }
                ]
              },
              "Annotations": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Annotations"
                  }
                ]
              }
            }
          }
        ]
      },
      "BuildingBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "BillingOnFlatfeeBasis",
              "FireDetectionSystem",
              "LightningProtection",
              "Rentable"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "AccountingUnit": {
                "type": "integer",
                "description": "Select the accounting unit to which this building belongs.",
                "format": "int32",
                "nullable": true
              },
              "ActivityType": {
                "type": "integer",
                "description": "To be texted by jens.coosmann@etask.de",
                "format": "int32",
                "nullable": true
              },
              "BuildingGroup": {
                "type": "integer",
                "description": "Select the building group to which the building is to be assigned.",
                "format": "int32",
                "nullable": true
              },
              "ConstructionType": {
                "type": "integer",
                "description": "Select the construction type of the building.",
                "format": "int32",
                "nullable": true
              },
              "CostCenter": {
                "description": "Select the cost center which is to be charged with the costs for the building.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              },
              "DegreeDayNumberWeatherStation": {
                "type": "integer",
                "description": "Selection of the nearest weather station.",
                "format": "int32",
                "nullable": true
              },
              "Department": {
                "type": "integer",
                "description": "Select the department to which the building should be allocated.",
                "format": "int32",
                "nullable": true
              },
              "Function": {
                "type": "integer",
                "description": "Select the function of the building.",
                "format": "int32",
                "nullable": true
              },
              "LifeCyclephase": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "LocationPolicy": {
                "type": "integer",
                "description": "Select the location concept.",
                "format": "int32",
                "nullable": true
              },
              "MaintenanceContractType": {
                "type": "integer",
                "description": "Select the type of contract.",
                "format": "int32",
                "nullable": true
              },
              "Manager": {
                "description": "Select the works manager responsible for the building.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "OpcPerLocationContingencyRisk": {
                "type": "integer",
                "description": "Selection of the cost element for the default risk.",
                "format": "int32",
                "nullable": true
              },
              "OperationalCostsPerlocationManagement": {
                "type": "integer",
                "description": "Selection of the cost element for the administrator fee.",
                "format": "int32",
                "nullable": true
              },
              "OperationalSpace": {
                "type": "integer",
                "description": "Selection of the associated operating area",
                "format": "int32",
                "nullable": true
              },
              "OwnerAddress": {
                "description": "Selection of the building owner",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "Property": {
                "type": "integer",
                "description": "Select the property on which the building is located.",
                "format": "int32",
                "nullable": true
              },
              "PropertyType": {
                "type": "integer",
                "description": "Select the property type of the building.",
                "format": "int32",
                "nullable": true
              },
              "ResponsiblePerson": {
                "description": "Responsible Person",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "Site": {
                "description": "Select the location in which the building is located. The code of the location\nselected here will be part of the building code which is automatically generated\nby the system.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Site"
                  }
                ]
              },
              "Type": {
                "type": "integer",
                "description": "Selection of an object type",
                "format": "int32",
                "nullable": true
              },
              "Floors": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Floor"
                }
              },
              "BillingOnFlatfeeBasis": {
                "type": "boolean",
                "description": "Indicate whether billing is to be performed on a flat fee basis."
              },
              "FireDetectionSystem": {
                "type": "boolean",
                "description": "Indication whether the building has a fire alarm system."
              },
              "LightningProtection": {
                "type": "boolean",
                "description": "Indicates whether the building has a lightning protection system."
              },
              "Rentable": {
                "type": "boolean",
                "description": "Indicates whether the building is available for rent."
              },
              "AdditionalUsableArea": {
                "type": "number",
                "description": "Input of the planned value of the secondary useable area of the building.",
                "format": "decimal",
                "nullable": true
              },
              "AmountOfFloors": {
                "type": "number",
                "description": "Enter the number of floors in the building.",
                "format": "decimal",
                "nullable": true
              },
              "BuildingDescriptionForRentComparisonReport": {
                "type": "string",
                "description": "Input of an appropriate building description, which enables the correct\nselection of the suitable representative list of rents.",
                "maxLength": 8000,
                "nullable": true
              },
              "City": {
                "type": "string",
                "description": "Enter the name of the city in which the building is located.",
                "maxLength": 50,
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "Displays the building code automatically generated by the system. The code\nconsists of the selected location and the building number assigned to the\nbuilding.",
                "maxLength": 50,
                "nullable": true
              },
              "ConstructedArea": {
                "type": "number",
                "description": "If the building dimensions have been specified, the building area can be\ncalculated from the dimensions.",
                "format": "decimal",
                "nullable": true
              },
              "ContractuallyAgreedOutput": {
                "type": "string",
                "description": "Enter the contractually agreed electrical output in kilowatts.",
                "maxLength": 10,
                "nullable": true
              },
              "CostCenterIpo": {
                "type": "string",
                "description": "In case the building is rented, provide the cost center to be charged with the\nrental costs.",
                "maxLength": 50,
                "nullable": true
              },
              "DefaultRiskAsaPercentageOfBasicRent": {
                "type": "number",
                "description": "Indication of the default risk as a percentage of the basic rent.",
                "format": "decimal",
                "nullable": true
              },
              "EMailOfResponsiblePerson": {
                "type": "string",
                "description": "Enter the e-mail address of the person responsible for the object.",
                "maxLength": 70,
                "nullable": true
              },
              "FinancialBookingCode": {
                "type": "string",
                "description": "Enter the accounting area to which the building is assigned.",
                "maxLength": 50,
                "nullable": true
              },
              "FunctionalArea": {
                "type": "number",
                "description": "Enter the planned value of the functional area of the building.",
                "format": "decimal",
                "nullable": true
              },
              "Height": {
                "type": "number",
                "description": "Enter the building height in meters.",
                "format": "decimal",
                "nullable": true
              },
              "IfcGlobalId": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 22,
                "nullable": true
              },
              "Latitude": {
                "type": "number",
                "description": "Enter the latitude of the building's location (e.g. the entrance area) for\neasier visualization in map services (e.g. Google Maps).",
                "format": "decimal",
                "nullable": true
              },
              "Length": {
                "type": "number",
                "description": "Enter the building length in meters.",
                "format": "decimal",
                "nullable": true
              },
              "Longitude": {
                "type": "number",
                "description": "Enter the longitude of the building's location (e.g. the entrance area) for\neasier visualization in map services (e.g. Google Maps).",
                "format": "decimal",
                "nullable": true
              },
              "MainUsableAream": {
                "type": "number",
                "description": "Enter the planned value of the main usable area of the building.",
                "format": "decimal",
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter the full building name We recommend that you use a name indicating the\nfunction of the building (e.g., \"Headquarters Zhizschin Industries,\nShanghai\").",
                "maxLength": 50,
                "nullable": true
              },
              "NavvisCode": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 50,
                "nullable": true
              },
              "NetAreaTarget": {
                "type": "number",
                "description": "Enter the target value of the building’s gross floor area.",
                "format": "decimal",
                "nullable": true
              },
              "NetVolumem": {
                "type": "number",
                "description": "Enter the planned value of the net room content of the building.",
                "format": "decimal",
                "nullable": true
              },
              "Number": {
                "type": "string",
                "description": "Enter the number of the building. The number entered here will be part of the\nbuilding code generated by the system.",
                "maxLength": 10,
                "nullable": true
              },
              "ObjectOwnerName": {
                "type": "string",
                "description": "Enter the name of the person responsible for the object.",
                "maxLength": 50,
                "nullable": true
              },
              "PercentageOfOpcAdministrationFee": {
                "type": "number",
                "description": "Indication of the administrator fee as a percentage of the operating costs.",
                "format": "decimal",
                "nullable": true
              },
              "PlannedOutline": {
                "type": "string",
                "description": "Indication of the date when the demolition of the house is planned, if\nnecessary.",
                "format": "date-time",
                "nullable": true
              },
              "Remark": {
                "type": "string",
                "description": "Enter information or comments about the building information.",
                "maxLength": 500,
                "nullable": true
              },
              "RemarkElectro": {
                "type": "string",
                "description": "Input of notes and remarks on the electrical connection.",
                "maxLength": 500,
                "nullable": true
              },
              "RemarkHeating": {
                "type": "string",
                "description": "Entry of notes or remarks on the heating system.",
                "maxLength": 500,
                "nullable": true
              },
              "RemarkMedia": {
                "type": "string",
                "description": "Input of notes or remarks on media supply.",
                "maxLength": 500,
                "nullable": true
              },
              "RemarkProtection": {
                "type": "string",
                "description": "Input of notes or remarks on the protective devices.",
                "maxLength": 500,
                "nullable": true
              },
              "RemarkRoof": {
                "type": "string",
                "description": "Enter notes or remarks about the roof.",
                "maxLength": 500,
                "nullable": true
              },
              "RemarkWater": {
                "type": "string",
                "description": "Enter notes or remarks on the water supply.",
                "maxLength": 500,
                "nullable": true
              },
              "RentableUntil": {
                "type": "string",
                "description": "Selection of the date up to which the building can be rented.",
                "format": "date-time",
                "nullable": true
              },
              "RentalGuaranteeForrentalagreementno": {
                "type": "string",
                "description": "Selection of the rental contract for the entire house for which a rental\nguarantee has been agreed.",
                "maxLength": 50,
                "nullable": true
              },
              "RentalGuaranteePriceperm": {
                "type": "number",
                "description": "Enter the price per m² agreed under the rental guarantee, which the manager\n(tenant of the entire house) receives from the owner, irrespective of whether\nthe manager was able to sublet the space.",
                "format": "decimal",
                "nullable": true
              },
              "Street": {
                "type": "string",
                "description": "Enter the name of the street in which the building is located.",
                "maxLength": 50,
                "nullable": true
              },
              "StreetNumber": {
                "type": "string",
                "description": "Enter the house number of the building.",
                "maxLength": 10,
                "nullable": true
              },
              "TargetGrossAreaTarget": {
                "type": "number",
                "description": "Enter the target value of the building’s gross floor area.",
                "format": "decimal",
                "nullable": true
              },
              "TargetGrossVolume": {
                "type": "number",
                "description": "If the building dimensions have been specified, the gross room contents can be\ncalculated from the dimensions.",
                "format": "decimal",
                "nullable": true
              },
              "TelephoneResponsibleFortheobject": {
                "type": "string",
                "description": "Enter the telephone number of the person responsible for the object.",
                "maxLength": 50,
                "nullable": true
              },
              "TrafficArea": {
                "type": "number",
                "description": "Enter the planned value of the traffic area of the building.",
                "format": "decimal",
                "nullable": true
              },
              "TypeOfUse": {
                "type": "string",
                "description": "Selection of the type of building use",
                "maxLength": 40,
                "nullable": true
              },
              "UsefulArea": {
                "type": "number",
                "description": "Enter the planned value of the useful area of the building.",
                "format": "decimal",
                "nullable": true
              },
              "Width": {
                "type": "number",
                "description": "Enter the building width in meters.",
                "format": "decimal",
                "nullable": true
              },
              "YearOfConstruction": {
                "type": "string",
                "description": "Enter the year in which the building was constructed.",
                "maxLength": 50,
                "nullable": true
              },
              "ZipCode": {
                "type": "string",
                "description": "Enter the post code of the building.",
                "maxLength": 10,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Site": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SiteBase"
          },
          {
            "type": "object",
            "description": "Create data records for the different locations of your organization. These\nlocations represent locations of companies and branches and can be selected\nlater, for example in forms for buildings, in order to clearly determine their\nlocation. The \"Locations\" form shows the buildings already assigned to the\nlocation. This assignment of buildings cannot be changed here, but only in the\n\"Buildings\" form. When using eTASK. open spaces, the list of all parking spaces\nat the location is also displayed.",
            "additionalProperties": false,
            "properties": {
              "Documents": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Documents"
                  }
                ]
              }
            }
          }
        ]
      },
      "SiteBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Code",
              "DoNotCalculateOperatingCosts"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Country": {
                "type": "integer",
                "description": "Select the country of the location.",
                "format": "int32",
                "nullable": true
              },
              "HierarchicalLevel": {
                "type": "integer",
                "description": "Select the hierarchical level 3 of the location",
                "format": "int32",
                "nullable": true
              },
              "ManagerCompanyAddress": {
                "description": "To be texted by jens.coosmann@etask.de",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "ManagerContactPerson": {
                "description": "Select the administrator’s contact person.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "OwnerCompanyAddress": {
                "description": "Select the proprietor.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "OwnerContactPerson": {
                "description": "Select the proprietor’s contact person.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "Buildings": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Building"
                }
              },
              "Code": {
                "type": "string",
                "description": "Enter an abbreviation for the location (e.g. an abbreviation for the location\nmade up of three letters; \"MUC\" for \"Munich\",\n\"BER\" for \"Berlin\"). The location's code forms the first\npart of the codes of all buildings, floors, rooms, and work stations situated at\nthe location.",
                "maxLength": 10,
                "minLength": 1
              },
              "DoNotCalculateOperatingCosts": {
                "type": "boolean",
                "description": "Indicates whether the operating costs for this site should not be calculated."
              },
              "CadastralRegisterNo": {
                "type": "string",
                "description": "Enter the location's cadastral register no.",
                "maxLength": 5,
                "nullable": true
              },
              "City": {
                "type": "string",
                "description": "Enter the city from the location's main address.",
                "maxLength": 50,
                "nullable": true
              },
              "ContactPerson": {
                "type": "string",
                "description": "Enter the name of the main contact person of the location for all issues\ninvolving neighboring parties.",
                "maxLength": 50,
                "nullable": true
              },
              "Email": {
                "type": "string",
                "description": "Enter the primary email address of the location.",
                "maxLength": 50,
                "nullable": true
              },
              "FloorSpaceRatio": {
                "type": "number",
                "description": "Enter the location’s floor space ratio.",
                "format": "decimal",
                "nullable": true
              },
              "IfcGlobalId": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 22,
                "nullable": true
              },
              "Latitude": {
                "type": "string",
                "description": "Enter the latitude of the location (e.g. the entrance area) for easier\nvisualization in map services (such as Google Maps).",
                "maxLength": 50,
                "nullable": true
              },
              "Longitude": {
                "type": "string",
                "description": "Enter the longitude of the location for easier visualization in map services\n(such as Google Maps).",
                "maxLength": 50,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter a detailed name for the location. The abbreviation entered here is the\nstart of the code for all buildings, rooms, floors and workstations created for\nthis location.",
                "maxLength": 50,
                "nullable": true
              },
              "Parcel": {
                "type": "string",
                "description": "Enter the name of the parcel on which the location is built.",
                "maxLength": 50,
                "nullable": true
              },
              "Phone1": {
                "type": "string",
                "description": "Enter the primary phone number of the location (main office).",
                "maxLength": 25,
                "nullable": true
              },
              "Phone2": {
                "type": "string",
                "description": "Enter an alternative phone number for the location.",
                "maxLength": 25,
                "nullable": true
              },
              "Remark": {
                "type": "string",
                "description": "Enter a comment or a note for recording more information about the location.",
                "maxLength": 1000,
                "nullable": true
              },
              "SiteCoverageIndex": {
                "type": "number",
                "description": "Enter the location’s site coverage index.",
                "format": "decimal",
                "nullable": true
              },
              "Street": {
                "type": "string",
                "description": "Enter the street name of the location. The street and house number should be\nentered one after the other (e.g. . \"North street 45\".",
                "maxLength": 50,
                "nullable": true
              },
              "TimeZone": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 50,
                "nullable": true
              },
              "ZipCode": {
                "type": "string",
                "description": "Enter the postal code of the location's main address.",
                "maxLength": 10,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Floor": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FloorBase"
          },
          {
            "type": "object",
            "description": "Use this form to manage the floors of the buildings by first assigning the\nbuilding in which the floor is located and then entering further information for\nidentifying the floor (name, level, area, etc.). Then assign all rooms on the\nfloor. If eTASK.CAD is also used, the floor plan is displayed in a new tab after\nclicking on the magnifying glass icon. In the \"CAD drawings\" area you can upload\nexisting CAD plans of the floor on the project side.",
            "additionalProperties": false,
            "properties": {
              "Documents": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Documents"
                  }
                ]
              }
            }
          }
        ]
      },
      "FloorBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Level"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Building": {
                "description": "Select the building in which the floor is located.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Building"
                  }
                ]
              },
              "BuildingPart": {
                "type": "integer",
                "description": "Select the part of the building in which the floor is located.",
                "format": "int32",
                "nullable": true
              },
              "Rooms": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Room"
                }
              },
              "Level": {
                "type": "integer",
                "description": "Enter a number defining on which level of the building the floor is located. The\nlowest level (e.g. the basement) is always level \"1\". The floors in menu item\n\"Properties/CAD\" are also sorted according to the information entered here.",
                "format": "int32"
              },
              "Code": {
                "type": "string",
                "description": "Displays the floor code which is automatically generated from the code of the\nbuilding in which the floor is located.",
                "maxLength": 50,
                "nullable": true
              },
              "HeightNet": {
                "type": "number",
                "description": "Indication of the net storey height in meters.",
                "format": "decimal",
                "nullable": true
              },
              "HeightRelativeToReferenceHeight": {
                "type": "number",
                "description": "Distance from the zero height of the building to the top edge of the finished\nfloor on the ground floor in meters.",
                "format": "decimal",
                "nullable": true
              },
              "IfcGlobalId": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 22,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "maxLength": 50,
                "nullable": true
              },
              "NavvisCode": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 50,
                "nullable": true
              },
              "Number": {
                "type": "string",
                "description": "Enter a unique abbreviation for the story on which the floor is located (e.g.\n\"2nd\" for \"Second Floor\").",
                "maxLength": 10,
                "nullable": true
              },
              "SpaceGross": {
                "type": "number",
                "description": "Enter the floor's gross surface area in square meters.",
                "format": "decimal",
                "nullable": true
              },
              "SpacePerDesk": {
                "type": "number",
                "description": "Enter the standard space per work station on the present floor in square meters.",
                "format": "decimal",
                "nullable": true
              },
              "StoreyGrossHeight": {
                "type": "number",
                "description": "Indication of the gross floor height in metres.",
                "format": "decimal",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Room": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RoomBase"
          },
          {
            "type": "object",
            "description": "Manage data records for each individual room in the building to ensure complete\nspace management. Only the room area entered here influences the areas of floors\nand buildings. Spatial data sets are the basis for many other components of the\nFM portal and other eTASK products. They are used, for example, to make room\nbookings or to assign employees and objects to them. First select the floor on\nwhich the room is located. Then assign a room number and the space usage of the\nroom according to DIN 277 (or according to in-house standards) to each room. Add\ninformation on the settlement of space costs, the floor space of the room, and\nthe number of work centers available in the room. Then assign the current\nreservation (work center and employee) to the room. Upload a photo of the room\nand manage information on the structural condition of the room (flooring,\ntraffic load, etc.). Add one or more cost centers for the room and data to\ncommunication devices that are available in the room. Finally, you can create or\nview data records for objects in the room. When using eTASK.CAD, the room is\ndisplayed in the floor plan after clicking on the magnifying glass icon. When\nusing eTASK Furniture, all furniture in the room is displayed or added. The same\napplies when using eTASK.equipment/IT for the IT devices in the room. If eTASK.\ndefect management is connected, all construction defects found in the room are\nalso displayed.",
            "additionalProperties": false,
            "properties": {
              "Images": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Images"
                  }
                ]
              },
              "Documents": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Documents"
                  }
                ]
              }
            }
          }
        ]
      },
      "RoomBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "CanBeHeated",
              "GuaranteedMinimumRent",
              "Lettable",
              "RentableInComplexContract",
              "Reservable"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "CeilingCovering": {
                "type": "integer",
                "description": "Select the ceiling covering.",
                "format": "int32",
                "nullable": true
              },
              "CompanyAddressOfOwner": {
                "description": "Select the owner of the room if different to the owner of the building.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "CostCenter": {
                "description": "If not building cost center",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              },
              "Floor": {
                "description": "Select the floor on which the room is located.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Floor"
                  }
                ]
              },
              "FloorCovering": {
                "type": "integer",
                "description": "Select the room's floor covering.",
                "format": "int32",
                "nullable": true
              },
              "InternalUsageType": {
                "type": "integer",
                "description": "Select the room usage type defined in-house.",
                "format": "int32",
                "nullable": true
              },
              "Landlord": {
                "description": "Select the lessor of the room.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "PrimaryUsageStatus": {
                "type": "integer",
                "description": "Select the primary usage status.",
                "format": "int32",
                "nullable": true
              },
              "ReservedForTenancyAgreement": {
                "type": "integer",
                "description": "Option to rent for",
                "format": "int32",
                "nullable": true
              },
              "RoomGroup": {
                "type": "integer",
                "description": "Select the room group to which the room belongs.",
                "format": "int32",
                "nullable": true
              },
              "SecondaryUsageStatus": {
                "type": "integer",
                "description": "Select the secondary usage status.",
                "format": "int32",
                "nullable": true
              },
              "SpaceAllocation": {
                "type": "integer",
                "description": "Select the higher level instance to which the room space is assigned and which\nshould be charged with the room costs (e.g. the costs for using a corridor on a\nfloor are split between all residents on that floor).",
                "format": "int32",
                "nullable": true
              },
              "SpaceCategory": {
                "type": "integer",
                "description": "Select the space type.",
                "format": "int32",
                "nullable": true
              },
              "SpaceServiceType": {
                "type": "integer",
                "description": "To be texted by jens.coosmann@etask.de",
                "format": "int32",
                "nullable": true
              },
              "SurchargeForActivityType": {
                "type": "integer",
                "description": "To be texted by jens.coosmann@etask.de",
                "format": "int32",
                "nullable": true
              },
              "Tenant": {
                "description": "Select the company which has leased the room.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "UsageTypeDin277": {
                "description": "Select the room usage type according to DIN 277-2.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Din277UsageType"
                  }
                ]
              },
              "WallCovering": {
                "type": "integer",
                "description": "Select the wall covering.",
                "format": "int32",
                "nullable": true
              },
              "Assets": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Asset"
                }
              },
              "Desks": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Desk"
                }
              },
              "Doors": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Door"
                }
              },
              "CanBeHeated": {
                "type": "boolean",
                "description": "Indicate whether the room can be heated."
              },
              "GuaranteedMinimumRent": {
                "type": "boolean",
                "description": "Guaranteed Minimum Rent"
              },
              "Lettable": {
                "type": "boolean",
                "description": "Indicate whether the room is lettable."
              },
              "RentableInComplexContract": {
                "type": "boolean",
                "description": "Rentable in complex manner?"
              },
              "Reservable": {
                "type": "boolean",
                "description": "Reservable?"
              },
              "Area": {
                "type": "number",
                "description": "Enter the room's floor space in square meters. If using eTASK.CAD this field is\nautomatically filled in with the space data from Aperture Client.",
                "format": "decimal",
                "nullable": true
              },
              "Barcode": {
                "type": "string",
                "description": "If your company uses eTASK.Inventory, enter the barcode for the room.",
                "maxLength": 30,
                "nullable": true
              },
              "CeilingArea": {
                "type": "number",
                "description": "If the ceiling dimensions are specified, the area can be calculated\nautomatically.",
                "format": "decimal",
                "nullable": true
              },
              "CeilingMaterial": {
                "type": "string",
                "description": "Indication of the ceiling material",
                "maxLength": 50,
                "nullable": true
              },
              "Circumference": {
                "type": "number",
                "description": "Enter a value for the room’s circumference.",
                "format": "decimal",
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "Displays the room code which is automatically generated by the system when saved\nfor the first time. The room code consists of the code for the selected floor on\nwhich the room is located as well as the room number.",
                "maxLength": 50,
                "nullable": true
              },
              "EscapeRoute": {
                "type": "integer",
                "description": "Escape Route",
                "nullable": true
              },
              "HeatableSurfacem178": {
                "type": "number",
                "description": "Heatable Surface [m²]",
                "format": "decimal",
                "nullable": true
              },
              "IfcGlobalId": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 22,
                "nullable": true
              },
              "ImputedAreaForSpaceDistribution": {
                "type": "number",
                "description": "Imputed Area for Space Distribution",
                "format": "decimal",
                "nullable": true
              },
              "LeasePricePerSquaremeter": {
                "type": "number",
                "description": "Enter the lease price of the room per square meter.",
                "format": "decimal",
                "nullable": true
              },
              "MaterialNumber": {
                "type": "string",
                "description": "Enter the material number",
                "maxLength": 25,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "maxLength": 50,
                "nullable": true
              },
              "NavvisCode": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 50,
                "nullable": true
              },
              "NetRoomSurface": {
                "type": "number",
                "description": "Net Room Surface [m²]",
                "format": "decimal",
                "nullable": true
              },
              "NumberOnDoorplate": {
                "type": "string",
                "description": "Enter the room number on an already existing door plate if this deviates from\nthe selected system for the building as presented in the room code.",
                "maxLength": 23,
                "nullable": true
              },
              "OptionToRentUntil": {
                "type": "string",
                "description": "Option to rent until",
                "format": "date-time",
                "nullable": true
              },
              "PolygonArea": {
                "type": "number",
                "description": "CAD polygon space",
                "format": "decimal",
                "nullable": true
              },
              "QuantityOfWorkplaces": {
                "type": "integer",
                "description": "Enter a number for the amount of work stations available in the room.",
                "format": "int32",
                "nullable": true
              },
              "RawCeilingHeight": {
                "type": "number",
                "description": "Indication of the raw ceiling height",
                "format": "decimal",
                "nullable": true
              },
              "Remark": {
                "type": "string",
                "description": "Enter comments or information about the room.",
                "maxLength": 50,
                "nullable": true
              },
              "RentableArea": {
                "type": "number",
                "description": "Record the room’s rentable area here.",
                "format": "decimal",
                "nullable": true
              },
              "RentableAreaFactor": {
                "type": "number",
                "description": "Enter the factor used to calculate the rentable area. The basis for the\ncalculation is the room's surface area.",
                "format": "decimal",
                "nullable": true
              },
              "RentableAreaWithinTheRentableZone": {
                "type": "number",
                "description": "Rentable Area within the Rentable Zone [m²]",
                "format": "decimal",
                "nullable": true
              },
              "RoomHeight": {
                "type": "number",
                "description": "Room Height [m]",
                "format": "decimal",
                "nullable": true
              },
              "RoomNumber": {
                "type": "string",
                "description": "Enter the number of the room.",
                "maxLength": 10,
                "nullable": true
              },
              "RoomType": {
                "type": "string",
                "description": "Room Type",
                "maxLength": 50,
                "nullable": true
              },
              "RoomVolume": {
                "type": "number",
                "description": "Room Volume [m³]",
                "format": "decimal",
                "nullable": true
              },
              "SubstractedAream178": {
                "type": "number",
                "description": "Enter the subtraction area used as the polygon area subtraction to determine the\nfloor space.",
                "format": "decimal",
                "nullable": true
              },
              "UnusedArea": {
                "type": "number",
                "description": "Provide the unassigned space of the room in sqm.",
                "format": "double",
                "nullable": true
              },
              "WallArea": {
                "type": "number",
                "description": "Indication of the wall area",
                "format": "decimal",
                "nullable": true
              },
              "WallMaterial": {
                "type": "string",
                "description": "Specifies the material of the wall.",
                "maxLength": 50,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Din277UsageType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Din277UsageTypeBase"
          },
          {
            "type": "object",
            "description": "Create data records for usage types of building areas according to DIN 277.\nThese data records can later be selected in the \"Rooms\" form and can also be\nfurther subdivided by the data records in the \"Internal usage types\" list.",
            "additionalProperties": false
          }
        ]
      },
      "Din277UsageTypeBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "UsageGroup": {
                "type": "integer",
                "description": "Select the usage group according to DIN 277.",
                "format": "int32",
                "nullable": true
              },
              "Rooms": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Room"
                }
              },
              "BackgroundColor": {
                "type": "integer",
                "description": "Enter the number of the background color in CAD visualization (from\n\"0\" to \"119\").",
                "format": "int32",
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "Enter the abbreviation for the usage type according to DIN 277 (e.g.,\n\"2.1\" for \"office space\").",
                "maxLength": 10,
                "nullable": true
              },
              "ForegroundColor": {
                "type": "integer",
                "description": "Enter the number of the foreground color in CAD visualization (from\n\"0\" to \"119\").",
                "format": "int32",
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter the full name of the usage type according to DIN 277 (e.g., \"office\nspace\").",
                "maxLength": 100,
                "nullable": true
              },
              "Pattern": {
                "type": "integer",
                "description": "Enter the number of the pattern in CAD visualization (from \"1\" to\n\"77\").",
                "format": "int32",
                "nullable": true
              },
              "UsageGroupCode": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 10,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Asset": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AssetBase"
          },
          {
            "type": "object",
            "description": "In the eTASK.FM portal, all movable and immovable assets are referred to as\n\"objects\". There are many different objects that you can manage within the\neTASK.FM portal.",
            "additionalProperties": false,
            "properties": {
              "Images": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Images"
                  }
                ]
              },
              "Documents": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Documents"
                  }
                ]
              },
              "Annotations": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Annotations"
                  }
                ]
              }
            }
          }
        ]
      },
      "AssetBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "AssetType",
              "Id",
              "RelevantForFireProtection"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "AssetConditionState": {
                "type": "integer",
                "description": "Current condition",
                "format": "int32",
                "nullable": true
              },
              "AssetListFinancialaccounting": {
                "type": "integer",
                "description": "Select the Financial Accounting Software equipment list.",
                "format": "int32",
                "nullable": true
              },
              "AssetRoomId": {
                "description": "Select the room in which the object is to be relocated from the combobox.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Room"
                  }
                ]
              },
              "AssetStatus": {
                "type": "integer",
                "description": "Selection of the status of the object.",
                "format": "int32",
                "nullable": true
              },
              "AssetType": {
                "description": "To be texted by jens.coosmann@etask.de",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ObjectType"
                  }
                ]
              },
              "Availability": {
                "type": "integer",
                "description": "Select the object's danger group.",
                "format": "int32",
                "nullable": true
              },
              "CompanyAddress": {
                "description": "Select the company granting the warranty.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "CostCenter": {
                "description": "Select the cost center which is to be used to settle costs for the unspecified\nobject.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              },
              "Department": {
                "type": "integer",
                "description": "Selection of the department that owns the object.",
                "format": "int32",
                "nullable": true
              },
              "Desk": {
                "description": "Select the work station on which the object is currently located.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Desk"
                  }
                ]
              },
              "IncomingInvoice": {
                "type": "integer",
                "description": "Purchase invoice",
                "format": "int32",
                "nullable": true
              },
              "ManufacturerCompanyAddress": {
                "description": "Manufacturer’s address",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "MatchCode": {
                "description": "Select a previously created match code.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/MatchCode"
                  }
                ]
              },
              "ParentAsset": {
                "description": "Selection of the object that is superior to the current object, which arranges\nthe object hierarchically in the Plant Explorer.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Asset"
                  }
                ]
              },
              "Person": {
                "description": "Select the employee available to use the unspecified object.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "Room": {
                "description": "Select the room in which the unspecified object is currently located.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Room"
                  }
                ]
              },
              "SupplierCompanyAddress": {
                "description": "Selection of the company that delivered the object.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "Assets": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Asset"
                }
              },
              "ServiceTickets": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ServiceTicket"
                }
              },
              "Doors": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Door"
                }
              },
              "Id": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "format": "guid",
                "minLength": 1
              },
              "RelevantForFireProtection": {
                "type": "boolean",
                "description": "Specifies whether this object is relevant for fire protection."
              },
              "Barcode": {
                "type": "string",
                "description": "Enter the barcode for the unspecified object. This is only necessary if the FM\n\"Inventory\" module is also installed to manage the object. You can find the\nbarcode on the barcode label on the object.",
                "maxLength": 30,
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "The object code of the selected match code is automatically entered here. If\nnecessary, you can replace it with an abbreviation for the unspecified object.\nThe code entered here should correspond to a code system used in-house, as the\nobject will be inserted by the object code in Object Explorer. If the object\ncode is changed in the match code, the manually entered value will be\noverwritten.",
                "maxLength": 50,
                "nullable": true
              },
              "DateOfAcquisition": {
                "type": "string",
                "description": "Select the date on which the unspecified object was acquired",
                "format": "date-time",
                "nullable": true
              },
              "DateOfInventory": {
                "type": "string",
                "description": "Select the date on which the object was last recorded during an inventory.",
                "format": "date-time",
                "nullable": true
              },
              "DateOfOrder": {
                "type": "string",
                "description": "Selection of the date on which the object was ordered.",
                "format": "date-time",
                "nullable": true
              },
              "DateOfRemoval": {
                "type": "string",
                "description": "Date of Removal",
                "format": "date-time",
                "nullable": true
              },
              "Description": {
                "type": "string",
                "description": "Description",
                "maxLength": 4000,
                "nullable": true
              },
              "EndOfWarranty": {
                "type": "string",
                "description": "Select the date on which the warranty will expire.",
                "format": "date-time",
                "nullable": true
              },
              "EquipmentNo": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 50,
                "nullable": true
              },
              "FacilityCode": {
                "type": "string",
                "description": "Facility code",
                "maxLength": 100,
                "nullable": true
              },
              "FacilityNo": {
                "type": "string",
                "description": "Facility no.",
                "maxLength": 50,
                "nullable": true
              },
              "IdentificationNumber1": {
                "type": "string",
                "description": "Enter a specific number of identification.",
                "maxLength": 50,
                "nullable": true
              },
              "IdentificationNumber2": {
                "type": "string",
                "description": "Enter a specific number of identification.",
                "maxLength": 50,
                "nullable": true
              },
              "IfcGlobalId": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 22,
                "nullable": true
              },
              "InventoryTimestamp": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 14,
                "nullable": true
              },
              "Manufacturer": {
                "type": "string",
                "description": "Enter the name of the manufacturer (e.g., \"Samsung\").",
                "maxLength": 30,
                "nullable": true
              },
              "MatchCodeData": {
                "type": "string",
                "description": "Displays the data transferred from the match code. You can enter individual data\ndeviating from the match code data in the respective adjacent column.",
                "maxLength": 4000,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter a full name for the unspecified object. If you have already selected a\nmatch code in the \"Match Code Data\" section, this field will automatically be\nfilled in with the data in the match code.",
                "maxLength": 100,
                "nullable": true
              },
              "NavvisCode": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 50,
                "nullable": true
              },
              "ObjectTypeData": {
                "type": "string",
                "description": "Use this function to save data entered for the individual data.",
                "nullable": true
              },
              "OrderNumber": {
                "type": "string",
                "description": "Enter the order number of the object.",
                "maxLength": 20,
                "nullable": true
              },
              "PurchasePrice": {
                "type": "number",
                "description": "Enter the purchase price for the unspecified object.",
                "format": "decimal",
                "nullable": true
              },
              "Quantity": {
                "type": "integer",
                "description": "Enter the number of individual objects available from the unspecified object.",
                "format": "int32",
                "nullable": true
              },
              "Remark": {
                "type": "string",
                "description": "Enter an additional comment concerning the unspecified object.",
                "maxLength": 8000,
                "nullable": true
              },
              "ResidualValue": {
                "type": "number",
                "description": "The residual value of an object is the current value on the key date of the data\ntransfer from the IT system for object accounting. This value is statically\nstored in eTASK and is not automatically updated outside of interfaces.",
                "format": "decimal",
                "nullable": true
              },
              "SerialNumber1": {
                "type": "string",
                "description": "Enter the serial number of the object. Serial numbers are usually located either\ndirectly on the object (e.g., stamped on it, or on a sticker) or on its\npackaging.",
                "maxLength": 30,
                "nullable": true
              },
              "SerialNumber2": {
                "type": "string",
                "description": "If required enter an additional serial number.",
                "maxLength": 30,
                "nullable": true
              },
              "Stocktaker": {
                "type": "string",
                "description": "Enter the name of the employee who recorded the unspecified object during the\ninventory.",
                "maxLength": 50,
                "nullable": true
              },
              "TextForMobileenddevice": {
                "type": "string",
                "description": "Enter a short text which will be displayed on the mobile end device if\neTASK.Inventory is used to take the inventory of the unspecified object.",
                "maxLength": 200,
                "nullable": true
              },
              "TextOnBarcode": {
                "type": "string",
                "description": "Enter a short text which is to be printed on the bar code.",
                "maxLength": 25,
                "nullable": true
              },
              "TotalServiceLife": {
                "type": "integer",
                "description": "Enter the unspecified object’s total service life in years.",
                "format": "int32",
                "nullable": true
              },
              "TypeDesignationOfmanufacturer": {
                "type": "string",
                "description": "Enter the manufacturer's full type designation for the object.",
                "maxLength": 50,
                "nullable": true
              },
              "YearOfConstruction": {
                "type": "integer",
                "description": "Enter this object's year of construction in this field.",
                "format": "int32",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "ObjectType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ObjectTypeBase"
          },
          {
            "type": "object",
            "description": "Create object types here to determine objects more precisely. The object type is\nused to group different individual objects under a collective description and is\nrequired in the \"Matchcode\" form to identify an object.",
            "additionalProperties": false,
            "properties": {
              "Documents": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Documents"
                  }
                ]
              }
            }
          }
        ]
      },
      "ObjectTypeBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "DisplayAsTopnode",
              "DisplayInObjectcadastre",
              "GroupingInServicespecifications",
              "MonitoringTheOperatingstatus",
              "ObligationToTakeinventory"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "AssetCategory": {
                "type": "integer",
                "description": "Select the folder number for the object registry.",
                "format": "int32",
                "nullable": true
              },
              "AssetType": {
                "description": "Selection of the object type that is superior to the current object type The\nselected object type is displayed in the object log at the level above the\ncurrent object type.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ObjectType"
                  }
                ]
              },
              "CadDrawingLink": {
                "type": "integer",
                "description": "To be texted by jens.coosmann@etask.de",
                "format": "int32",
                "nullable": true
              },
              "EtaskEntity": {
                "description": "In addition to the fields in the object, further information for this object\ntype is available in a detail table.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EtaskEntity"
                  }
                ]
              },
              "IfcClassificationReference": {
                "type": "integer",
                "description": "To be texted by jens.coosmann@etask.de",
                "format": "int32",
                "nullable": true
              },
              "MatchCodes": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/MatchCode"
                }
              },
              "Assets": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Asset"
                }
              },
              "ObjectTypes": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              },
              "DisplayAsTopnode": {
                "type": "boolean",
                "description": "To be texted by jens.coosmann@etask.de"
              },
              "DisplayInObjectcadastre": {
                "type": "boolean",
                "description": "Specifies whether the object type is to be displayed in the object register If\nthis option is deactivated, the object type is hidden from the object register."
              },
              "GroupingInServicespecifications": {
                "type": "boolean",
                "description": "Specifies whether objects of the current object type are to be grouped in an FM\npurchase order generated via a maintenance order If this checkbox is not\nactivated, a separate purchase order item is generated for each object of the\ncurrent object type."
              },
              "MonitoringTheOperatingstatus": {
                "type": "boolean",
                "description": "Specifies whether the operating status of the objects of this object type is to\nbe monitored If this check box is activated, the status of the objects in the\n\"Plant operating status\" report is evaluated."
              },
              "ObligationToTakeinventory": {
                "type": "boolean",
                "description": "In future, activating this checkbox should allow objects of this object type to\nbe inventoried using the eTASK Inventory mobile application."
              },
              "BackgroundColor": {
                "type": "integer",
                "description": "Enter the number of the background color in the CAD visualization (between \"0\"\nand \"119\").",
                "format": "int32",
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "Enter a code for the object type (e.g., \"OBGE\" for \"Objects\nGeneral Equipment\").",
                "maxLength": 50,
                "nullable": true
              },
              "Delineation": {
                "type": "string",
                "description": "Enter a description of the existing object type with detailed information that\nfacilitates the correct classification of objects in this object type.",
                "maxLength": 4000,
                "nullable": true
              },
              "DesignationSingular": {
                "type": "string",
                "description": "Enter the name of the object in the singular.",
                "maxLength": 150,
                "nullable": true
              },
              "devorgabeAnlagennummer": {
                "type": "string",
                "description": "Enter the specification for the asset number for objects of the current object\ntype.",
                "maxLength": 50,
                "nullable": true
              },
              "ForegroundColor": {
                "type": "integer",
                "description": "Enter the foreground color number in the CAD visualization (between \"0\" and\n\"119\").",
                "format": "int32",
                "nullable": true
              },
              "Hatching": {
                "type": "integer",
                "description": "Enter the hatch pattern number in the CAD visualization (between \"1\" and \"77\").",
                "format": "int32",
                "nullable": true
              },
              "HierarchyCode": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 100,
                "nullable": true
              },
              "IfcIso16739": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 150,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter the full name of the object type (e.g., \"Objects General\nEquipment\").",
                "maxLength": 150,
                "nullable": true
              },
              "RegIsFacid1": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 150,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "EtaskEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EtaskEntityBase"
          },
          {
            "type": "object",
            "description": "This list represents a directory of the available database tables in the FM\nportal.",
            "additionalProperties": false
          }
        ]
      },
      "EtaskEntityBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "CanBeInventoried",
              "Name",
              "ObjectExplorer",
              "Obsolete",
              "OrderOfDataUpdate",
              "TranslationMissing",
              "Type",
              "UpdateSettings"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Namespace": {
                "description": "To be texted by jens.coosmann@etask.de",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Application"
                  }
                ]
              },
              "ParentEntity": {
                "description": "Displays the UID of the higher level pages of the table.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EtaskEntity"
                  }
                ]
              },
              "CanBeInventoried": {
                "type": "boolean",
                "description": "Indicates whether the data record in the table can be inventoried using\neTASK.Inventory."
              },
              "Name": {
                "type": "string",
                "description": "Displays he table's table name.",
                "maxLength": 50,
                "minLength": 1
              },
              "ObjectExplorer": {
                "type": "boolean",
                "description": "Indicates whether the table is an object table included in Object Explorer."
              },
              "Obsolete": {
                "type": "boolean",
                "description": "To be texted by jens.coosmann@etask.de"
              },
              "OrderOfDataUpdate": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32"
              },
              "TranslationMissing": {
                "type": "integer",
                "description": "Displays the position of the table in the menu item.",
                "format": "int32"
              },
              "Type": {
                "type": "string",
                "description": "Displays the page type. There are six types. \"Root\" is the root\ndirectory of FM-Portal. \"Node\" is a page which is only used as nodes\nand which does not refer to any content. \"Table\" refers to a table.\n\"Page\" is a page containing configurable content (the contents are set\nin the respective sections). \"Wizard\" refers to a Wizard.\n\"VWSLink\" contains a link to Aperture Visual Web Solutions content.",
                "maxLength": 10,
                "minLength": 1
              },
              "UpdateSettings": {
                "type": "integer",
                "description": "Displays whether the table data should be taken over onto the customer server by\ndemo.etask if a new customer portal is set up. On delivery, eTASK transfers\nFM-Portal to demo.etask.de on the customer server. This means that the contents\nof specified tables are also delivered. However, other tables are emptied prior\nto delivery. Value \"1\" in this field means that the table’s data is delivered."
              },
              "Configuration": {
                "type": "string",
                "description": "Displays the XML configuration of the table (TableConfig) in plain text.",
                "nullable": true
              },
              "CshKeyOftable": {
                "type": "string",
                "description": "Displays the CSH-Key for help with the table. This key is not currently used. In\nthe past, it was used as a reference by the table’s webform to an external help\nsystem which was replaced by the portal’s own system.",
                "maxLength": 255,
                "nullable": true
              },
              "CshKeyOfwebform": {
                "type": "string",
                "description": "Displays the CSH-Key for help with the webform. This key is not currently used.\nIn the past, it was used as a reference by the table’s webform to an external\nhelp system which was replaced by the portal’s own system.",
                "maxLength": 255,
                "nullable": true
              },
              "Description": {
                "type": "string",
                "description": "Displays the menu path in which the table can be found.",
                "maxLength": 255,
                "nullable": true
              },
              "SystemName": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 255,
                "nullable": true
              },
              "XmlConfigurationOfpage": {
                "type": "string",
                "description": "Displays the XML configuration of the table page (PageConfig) in plain text.",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              }
            }
          }
        ]
      },
      "Application": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationBase"
          },
          {
            "type": "object",
            "description": "The abbreviations of the FM modules are assigned to their complete names via\nthis portal-internal administration table. Note: The data records may only be\nchanged by system administrators. Every change can lead to system-wide\ncomplications!",
            "additionalProperties": false
          }
        ]
      },
      "ApplicationBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "ApplicationName",
              "Code",
              "Obsolete"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "EtaskEntities": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/EtaskEntity"
                }
              },
              "ApplicationName": {
                "type": "string",
                "description": "FM module name.",
                "maxLength": 50,
                "minLength": 1
              },
              "Code": {
                "type": "string",
                "description": "FM module abbreviation.",
                "maxLength": 4,
                "minLength": 1
              },
              "Obsolete": {
                "type": "boolean",
                "description": "To be texted by jens.coosmann@etask.de"
              },
              "Description": {
                "type": "string",
                "description": "FM module description.",
                "maxLength": 1000,
                "nullable": true
              },
              "SqlFolder": {
                "type": "string",
                "description": "SQL Folder",
                "maxLength": 255,
                "nullable": true
              },
              "SystemName": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 255,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "MatchCode": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MatchCodeBase"
          },
          {
            "type": "object",
            "description": "Vous pouvez utiliser ce formulaire pour saisir des objets dans des objets de\ncatalogue (matchcodes) qui se produisent encore et encore.",
            "additionalProperties": false,
            "properties": {
              "Images": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Images"
                  }
                ]
              },
              "Documents": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Documents"
                  }
                ]
              }
            }
          }
        ]
      },
      "MatchCodeBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Code",
              "Id",
              "StandardMatchcodeForobjecttype"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "AssetType": {
                "description": "Select the object type to be assigned to the match code. The object type is used\nto further categorize match codes.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ObjectType"
                  }
                ]
              },
              "CadIcon": {
                "type": "integer",
                "description": "Selection of the CAD symbol.",
                "format": "int32",
                "nullable": true
              },
              "CompanyAddress": {
                "description": "Manufacturer (Company)",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "Assets": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Asset"
                }
              },
              "Code": {
                "type": "string",
                "description": "Enter the match code. It should consist of the abbreviation for the object\ngroup, object type, and the actual object itself (e.g., \"UOGEFP\" for\n\"Unspecified Object, General Equipment, Flowerpot\"). If using the\nInventory module, the match code entered here is also printed on the barcode\nlabel in the match code list.",
                "maxLength": 30,
                "minLength": 1
              },
              "Id": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "format": "guid",
                "minLength": 1
              },
              "StandardMatchcodeForobjecttype": {
                "type": "boolean",
                "description": "Set the check mark to use this matchcode as the default for new objects created\nby data imports (for example, CAFM Connect)."
              },
              "AssetCode": {
                "type": "string",
                "description": "Enter an abbreviation for the object identified by the match code. The code\nentered here should be aligned with a code system used in-house as the object\nwill be inserted by the object code in Object Explorer.",
                "maxLength": 50,
                "nullable": true
              },
              "BackgroundColor": {
                "type": "integer",
                "description": "Enter the number of the background color in CAD visualization (between \"0\" and\n\"119\").",
                "format": "int32",
                "nullable": true
              },
              "DeliveryTimes": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 250,
                "nullable": true
              },
              "Description": {
                "type": "string",
                "description": "Enter a detailed description of the match code. This description will be\nautomatically taken over by the FM Inventory module and used to identify the\nobject in the match code list.",
                "maxLength": 100,
                "nullable": true
              },
              "DescriptionLong": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 4000,
                "nullable": true
              },
              "Expense": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 250,
                "nullable": true
              },
              "ForegroundColor": {
                "type": "integer",
                "description": "Enter the number of the foreground color in CAD visualization (between \"0\" and\n\"119\").",
                "format": "int32",
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter a short description for the object identified by the match code. It should\nbe as short as possible (e.g., \"satellite dish Kathrein\").",
                "maxLength": 50,
                "nullable": true
              },
              "Pattern": {
                "type": "integer",
                "description": "Enter the number of the pattern in CAD visualization (between \"1\" and \"77\").",
                "format": "int32",
                "nullable": true
              },
              "StickerPosition": {
                "type": "string",
                "description": "Enter a description of the position of the match code barcode sticker. This will\nbe used to establish the area on the object on which to apply the barcode\nsticker.",
                "maxLength": 50,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Desk": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DeskBase"
          },
          {
            "type": "object",
            "description": "You can use this form to manage data records for work centers in your company.\nThe work centers created here are assigned to employees in the \"Rooms\" form.",
            "additionalProperties": false
          }
        ]
      },
      "DeskBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "BookableInDesksharing",
              "EquippedWithNotebook",
              "EquippedWithPc",
              "EquippedWithPhone",
              "EquippedWithScreen",
              "Furnitured"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Department": {
                "type": "integer",
                "description": "Select the department to be assigned with an unoccupied workstation.",
                "format": "int32",
                "nullable": true
              },
              "Room": {
                "description": "Select the room in which the work station is located. You can enter up to three\ncharacters to limit the selection to certain rooms.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Room"
                  }
                ]
              },
              "TypeOfDesk": {
                "type": "integer",
                "description": "Select the work station type.",
                "format": "int32",
                "nullable": true
              },
              "Assets": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Asset"
                }
              },
              "BookableInDesksharing": {
                "type": "boolean",
                "description": "To be texted by thomas.edelmann@etask.de"
              },
              "EquippedWithNotebook": {
                "type": "boolean",
                "description": "Indicates whether the workstation is equipped with a working notebook."
              },
              "EquippedWithPc": {
                "type": "boolean",
                "description": "Indicate whether the work station is equipped with a functioning PC."
              },
              "EquippedWithPhone": {
                "type": "boolean",
                "description": "Indicate whether the work station is equipped with a functioning telephone\nconnection and telephone."
              },
              "EquippedWithScreen": {
                "type": "boolean",
                "description": "Indicate whether the work station is equipped with a functioning PC screen."
              },
              "Furnitured": {
                "type": "boolean",
                "description": "Indicate whether the work station is equipped and can be used. If this checkbox\nis unchecked, the workstation is considered to be potentially useable."
              },
              "Code": {
                "type": "string",
                "description": "Enter an abbreviation for the work station. We recommend that you create a work\nstation label which is as informative as possible (e.g. containing information\nabout the department or location of the work station), as the code entered here\nwill be used on the personnel form to assign a work station to a employee.",
                "maxLength": 50,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter the full name of the work station. The name must start with the characters\nWS followed by two numbers. Maximal length: 4 characters.",
                "maxLength": 4,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "ServiceTicket": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceTicketBase"
          },
          {
            "type": "object",
            "description": "eTASK.service ticket allows you to order services (e.g. repairs, special\ncleaning or other freely definable services) and manage their execution within a\nspecified framework. The user selects the category and - if available - the\nsubcategory of his request and describes this with a freely definable text.\nOptionally, requests for other persons and buildings can also be entered. After\nsaving the request, you can still upload a document or add a comment at any\ntime. The service request created is forwarded as a ticket to the group\nresponsible for this category in the selected building. Service tickets can be\nretrieved at any time via the service list of the eTASK.FM portal, depending on\nthe read rights of the logged in user.",
            "additionalProperties": false,
            "properties": {
              "Images": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Images"
                  }
                ]
              },
              "Documents": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Documents"
                  }
                ]
              },
              "Annotations": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Annotations"
                  }
                ]
              }
            }
          }
        ]
      },
      "ServiceTicketBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Requestor",
              "ServiceTicketCategory",
              "ReportingDate",
              "Uid",
              "WorkTimeUndercut"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Asset": {
                "description": "Affected object",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Asset"
                  }
                ]
              },
              "Building": {
                "description": "Apllicants building",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Building"
                  }
                ]
              },
              "CostCenter": {
                "description": "Cost Center",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              },
              "MessageByEmail": {
                "type": "integer",
                "description": "To be texted by klaus.aengenvoort@etask.de",
                "format": "int32",
                "nullable": true
              },
              "Move": {
                "type": "integer",
                "description": "To be texted by klaus.aengenvoort@etask.de",
                "format": "int32",
                "nullable": true
              },
              "OtherBuilding": {
                "description": "Deviating building (from applicants building)",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Building"
                  }
                ]
              },
              "OtherPerson": {
                "description": "Deviating applicant",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "OtherRoom": {
                "description": "Selection of the alternative room if the service is requested for someone else\nor if the service is to be performed in a room in which the requester does not\nhave his or her work center.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Room"
                  }
                ]
              },
              "Requestor": {
                "description": "Applicant",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "RequestorCostCenter": {
                "description": "Selection of the cost center via which the service ticket is to be billed.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              },
              "ResonsiblePerson": {
                "description": "-- SUMMARY MISSING --",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "Room": {
                "description": "Affected room",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Room"
                  }
                ]
              },
              "ServiceTicketCategory": {
                "description": "Category",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Category"
                  }
                ]
              },
              "ServiceTicketPriority": {
                "description": "Priority",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Priority"
                  }
                ]
              },
              "SubCategory": {
                "description": "Sub-Category",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SubCategory"
                  }
                ]
              },
              "UserGroup": {
                "description": "Service group in charge",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserGroup"
                  }
                ]
              },
              "WorkflowTicket": {
                "description": "Ticket no.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Ticket"
                  }
                ]
              },
              "WorkOrder": {
                "type": "integer",
                "description": "Corresponding maintenance order",
                "format": "int32",
                "nullable": true
              },
              "ReportingDate": {
                "type": "string",
                "description": "Reporting date",
                "format": "date-time",
                "minLength": 1
              },
              "Uid": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "format": "guid",
                "minLength": 1
              },
              "WorkTimeUndercut": {
                "type": "boolean",
                "description": "-- SUMMARY MISSING --"
              },
              "Description": {
                "type": "string",
                "description": "Description",
                "maxLength": 4000,
                "nullable": true
              },
              "DesiredDate": {
                "type": "string",
                "description": "Enter a desired delivery date[DD.MM.YYYYY] and a desired delivery time[hh:mm].",
                "format": "date-time",
                "nullable": true
              },
              "Latitude": {
                "type": "number",
                "description": "-- SUMMARY MISSING --",
                "format": "decimal",
                "nullable": true
              },
              "Longitude": {
                "type": "number",
                "description": "-- SUMMARY MISSING --",
                "format": "decimal",
                "nullable": true
              },
              "TicketNumber": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 18,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Category": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CategoryBase"
          },
          {
            "type": "object",
            "description": "Enter here the names fu¨r and the service categories you want to offer the\nservice ticket to u¨ber (e.g. \"Cleaning\"). Then add a group of people to be\nresponsible for processing the service tickets in this category. If you want to\nexpand the category further, add a sub-category (e.g. \"Window cleaning\").",
            "additionalProperties": false,
            "properties": {
              "Color": {
                "type": "integer",
                "description": "Choose a color for your service category.",
                "format": "int32",
                "nullable": true
              },
              "ColorHex": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "CategoryBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Icon": {
                "description": "Choose an icon for your service category from your icon library",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FontIcon"
                  }
                ]
              },
              "SubCategories": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/SubCategory"
                }
              },
              "Classification": {
                "type": "integer",
                "description": "Classification",
                "format": "int32",
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "Enter an abbreviation for the service category.",
                "maxLength": 50,
                "nullable": true
              },
              "Color": {
                "type": "integer",
                "description": "Choose a color for your service category.",
                "format": "int32",
                "nullable": true
              },
              "Description": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 4000,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter the full name for the service category.",
                "maxLength": 100,
                "nullable": true
              },
              "Position": {
                "type": "integer",
                "description": "Position",
                "format": "int32",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "FontIcon": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FontIconBase"
          },
          {
            "type": "object",
            "description": "Manage icons for the display of service categories here",
            "additionalProperties": false,
            "properties": {
              "Documents": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Documents"
                  }
                ]
              },
              "Base64Content": {
                "type": "string",
                "format": "byte",
                "nullable": true
              },
              "ContentType": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "FontIconBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Code",
              "Css",
              "FileNameSvg",
              "Html",
              "Selectable"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Code": {
                "type": "string",
                "description": "Unique coherent labelling",
                "maxLength": 50,
                "minLength": 1
              },
              "Css": {
                "type": "string",
                "description": "CSS code of fonticons from font libraries available",
                "maxLength": 50,
                "minLength": 1
              },
              "FileNameSvg": {
                "type": "string",
                "description": "exact file name of the uploaded .svg file",
                "maxLength": 50,
                "minLength": 1
              },
              "Html": {
                "type": "string",
                "description": "HTML code of fonticons from font libraries available",
                "maxLength": 150,
                "minLength": 1
              },
              "Selectable": {
                "type": "integer",
                "description": "Pre-selection. Selectable=1 displays the icon in a preselection of icons.\nSelectable=2 shows the rest.",
                "format": "int32"
              },
              "Name": {
                "type": "string",
                "description": "Additional designation if required to the code",
                "maxLength": 10,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "SubCategory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubCategoryBase"
          },
          {
            "type": "object",
            "description": "Here you can further subdivide the categories created for service tickets. For\neach category, you can define any number of subcategories, all of which are to\nbe handled by the same responsible group, e.g. subcategories \"Replace lamps\" and\n\"Seal windows\" in the category \"Caretaker\".",
            "additionalProperties": false
          }
        ]
      },
      "SubCategoryBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "ServiceTicketCategory": {
                "description": "Displays the service category in which this sub-category is available.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Category"
                  }
                ]
              },
              "Code": {
                "type": "string",
                "description": "Enter an abbreviation for the sub-category.",
                "maxLength": 50,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter the full name for the sub-category.",
                "maxLength": 100,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Priority": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriorityBase"
          },
          {
            "type": "object",
            "description": "At this point, define priorities that a contractor can assign, e.g. \"high\",\n\"medium\" or \"low\". Avoid numerical priorities where the applicant cannot see\nwhether \"1\" is high or low.",
            "additionalProperties": false
          }
        ]
      },
      "PriorityBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Code": {
                "type": "string",
                "description": "Enter an abbreviation for the priority.",
                "maxLength": 50,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter the full name for the priority.",
                "maxLength": 100,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "UserGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserGroupBase"
          },
          {
            "type": "object",
            "description": "This form is used to manage the access rights of the various user groups in the\nFM portal. Individual users can later be added to one of the user groups created\nhere and receive the rights defined in this form for the user group.",
            "additionalProperties": false
          }
        ]
      },
      "UserGroupBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "AdministratorGroup",
              "AutomaticGroup",
              "Code",
              "GroupMailReceptionactive",
              "ServiceGroup",
              "StandardGroup"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "CompanyAddress": {
                "description": "Select the company to which the user group belongs.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "UserGroupType": {
                "type": "integer",
                "description": "Select the group type.",
                "format": "int32",
                "nullable": true
              },
              "UsersInGroups": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/UsersInGroup"
                }
              },
              "AdministratorGroup": {
                "type": "boolean",
                "description": "Indicate whether the user group is an administrator group. This gives users in\nthis group access to all elements of FM-Portal."
              },
              "AutomaticGroup": {
                "type": "boolean",
                "description": "Indicate whether the group should be set up as an automatic group. Automatic\ngroups are adapted automatically to the menu item of the associated product.\nAutomated, meaningful read and write rights are granted depending on the\nauthorization (read, edit, Administrator). Automatic groups can be updated\nfollowing an FM-Portal update."
              },
              "Code": {
                "type": "string",
                "description": "Enter an abbreviation for the user group.",
                "maxLength": 50,
                "minLength": 1
              },
              "GroupMailReceptionactive": {
                "type": "boolean",
                "description": "Indicate whether the mailing list is active and can be used. If the checkbox is\nnot checked, each email will be sent to the email addresses of users in this\ngroup."
              },
              "ServiceGroup": {
                "type": "boolean",
                "description": "Indicate whether the user group is a service group. This group can then be used\nin the workflow management."
              },
              "StandardGroup": {
                "type": "boolean",
                "description": "Indicate whether the group should be set as a standard group. If this option is\nset, all Portal users will be automatically granted the access rights defined\nfor this group."
              },
              "CreationDate": {
                "type": "string",
                "description": "Select the date on which the group was created.",
                "format": "date-time",
                "nullable": true
              },
              "GroupEMailBox": {
                "type": "string",
                "description": "Enter the email address of the user group‘s mailing list.",
                "maxLength": 100,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter a meaningful name for the user group.",
                "maxLength": 100,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "UsersInGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UsersInGroupBase"
          },
          {
            "type": "object",
            "description": "Ce formulaire permet d'affecter les utilisateurs du portail aux groupes de\ndroits et de services.",
            "additionalProperties": false
          }
        ]
      },
      "UsersInGroupBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Person",
              "UserGroup"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Person": {
                "description": "Select the user who is to be assigned to the previously selected user group.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "UserGroup": {
                "description": "The user group to which the user is assigned is displayed here.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserGroup"
                  }
                ]
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Ticket": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TicketBase"
          },
          {
            "type": "object",
            "description": "Workflow tickets are used to store identification, status and history data for a\nrun of any workflow. Each workflow ticket is assigned a unique system-wide\nticket number. View the data of a workflow run in this form.",
            "additionalProperties": false
          }
        ]
      },
      "TicketBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "ServiceStep",
              "Workflow",
              "WorkflowRole",
              "TicketCreateDate",
              "TicketName",
              "TicketNo",
              "WorkflowStartDate"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "ServiceStep": {
                "description": "Displays the current workflow step of the workflow ticket.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WorkflowStep"
                  }
                ]
              },
              "Workflow": {
                "description": "Displays the name of the workflow ticket.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Workflow"
                  }
                ]
              },
              "WorkflowRole": {
                "type": "integer",
                "description": "Displays the workflow role currently responsible for the workflow ticket.",
                "format": "int32"
              },
              "ServiceTickets": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ServiceTicket"
                }
              },
              "TicketCreateDate": {
                "type": "string",
                "description": "Displays the date on which the data record managed by the workflow was created\non the workflow webform.",
                "format": "date-time",
                "minLength": 1
              },
              "TicketName": {
                "type": "string",
                "description": "Displays the name of the workflow ticket.",
                "maxLength": 500,
                "minLength": 1
              },
              "TicketNo": {
                "type": "string",
                "description": "Displays the ticket number of the workflow run.",
                "maxLength": 18,
                "minLength": 1
              },
              "WorkflowStartDate": {
                "type": "string",
                "description": "Displays the date on which the workflow run was started.",
                "format": "date-time",
                "minLength": 1
              },
              "PlannedFinishOfworkflow": {
                "type": "string",
                "description": "Displays the date on which the workflow should be completed.",
                "format": "date-time",
                "nullable": true
              },
              "WorkflowCompletedOn": {
                "type": "string",
                "description": "Displays the date on which the workflow run ended.",
                "format": "date-time",
                "nullable": true
              },
              "WorkflowTable": {
                "type": "string",
                "description": "To be texted by jens.coosmann@etask.de",
                "maxLength": 50,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "WorkflowStep": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowStepBase"
          },
          {
            "type": "object",
            "description": "You can use this form to manage workflow steps that are available within the\nservices/workflows in the FM portal.",
            "additionalProperties": false
          }
        ]
      },
      "WorkflowStepBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Workflow",
              "Active",
              "ArchivedInServicelist",
              "Name",
              "PermanentlyBinding",
              "StartStep",
              "SystemStep"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Workflow": {
                "description": "Select the workflow in which the workflow step is performed.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Workflow"
                  }
                ]
              },
              "WorkflowStepType": {
                "type": "integer",
                "description": "To be texted by klaus.aengenvoort@etask.de",
                "format": "int32",
                "nullable": true
              },
              "Active": {
                "type": "boolean",
                "description": "Indicate whether the workflow step is active in the workflow, i.e. indicate that\nit can be selected."
              },
              "ArchivedInServicelist": {
                "type": "boolean",
                "description": "All tickets in this step are displayed in the archive of the service list if\nthis option is set."
              },
              "Name": {
                "type": "string",
                "description": "Enter the name of the workflow step. This is the status description for the\nworkflow. Thus, if a workflow is found in this workflow step, this text is\ndisplayed as its status.",
                "maxLength": 250,
                "minLength": 1
              },
              "PermanentlyBinding": {
                "type": "boolean",
                "description": "To be texted by klaus.aengenvoort@etask.de"
              },
              "StartStep": {
                "type": "boolean",
                "description": "Indicate whether the workflow step is a first step of a workflow. This workflow\nstep can then be selected if the selected workflow does not yet have a workflow\nstep."
              },
              "SystemStep": {
                "type": "boolean",
                "description": "If the service step is a service step provided by the system, this information\nwill be displayed here. System service steps are only used internally in the\nFM-Portal and cannot be selected by the user."
              },
              "Code": {
                "type": "string",
                "description": "To be texted by klaus.aengenvoort@etask.de",
                "maxLength": 50,
                "nullable": true
              },
              "DisplayName": {
                "type": "string",
                "description": "To be texted by klaus.aengenvoort@etask.de",
                "maxLength": 250,
                "nullable": true
              },
              "Duration": {
                "type": "number",
                "description": "Determines the duration (in hours) which is available for this step.",
                "format": "decimal",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Workflow": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowBase"
          },
          {
            "type": "object",
            "description": "Cette liste contient tous les workflows disponibles dans le portail FM. Ici, un\nservice est fourni dans la liste des services.",
            "additionalProperties": false
          }
        ]
      },
      "WorkflowBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Active",
              "ApertureWorkflow",
              "Code",
              "Version",
              "WorkflowUid"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Entity": {
                "description": "Displays the webform which can be used to control the workflow.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EtaskEntity"
                  }
                ]
              },
              "MainWorkflow": {
                "description": "Select the higher level workflow.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Workflow"
                  }
                ]
              },
              "ServiceStep": {
                "description": "Select the start step of the present workflow.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WorkflowStep"
                  }
                ]
              },
              "UserGroup": {
                "description": "Select the administrator group in which the workflow administrators (service\nagents) for the current workflow will be managed. Service agents have more\naccess rights to tickets in the service list and workflows.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserGroup"
                  }
                ]
              },
              "Workflows": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Workflow"
                }
              },
              "WorkflowSteps": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/WorkflowStep"
                }
              },
              "Active": {
                "type": "boolean",
                "description": "Indicate whether the Service/Workflow is active in the service list."
              },
              "ApertureWorkflow": {
                "type": "boolean",
                "description": "Indicate whether the workflow in Service/Workflow is a workflow in Aperture\nVisual Web Solution (VWS). This ensures compatibility of the workflow with\nexisting VWS workflows."
              },
              "Code": {
                "type": "string",
                "description": "Displays the system name of the workflow used to identify it in FM-Portal's\nprogram code. Note: this code must not be modified otherwise it will not be\npossible to identify the workflow, and the workflow's ability to function will\nbe restricted.",
                "maxLength": 50,
                "minLength": 1
              },
              "Version": {
                "type": "integer",
                "description": "Specification of the workflow version.",
                "format": "int32"
              },
              "WorkflowUid": {
                "type": "string",
                "description": "WORKFLOW_UID",
                "format": "guid",
                "minLength": 1
              },
              "ServiceName": {
                "type": "string",
                "description": "Enter the name of the workflow / service. It will be used in the service list\nand the portal emails distributed by the workflow.",
                "maxLength": 50,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Door": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DoorBase"
          },
          {
            "type": "object",
            "description": "Use this webform to manage the doors in your building. Enter the available\ninformation as detailed as possible (e.g., room, door type, technical data). By\nselecting the room the door is built into, the door is connected to its key\ngroup and eventually to the key capable of opening the door.",
            "additionalProperties": false
          }
        ]
      },
      "DoorBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "DoNotPrintadoorlabel",
              "DoorSecuredByanalarm",
              "EscapeDoor",
              "PrintEmptyDoorlabel"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Asset": {
                "description": "The object data record assigned to this door is referenced here. The door thus\nbecomes an extension of the object.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Asset"
                  }
                ]
              },
              "BurglaryProtectionLevels": {
                "type": "integer",
                "description": "Select the burglary protection level.",
                "format": "int32",
                "nullable": true
              },
              "CardReaderType": {
                "type": "integer",
                "description": "If the door is equipped with an electronic card reader, select it here.",
                "format": "int32",
                "nullable": true
              },
              "ClimaticClasses": {
                "type": "integer",
                "description": "Select the climate class to define the optimal temperature in which the door can\nbe used.",
                "format": "int32",
                "nullable": true
              },
              "CylinderSizes": {
                "type": "integer",
                "description": "Select the possible cylinder’s overall length.",
                "format": "int32",
                "nullable": true
              },
              "DoorCaseType": {
                "type": "integer",
                "description": "Select a door frame type.",
                "format": "int32",
                "nullable": true
              },
              "DoorColors": {
                "type": "integer",
                "description": "Select the color of the door.",
                "format": "int32",
                "nullable": true
              },
              "DoorFunctions": {
                "type": "integer",
                "description": "Select the door function.",
                "format": "int32",
                "nullable": true
              },
              "DoorHandleType": {
                "type": "integer",
                "description": "Select the door handle type used for this door.",
                "format": "int32",
                "nullable": true
              },
              "DoorLeafType": {
                "type": "integer",
                "description": "Select a door leaf.",
                "format": "int32",
                "nullable": true
              },
              "DoorMaterials": {
                "type": "integer",
                "description": "Select the material which the door is made from.",
                "format": "int32",
                "nullable": true
              },
              "DoorType": {
                "type": "integer",
                "description": "Select the door type.",
                "format": "int32",
                "nullable": true
              },
              "FireResistanceGradings": {
                "type": "integer",
                "description": "Select the fire-resistance grading.",
                "format": "int32",
                "nullable": true
              },
              "LockingRegulations": {
                "type": "integer",
                "description": "Select the door’s closing sequence type.",
                "format": "int32",
                "nullable": true
              },
              "NoiseProtectionLevels": {
                "type": "integer",
                "description": "Select the noise protection level.",
                "format": "int32",
                "nullable": true
              },
              "OpeningDirections": {
                "type": "integer",
                "description": "Select the door handle.",
                "format": "int32",
                "nullable": true
              },
              "Room": {
                "description": "Select the room in which the door is installed.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Room"
                  }
                ]
              },
              "SmokeControlLevels": {
                "type": "integer",
                "description": "Select the smoke control class.",
                "format": "int32",
                "nullable": true
              },
              "DoNotPrintadoorlabel": {
                "type": "boolean",
                "description": "Check this box if you do not want to output a door label for this door"
              },
              "DoorSecuredByanalarm": {
                "type": "boolean",
                "description": "Indicate whether the door is secured by an alarm."
              },
              "EscapeDoor": {
                "type": "boolean",
                "description": "Indicate whether the door is an escape door (as per evacuation door)."
              },
              "PrintEmptyDoorlabel": {
                "type": "boolean",
                "description": "Check this box if you want to output the standard empty door label."
              },
              "AdditionalTextDoorlabel": {
                "type": "string",
                "description": "An additional text can be entered here which is used for the standard eTASK door\nlabels.",
                "maxLength": 50,
                "nullable": true
              },
              "Barcode": {
                "type": "string",
                "description": "Enter the barcode of the door on which it is attached. If simultaneously using\nthe eTASK.Inventory product (optional), a barcode can be assigned to each door\nwhich is physically associated with the door by a barcode sticker on the door\nframe. If the eTASK.Inventory product is not yet in use, do not enter anything\nin this field.",
                "maxLength": 10,
                "nullable": true
              },
              "CadOid": {
                "type": "string",
                "description": "OID",
                "maxLength": 18,
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "Displays the code automatically calculated from the room code and door number.\nThe code cannot be entered manually.",
                "maxLength": 50,
                "nullable": true
              },
              "Comment": {
                "type": "string",
                "description": "Enter comments or information about the door.",
                "maxLength": 4000,
                "nullable": true
              },
              "Cylinder": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "DoorClassNumber": {
                "type": "string",
                "description": "Enter the door class number.",
                "maxLength": 50,
                "nullable": true
              },
              "DoorLeafWidthmm": {
                "type": "string",
                "description": "Enter the door leaf width for double doors in the format 0.88 - 1.01.",
                "maxLength": 50,
                "nullable": true
              },
              "DoorNumber": {
                "type": "string",
                "description": "Enter the door number. The door number can be used to clearly define which key\nopens it. The door number also forms part of the door code.",
                "maxLength": 10,
                "nullable": true
              },
              "EquipmentNo": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 50,
                "nullable": true
              },
              "Heightm": {
                "type": "number",
                "description": "Enter the door height in meters (smallest opening).",
                "format": "decimal",
                "nullable": true
              },
              "Identification0": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 50,
                "nullable": true
              },
              "Identification01": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 50,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter a description for the door (e.g. \"Entrance door Main building\nSchillerstraße\").",
                "maxLength": 50,
                "nullable": true
              },
              "TextOnBarcode": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 25,
                "nullable": true
              },
              "Widthm": {
                "type": "number",
                "description": "Enter the door width in meters. The door width is calculated from the inside\ndistance between the two door frames (smallest opening dimension).",
                "format": "decimal",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Overtime": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OvertimeBase"
          },
          {
            "type": "object",
            "description": "Manage the overtime hours paid out to employees of your company.",
            "additionalProperties": false
          }
        ]
      },
      "OvertimeBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Employee": {
                "description": "Employee",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Employee"
                  }
                ]
              },
              "ApplicationDate": {
                "type": "string",
                "description": "Application date",
                "format": "date-time",
                "nullable": true
              },
              "Hours": {
                "type": "number",
                "description": "Hours",
                "format": "decimal",
                "nullable": true
              },
              "PayoutDate": {
                "type": "string",
                "description": "Date of payment",
                "format": "date-time",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "WeeklyWorkingTime": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WeeklyWorkingTimeBase"
          },
          {
            "type": "object",
            "description": "Create the weekly working time for an employee here. You can also specify how\nmuch leave the employee has per year.",
            "additionalProperties": false
          }
        ]
      },
      "WeeklyWorkingTimeBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Employee",
              "AnnualVacationDays",
              "NumberOfHours",
              "ValidFrom"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Employee": {
                "description": "Employee",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Employee"
                  }
                ]
              },
              "AnnualVacationDays": {
                "type": "number",
                "description": "Vacation days",
                "format": "decimal"
              },
              "NumberOfHours": {
                "type": "number",
                "description": "Hours per weeks",
                "format": "decimal"
              },
              "ValidFrom": {
                "type": "string",
                "description": "Valid from",
                "format": "date-time",
                "minLength": 1
              },
              "ValidTo": {
                "type": "string",
                "description": "Valid till",
                "format": "date-time",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Rooms": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectsBaseOfRoom"
          },
          {
            "type": "object",
            "description": "Collection of Room",
            "additionalProperties": false
          }
        ]
      },
      "BusinessObjectsBaseOfRoom": {
        "allOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Room"
            }
          },
          {
            "type": "object",
            "description": "Base class for the list of business objects. Every list of business objects must inherit from this class, whether directly or indirectly",
            "x-abstract": true,
            "additionalProperties": false,
            "properties": {
              "RecordCount": {
                "type": "integer",
                "description": "Gets the count records in database for current collection ob business objects.",
                "format": "int32"
              },
              "ItemCount": {
                "type": "integer",
                "description": "Gets the count of items in current collection of business obects.",
                "format": "int32"
              },
              "Page": {
                "type": "integer",
                "format": "int32"
              },
              "Limit": {
                "type": "integer",
                "format": "int32"
              },
              "Skip": {
                "type": "integer",
                "format": "int32"
              },
              "Paging": {
                "type": "boolean"
              },
              "ExpandProperties": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "SelectProperties": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "Floors": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectsBaseOfFloor"
          },
          {
            "type": "object",
            "description": "Collection of Floor",
            "additionalProperties": false
          }
        ]
      },
      "BusinessObjectsBaseOfFloor": {
        "allOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Floor"
            }
          },
          {
            "type": "object",
            "description": "Base class for the list of business objects. Every list of business objects must inherit from this class, whether directly or indirectly",
            "x-abstract": true,
            "additionalProperties": false,
            "properties": {
              "RecordCount": {
                "type": "integer",
                "description": "Gets the count records in database for current collection ob business objects.",
                "format": "int32"
              },
              "ItemCount": {
                "type": "integer",
                "description": "Gets the count of items in current collection of business obects.",
                "format": "int32"
              },
              "Page": {
                "type": "integer",
                "format": "int32"
              },
              "Limit": {
                "type": "integer",
                "format": "int32"
              },
              "Skip": {
                "type": "integer",
                "format": "int32"
              },
              "Paging": {
                "type": "boolean"
              },
              "ExpandProperties": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "SelectProperties": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "Buildings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectsBaseOfBuilding"
          },
          {
            "type": "object",
            "description": "Collection of Building",
            "additionalProperties": false
          }
        ]
      },
      "BusinessObjectsBaseOfBuilding": {
        "allOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Building"
            }
          },
          {
            "type": "object",
            "description": "Base class for the list of business objects. Every list of business objects must inherit from this class, whether directly or indirectly",
            "x-abstract": true,
            "additionalProperties": false,
            "properties": {
              "RecordCount": {
                "type": "integer",
                "description": "Gets the count records in database for current collection ob business objects.",
                "format": "int32"
              },
              "ItemCount": {
                "type": "integer",
                "description": "Gets the count of items in current collection of business obects.",
                "format": "int32"
              },
              "Page": {
                "type": "integer",
                "format": "int32"
              },
              "Limit": {
                "type": "integer",
                "format": "int32"
              },
              "Skip": {
                "type": "integer",
                "format": "int32"
              },
              "Paging": {
                "type": "boolean"
              },
              "ExpandProperties": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "SelectProperties": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "Sites": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectsBaseOfSite"
          },
          {
            "type": "object",
            "description": "Collection of Site",
            "additionalProperties": false
          }
        ]
      },
      "BusinessObjectsBaseOfSite": {
        "allOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Site"
            }
          },
          {
            "type": "object",
            "description": "Base class for the list of business objects. Every list of business objects must inherit from this class, whether directly or indirectly",
            "x-abstract": true,
            "additionalProperties": false,
            "properties": {
              "RecordCount": {
                "type": "integer",
                "description": "Gets the count records in database for current collection ob business objects.",
                "format": "int32"
              },
              "ItemCount": {
                "type": "integer",
                "description": "Gets the count of items in current collection of business obects.",
                "format": "int32"
              },
              "Page": {
                "type": "integer",
                "format": "int32"
              },
              "Limit": {
                "type": "integer",
                "format": "int32"
              },
              "Skip": {
                "type": "integer",
                "format": "int32"
              },
              "Paging": {
                "type": "boolean"
              },
              "ExpandProperties": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "SelectProperties": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "PersonBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Inactive",
              "Locked",
              "PasswordNeverExpires"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "CostCenterPrimary": {
                "description": "Select the cost center used to settle the costs of the employee's services.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              },
              "CostCenterSecondary": {
                "description": "Select a second cost center used to settle the costs of the employee's services.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              },
              "Department": {
                "type": "integer",
                "description": "Select the department in which the employee works.",
                "format": "int32",
                "nullable": true
              },
              "PersonType": {
                "type": "integer",
                "description": "Select the personnel type assigned to the employee.",
                "format": "int32",
                "nullable": true
              },
              "Salutation": {
                "description": "Select the form of address to be used for this employee.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Salutation"
                  }
                ]
              },
              "Site": {
                "description": "Displays the location in which the employee works.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Site"
                  }
                ]
              },
              "SourceOfPersonData": {
                "description": "Select the origin of the personnel data. \"SAP\" means that the personnel data is\nregularly updated via eTASK.PersonnelDataImport. This parameter influences the\npersonnel data import in general after each FM-Portal configuration. \"Local\"\nmeans that the personnel data is only managed in FM-Portal.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DataSourcesOfPersonData"
                  }
                ]
              },
              "Superior": {
                "description": "Selection of the employee's superior.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "WorkflowTicket": {
                "description": "-- SUMMARY MISSING --",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Ticket"
                  }
                ]
              },
              "Assets": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/Asset"
                }
              },
              "Inactive": {
                "type": "boolean",
                "description": "Indicate whether the employee is currently inactive."
              },
              "Locked": {
                "type": "boolean",
                "description": "If this check mark is set, the employee can no longer log on to the eTASK\nportal. Depending on the system configuration, the check mark can be set\nautomatically if the employee has logged on several times without success."
              },
              "PasswordNeverExpires": {
                "type": "boolean",
                "description": "Specify whether the employee's local password is to be permanently valid or\nwhether it runs according to the system configuration rules."
              },
              "BirthDate": {
                "type": "string",
                "description": "Select the employee's date of birth from the adjacent date picker.",
                "format": "date-time",
                "nullable": true
              },
              "DoorLabelText": {
                "type": "string",
                "description": "Here you can specify an additional text that can be printed on a door label in\naddition to the name.",
                "maxLength": 255,
                "nullable": true
              },
              "EMail": {
                "type": "string",
                "description": "Enter the employee's email address.",
                "maxLength": 96,
                "nullable": true
              },
              "FaxNumber": {
                "type": "string",
                "description": "Displays the fax number on which the employee can be reached during the day. To\nchange the number, set the required number to the first position further below\nin the \"Contact data\" information area.",
                "maxLength": 50,
                "nullable": true
              },
              "GivenName": {
                "type": "string",
                "description": "Enter the employee's first name.",
                "maxLength": 50,
                "nullable": true
              },
              "HiringDate": {
                "type": "string",
                "description": "Select the employee's employment start date.",
                "format": "date-time",
                "nullable": true
              },
              "LdapImportIdentifier": {
                "type": "string",
                "description": "This column is used for the adjustment during the LDAP import of a user.",
                "maxLength": 256,
                "nullable": true
              },
              "LeavingDate": {
                "type": "string",
                "description": "Select the employee's employment end date.",
                "format": "date-time",
                "nullable": true
              },
              "Location": {
                "type": "string",
                "description": "Enter the name of the city in which the staff member lives.",
                "maxLength": 150,
                "nullable": true
              },
              "LoginFailed": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "LoginName": {
                "type": "string",
                "description": "Enter the user name which the employee should use to log onto FM-Portal.",
                "maxLength": 50,
                "nullable": true
              },
              "MobileNumber": {
                "type": "string",
                "description": "Displays the mobile phone number on which the employee can be reached during the\nday. To change the number, set the required number to the first position further\nbelow in the \"Contact data\" information area.",
                "maxLength": 50,
                "nullable": true
              },
              "NumerOfFailedLoginAttempts": {
                "type": "integer",
                "description": "-- SUMMARY MISSING --",
                "format": "int32",
                "nullable": true
              },
              "Password": {
                "type": "string",
                "description": "Set an option which enables the password used by the employee to log onto\nFM-Portal to be kept or changed.",
                "maxLength": 255,
                "nullable": true
              },
              "PasswordExpiresOn": {
                "type": "string",
                "description": "This entry can be used to limit the validity of a password, regardless of your\nsystem configuration settings.",
                "format": "date-time",
                "nullable": true
              },
              "PersonnelNumberPrimary": {
                "type": "string",
                "description": "Enter the employee's personnel number.",
                "maxLength": 50,
                "nullable": true
              },
              "PersonnelNumberSecondary": {
                "type": "string",
                "description": "Enter the employee's CPID.",
                "maxLength": 50,
                "nullable": true
              },
              "PhoneNumber": {
                "type": "string",
                "description": "Displays the landline on which the employee can be reached during the day. To\nchange the number, set the required number to the first position further below\nin the \"Contact data\" information area.",
                "maxLength": 50,
                "nullable": true
              },
              "PhoneNumberPrivate": {
                "type": "string",
                "description": "Enter the staff member's private phone number.",
                "maxLength": 20,
                "nullable": true
              },
              "Pseudonym": {
                "type": "string",
                "description": "The employee's pseudonym can be entered here if, for example, he or she uses a\nstage name or is not recorded in the personnel database with his or her call\nname.",
                "maxLength": 100,
                "nullable": true
              },
              "Remark": {
                "type": "string",
                "description": "Enter a comment about the employee.",
                "maxLength": 255,
                "nullable": true
              },
              "SocialSecurityNumber": {
                "type": "string",
                "description": "Enter the employee's social security number.",
                "maxLength": 50,
                "nullable": true
              },
              "StreetAddress": {
                "type": "string",
                "description": "Enter the street address and street number of the staff member's home address.",
                "maxLength": 150,
                "nullable": true
              },
              "SurName": {
                "type": "string",
                "description": "Enter the employee's surname.",
                "maxLength": 50,
                "nullable": true
              },
              "Title": {
                "type": "string",
                "description": "Enter the employee's title (e.g., \"PhD\").",
                "maxLength": 50,
                "nullable": true
              },
              "ZipCode": {
                "type": "string",
                "description": "Enter the postal code of the staff member's home address.",
                "maxLength": 50,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Salutation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SalutationBase"
          },
          {
            "type": "object",
            "description": "This list contains all salutatory texts that can be defined as salutations for\nan employee in the \"Personnel\" form. These salutatory texts are already included\nin the delivery of eTASK.FM Portal.",
            "additionalProperties": false
          }
        ]
      },
      "SalutationBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "FormOfAddress": {
                "type": "string",
                "description": "Enter the address text (e.g., \"Mrs.\").",
                "maxLength": 50,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "DataSourcesOfPersonData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataSourcesOfPersonDataBase"
          },
          {
            "type": "object",
            "description": "Manage data origins using this form. Enter various sources of personnel data\nhere if they are imported by a third party system.",
            "additionalProperties": false
          }
        ]
      },
      "DataSourcesOfPersonDataBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "SourceName": {
                "type": "string",
                "maxLength": 50,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "Exception": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Message": {
            "type": "string",
            "nullable": true
          },
          "InnerException": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Exception"
              }
            ]
          },
          "StackTrace": {
            "type": "string",
            "nullable": true
          },
          "Source": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Substitute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubstituteBase"
          },
          {
            "type": "object",
            "description": "This form can be used to determine who can represent which person, in which\nperiod and with what authorization.",
            "additionalProperties": false
          }
        ]
      },
      "SubstituteBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Active",
              "DateFrom"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "SubstitutedPerson": {
                "description": "Selection of the person who is to be substituted within a workflow.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "SubstitutingPerson": {
                "description": "Selection of the person who is to take over the substitution.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "Active": {
                "type": "boolean",
                "description": "Specify here whether the substitution should be active or passive. In case of a\npassive substitution (no check mark) the substitute will additionally be able to\nsee and edit all your tickets in his service list under \"Observed Services\". If\nyou choose an active substitute, the substitute will receive the tickets at your\nplace and will find them under \"My Tasks\" in the service list. The represented\nperson will no longer receive these tickets."
              },
              "DateFrom": {
                "type": "string",
                "description": "Specify the date from which the substitute is allowed to process workflow\ntickets.",
                "format": "date-time",
                "minLength": 1
              },
              "DateTo": {
                "type": "string",
                "description": "Specify the time up to which the agent should be able to process tickets for\nyou. If you do not specify a date, the substitution is valid until further\nnotice.",
                "format": "date-time",
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              }
            }
          }
        ]
      },
      "EmployeeDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "description": "Mitarbeiter",
            "additionalProperties": false,
            "properties": {
              "SurName": {
                "type": "string",
                "readOnly": true,
                "description": "Nachname aus dem Personaldatensatz",
                "nullable": true
              },
              "GivenName": {
                "type": "string",
                "readOnly": true,
                "description": "Vorname aus dem Personaldatensatz",
                "nullable": true
              },
              "Email": {
                "type": "string",
                "readOnly": true,
                "description": "E-Mail aus dem Personaldatensatz",
                "nullable": true
              },
              "MaintainTimesheet": {
                "type": "boolean",
                "readOnly": true,
                "description": "Definiert ob der Mitarbeiter verpflichtet ist Leistungsnachweise anzulegen"
              },
              "WorkingTimeAccount": {
                "readOnly": true,
                "description": "Informationen über das aktuelle Stundenkonto des Mitarbeiters",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WorkingTimeAccount"
                  }
                ]
              },
              "PersonnelNumberPrimary": {
                "type": "string",
                "readOnly": true,
                "description": "Personalnummer aus dem Personaldatensatz",
                "nullable": true
              },
              "SocialSecurityNumber": {
                "type": "string",
                "readOnly": true,
                "description": "Sozialversicherungsnummer aus dem Personaldatensatz",
                "nullable": true
              },
              "StreetAddress": {
                "type": "string",
                "readOnly": true,
                "description": "Private Anschrift  aus dem Personaldatensatz",
                "nullable": true
              },
              "ZipCode": {
                "type": "string",
                "readOnly": true,
                "description": "Private Postleitzahl  aus dem Personaldatensatz",
                "nullable": true
              },
              "Location": {
                "type": "string",
                "readOnly": true,
                "description": "Privater Wohnort  aus dem Personaldatensatz",
                "nullable": true
              },
              "DateOfBirth": {
                "type": "string",
                "readOnly": true,
                "description": "Geburtsdatum  aus dem Personaldatensatz",
                "format": "date-time",
                "nullable": true
              },
              "Salutation": {
                "type": "string",
                "readOnly": true,
                "description": "Anrede aus dem Personaldatensatz",
                "nullable": true
              }
            }
          }
        ]
      },
      "DtoBase": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Guid"
        ],
        "properties": {
          "Guid": {
            "type": "string",
            "description": "global identifier (GUID/UUID)",
            "format": "guid"
          },
          "Links": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Hateoas"
              }
            ]
          },
          "HasDocumentsSection": {
            "type": "boolean"
          },
          "HasImagesSection": {
            "type": "boolean"
          }
        }
      },
      "Hateoas": {
        "type": "object",
        "description": "erzeugt an jedem Dto das das Interface IDto implementiert eine Liste mit Links",
        "additionalProperties": false,
        "properties": {
          "Self": {
            "description": "Self reference",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/HateoasEntity"
              }
            ]
          },
          "UploadDocument": {
            "description": "Upload document reference",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/HateoasEntity"
              }
            ]
          },
          "UploadImage": {
            "description": "Upload image reference",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/HateoasEntity"
              }
            ]
          },
          "Download": {
            "description": "Upload document or image reference (depends on dto type)",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/HateoasEntity"
              }
            ]
          },
          "Delete": {
            "description": "Delete reference",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/HateoasEntity"
              }
            ]
          }
        }
      },
      "HateoasEntity": {
        "type": "object",
        "description": "todo",
        "additionalProperties": false,
        "properties": {
          "href": {
            "type": "string",
            "description": "Each link should contain a target Internationalized Resource Identifiers (IRIs). This is represented by the href attribute.",
            "nullable": true
          },
          "rel": {
            "type": "string",
            "description": "The link relation type describes how the current context (source) is related to the target resource. This is represented by the rel attribute.",
            "nullable": true
          },
          "method": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TimesheetDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "description": "Leistungsnachweise",
            "additionalProperties": false,
            "required": [
              "Date",
              "PresenceLocation"
            ],
            "properties": {
              "Date": {
                "type": "string",
                "description": "Datum des Arbeitstages",
                "format": "date-time"
              },
              "CheckIn": {
                "type": "string",
                "readOnly": true,
                "description": "Uhrzeit des Beginns des Arbeitstages (format: HH:MM)",
                "format": "time-span"
              },
              "CheckOut": {
                "type": "string",
                "readOnly": true,
                "description": "Berechnete Uhrzeit des Endes des Arbeitstages (format: HH:MM)",
                "format": "time-span"
              },
              "TotalHours": {
                "type": "number",
                "readOnly": true,
                "description": "Berechnet Anzahl der geleisteten Stunden. Summe aller\nEinzelstunden einer Tätigkeitsbeschreibung",
                "format": "decimal"
              },
              "PresenceLocation": {
                "type": "string",
                "description": "Einsatz-/Arbeitsort (e.g. Büro)"
              }
            }
          }
        ]
      },
      "WorkDescriptionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "description": "Leistungsbeschreibung",
            "additionalProperties": false,
            "required": [
              "QmNumber",
              "InternalOrderNumber",
              "Description",
              "Hours"
            ],
            "properties": {
              "QmNumber": {
                "type": "string",
                "description": "QM Nummer",
                "minLength": 1
              },
              "InternalOrderNumber": {
                "type": "string",
                "description": "Eindeutiger Coder der internen Auftragsnummer (e.g. ENTW1810)",
                "minLength": 1
              },
              "Description": {
                "type": "string",
                "description": "Text der Leistungsbeschreibung, mindestens 6 Zeichen",
                "maxLength": 2000,
                "minLength": 6
              },
              "Hours": {
                "type": "number",
                "description": "Stunden der Leistungsbeschreibung, mindestens 0.25h und maximal 12h in viertelstunden Schritten",
                "format": "double",
                "maximum": 12.0,
                "minimum": 0.25
              },
              "QmCommentId": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiException": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Exception"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "ErrorCode": {
                "description": "Gets or sets the error code (HTTP status code)",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/HttpStatusCode"
                  }
                ]
              },
              "ErrorContent": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Exception"
                  }
                ]
              },
              "Source": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "HttpStatusCode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Continue",
          "SwitchingProtocols",
          "OK",
          "Created",
          "Accepted",
          "NonAuthoritativeInformation",
          "NoContent",
          "ResetContent",
          "PartialContent",
          "MultipleChoices",
          "Ambiguous",
          "MovedPermanently",
          "Moved",
          "Found",
          "Redirect",
          "SeeOther",
          "RedirectMethod",
          "NotModified",
          "UseProxy",
          "Unused",
          "TemporaryRedirect",
          "RedirectKeepVerb",
          "BadRequest",
          "Unauthorized",
          "PaymentRequired",
          "Forbidden",
          "NotFound",
          "MethodNotAllowed",
          "NotAcceptable",
          "ProxyAuthenticationRequired",
          "RequestTimeout",
          "Conflict",
          "Gone",
          "LengthRequired",
          "PreconditionFailed",
          "RequestEntityTooLarge",
          "RequestUriTooLong",
          "UnsupportedMediaType",
          "RequestedRangeNotSatisfiable",
          "ExpectationFailed",
          "UpgradeRequired",
          "InternalServerError",
          "NotImplemented",
          "BadGateway",
          "ServiceUnavailable",
          "GatewayTimeout",
          "HttpVersionNotSupported"
        ],
        "enum": [
          "Continue",
          "SwitchingProtocols",
          "OK",
          "Created",
          "Accepted",
          "NonAuthoritativeInformation",
          "NoContent",
          "ResetContent",
          "PartialContent",
          "MultipleChoices",
          "MultipleChoices",
          "MovedPermanently",
          "MovedPermanently",
          "Redirect",
          "Redirect",
          "SeeOther",
          "SeeOther",
          "NotModified",
          "UseProxy",
          "Unused",
          "TemporaryRedirect",
          "TemporaryRedirect",
          "BadRequest",
          "Unauthorized",
          "PaymentRequired",
          "Forbidden",
          "NotFound",
          "MethodNotAllowed",
          "NotAcceptable",
          "ProxyAuthenticationRequired",
          "RequestTimeout",
          "Conflict",
          "Gone",
          "LengthRequired",
          "PreconditionFailed",
          "RequestEntityTooLarge",
          "RequestUriTooLong",
          "UnsupportedMediaType",
          "RequestedRangeNotSatisfiable",
          "ExpectationFailed",
          "UpgradeRequired",
          "InternalServerError",
          "NotImplemented",
          "BadGateway",
          "ServiceUnavailable",
          "GatewayTimeout",
          "HttpVersionNotSupported"
        ]
      },
      "HttpError": {
        "allOf": [
          {
            "type": "object",
            "additionalProperties": {}
          },
          {
            "type": "object",
            "description": "Defines a serializable container for storing error information. This information is stored  as key/value pairs. The dictionary keys to look up standard error information are available on the HttpErrorKeys type.",
            "additionalProperties": false,
            "properties": {
              "Message": {
                "type": "string",
                "description": "Gets or sets the high-level, user-visible message explaining the cause of the error. Information carried in this field should be considered public in that it will go over the wire regardless of the IncludeErrorDetailPolicy. As a result care should be taken not to disclose sensitive information about the server or the application.",
                "nullable": true
              },
              "ModelState": {
                "description": "Gets the ModelState containing information about the errors that occurred during model binding.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/HttpError"
                  }
                ]
              },
              "MessageDetail": {
                "type": "string",
                "description": "Gets or sets a detailed description of the error intended for the developer to understand exactly what failed.",
                "nullable": true
              },
              "ExceptionMessage": {
                "type": "string",
                "description": "Gets or sets the message of the Exception if available.",
                "nullable": true
              },
              "ExceptionType": {
                "type": "string",
                "description": "Gets or sets the type of the Exception if available.",
                "nullable": true
              },
              "StackTrace": {
                "type": "string",
                "description": "Gets or sets the stack trace information associated with this instance if available.",
                "nullable": true
              },
              "InnerException": {
                "description": "Gets the inner Exception associated with this instance if available.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/HttpError"
                  }
                ]
              }
            }
          }
        ]
      },
      "OvertimeDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "description": "Überstunden",
            "additionalProperties": false,
            "required": [
              "Hours",
              "RequestDate"
            ],
            "properties": {
              "Hours": {
                "type": "integer",
                "readOnly": true,
                "description": "Anzahl der Überstunden die ausgezahlt werden sollen",
                "format": "int32"
              },
              "PaymentDate": {
                "type": "string",
                "readOnly": true,
                "description": "Auszahlungsdatum der Überstunden",
                "format": "date-time",
                "nullable": true
              },
              "RequestDate": {
                "type": "string",
                "readOnly": true,
                "description": "Antragsdatum",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "InternalOrderNumberDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "description": "Interne Auftragsnummer (EAN)",
            "additionalProperties": false,
            "required": [
              "Code",
              "Label"
            ],
            "properties": {
              "Code": {
                "type": "string",
                "description": "Eindeutiger Code der internen Auftragsnummer",
                "maxLength": 50,
                "minLength": 3
              },
              "Label": {
                "type": "string",
                "description": "Bezeichnung der internen Auftragsnummer",
                "maxLength": 100,
                "minLength": 10
              },
              "ApplicableFrom": {
                "type": "string",
                "description": "Definiert ab wann diese interne Auftragsnummer verwendet werden kann",
                "format": "date-time"
              },
              "ApplicableTill": {
                "type": "string",
                "description": "Definiert bist wann diese interne Auftragsnummer verwendet werden kann",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "PresenceLocationDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "description": "Einsatz/-Arbeitsort",
            "additionalProperties": false,
            "properties": {
              "Identification": {
                "type": "string",
                "description": "Bezeichnung des Einsatz-/Arbeitsorts",
                "maxLength": 255,
                "minLength": 3,
                "nullable": true
              }
            }
          }
        ]
      },
      "EmployeeAccessibilityDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Day": {
            "type": "string",
            "readOnly": true,
            "description": "Tag der Erreichbarkeit",
            "format": "date-time"
          },
          "PersonalUid": {
            "type": "string",
            "readOnly": true,
            "format": "guid"
          },
          "GivenName": {
            "type": "string",
            "readOnly": true,
            "description": "Vorname",
            "nullable": true
          },
          "SurName": {
            "type": "string",
            "readOnly": true,
            "description": "Nachname",
            "nullable": true
          },
          "Workplace": {
            "type": "string",
            "readOnly": true,
            "description": "Arbeitsort",
            "nullable": true
          },
          "PhoneNumber": {
            "type": "string",
            "readOnly": true,
            "description": "Telefonnummer",
            "nullable": true
          },
          "EMail": {
            "type": "string",
            "readOnly": true,
            "description": "Email Adresse",
            "nullable": true
          },
          "MobileNumber": {
            "type": "string",
            "readOnly": true,
            "description": "Handynummer",
            "nullable": true
          },
          "ComeTime": {
            "type": "string",
            "readOnly": true,
            "description": "Arbeitsbeginn",
            "nullable": true
          },
          "PresencePlace": {
            "type": "string",
            "readOnly": true,
            "description": "Einsatzort\n ",
            "nullable": true
          },
          "ReachablePersonally": {
            "type": "boolean",
            "readOnly": true,
            "description": "persönlich erreichbar"
          },
          "ReachableByPhone": {
            "type": "boolean",
            "readOnly": true,
            "description": "telefonisch erreichbar"
          },
          "ReachableByTeams": {
            "type": "boolean",
            "readOnly": true,
            "description": "mobil erreichbar"
          },
          "ReachableByEmail": {
            "type": "boolean",
            "readOnly": true,
            "description": "per Email erreichbar"
          },
          "ReachabilityColor": {
            "type": "string",
            "readOnly": true,
            "description": "Farbe für die Darstellung der Erreichbarkeit",
            "nullable": true
          },
          "IsHoliday": {
            "type": "boolean",
            "readOnly": true,
            "description": "ist Feiertag"
          },
          "IsWeekend": {
            "type": "boolean",
            "readOnly": true,
            "description": "ist Wochenende"
          },
          "IsLocalHoliday": {
            "type": "boolean",
            "readOnly": true,
            "description": "ist regionaler Feiertag"
          },
          "DayHoursShould": {
            "type": "number",
            "readOnly": true,
            "description": "Arbeitszeit (Stunden)",
            "format": "decimal"
          },
          "LeaveTime": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "PresencePlaceUntil": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          }
        }
      },
      "CustomDataTable": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Columns": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CustomColumn"
            }
          },
          "Rows": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CustomRow"
            }
          }
        }
      },
      "CustomColumn": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ColumnName": {
            "type": "string",
            "nullable": true
          },
          "DataType": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CustomRow": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Items": {
            "type": "array",
            "nullable": true,
            "items": {}
          }
        }
      },
      "OperationResult": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Vehicle": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VehicleBase"
          },
          {
            "type": "object",
            "description": "List all vehicles used in your company. You can create a wide variety of\ninformation about the vehicles. In addition to identification features, this\nincludes key vehicle data, information on the leasing contract, tyres and\ninsurance as well as booking information.",
            "additionalProperties": false,
            "properties": {
              "Images": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Images"
                  }
                ]
              },
              "Documents": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Documents"
                  }
                ]
              },
              "Annotations": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Annotations"
                  }
                ]
              }
            }
          }
        ]
      },
      "VehicleBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Amount",
              "Bookable",
              "BusinessCar",
              "PoolCar",
              "ShowInBookingoverview"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "CompanyAddress": {
                "description": "Taxpayer",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompanyAddress"
                  }
                ]
              },
              "ContractAssurance": {
                "type": "integer",
                "description": "Insurance Contract",
                "format": "int32",
                "nullable": true
              },
              "ContractLegal": {
                "type": "integer",
                "description": "Legal Protection Contract",
                "format": "int32",
                "nullable": true
              },
              "ContractProcurement": {
                "type": "integer",
                "description": "Purchase or Lease Contract",
                "format": "int32",
                "nullable": true
              },
              "ContractTankingCard": {
                "type": "integer",
                "description": "Fuel Card Contract",
                "format": "int32",
                "nullable": true
              },
              "CostCenterCar": {
                "description": "Cost Center",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CostCenter"
                  }
                ]
              },
              "FleetManagementVehicleAssetId": {
                "description": "-- SUMMARY MISSING --",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Asset"
                  }
                ]
              },
              "FpUsageType": {
                "type": "integer",
                "description": "Usage",
                "format": "int32",
                "nullable": true
              },
              "ParkingSpace": {
                "type": "integer",
                "description": "Parking Lot",
                "format": "int32",
                "nullable": true
              },
              "Person": {
                "description": "User",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  }
                ]
              },
              "Site": {
                "description": "Location",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Site"
                  }
                ]
              },
              "VehicleStatus": {
                "description": "Status",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/VehicleState"
                  }
                ]
              },
              "VehicleType": {
                "description": "Vehicle Type",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/VehicleType"
                  }
                ]
              },
              "Amount": {
                "type": "number",
                "description": "Amount [€]",
                "format": "decimal"
              },
              "Bookable": {
                "type": "boolean",
                "description": "Bookable"
              },
              "BusinessCar": {
                "type": "boolean",
                "description": "-- SUMMARY MISSING --"
              },
              "PoolCar": {
                "type": "boolean",
                "description": "-- SUMMARY MISSING --"
              },
              "ShowInBookingoverview": {
                "type": "boolean",
                "description": "Show in Booking Overview"
              },
              "AcceptedOn": {
                "type": "string",
                "description": "Accepted on",
                "format": "date-time",
                "nullable": true
              },
              "AnnualPremium": {
                "type": "number",
                "description": "Annual Premium [€]",
                "format": "decimal",
                "nullable": true
              },
              "AralSince": {
                "type": "string",
                "description": "Aral since",
                "maxLength": 50,
                "nullable": true
              },
              "Availability": {
                "type": "string",
                "description": "Availability",
                "maxLength": 50,
                "nullable": true
              },
              "ChangeToSummertyres": {
                "type": "string",
                "description": "Change to Summer Tyres",
                "format": "date-time",
                "nullable": true
              },
              "ChangeToWintertyres": {
                "type": "string",
                "description": "Change to Winter Tyres",
                "format": "date-time",
                "nullable": true
              },
              "ChipParkingspace": {
                "type": "string",
                "description": "Chip / Parking Space",
                "maxLength": 50,
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "Code",
                "maxLength": 50,
                "nullable": true
              },
              "Color": {
                "type": "string",
                "description": "Color",
                "maxLength": 50,
                "nullable": true
              },
              "CompleteLeaseRate": {
                "type": "number",
                "description": "Complete Lease Rate",
                "format": "decimal",
                "nullable": true
              },
              "ContractLeasing": {
                "type": "string",
                "description": "Contract No.",
                "maxLength": 50,
                "nullable": true
              },
              "CostCenter": {
                "type": "string",
                "description": "Cost Center",
                "maxLength": 50,
                "nullable": true
              },
              "CurrentCardNo": {
                "type": "string",
                "description": "Current Card No.",
                "maxLength": 50,
                "nullable": true
              },
              "CurrentCardNo1": {
                "type": "string",
                "description": "Current Card No.",
                "maxLength": 50,
                "nullable": true
              },
              "Deductible": {
                "type": "string",
                "description": "Deductible",
                "maxLength": 50,
                "nullable": true
              },
              "Due": {
                "type": "string",
                "description": "Due",
                "format": "date-time",
                "nullable": true
              },
              "EmissionsTest": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "FuelCardNo": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 50,
                "nullable": true
              },
              "GrossPurchasePrice": {
                "type": "number",
                "description": "Gross Purchase Price",
                "format": "decimal",
                "nullable": true
              },
              "HandoverOn": {
                "type": "string",
                "description": "Handover on",
                "format": "date-time",
                "nullable": true
              },
              "HandoverRemarks": {
                "type": "string",
                "description": "Handover Remarks",
                "maxLength": 50,
                "nullable": true
              },
              "IdentificationNo": {
                "type": "string",
                "description": "Identification No.",
                "maxLength": 50,
                "nullable": true
              },
              "InitialKilometers": {
                "type": "integer",
                "description": "Specification of the mileage of the vehicle at the time of transfer to the stock",
                "format": "int32",
                "nullable": true
              },
              "InitialRegistration": {
                "type": "string",
                "description": "Initial Registration",
                "format": "date-time",
                "nullable": true
              },
              "Inspection": {
                "type": "string",
                "description": "Inspection",
                "format": "date-time",
                "nullable": true
              },
              "KeyNoType": {
                "type": "string",
                "description": "Key No. Type",
                "maxLength": 50,
                "nullable": true
              },
              "LeaseRate": {
                "type": "number",
                "description": "Lease Rate",
                "format": "decimal",
                "nullable": true
              },
              "LeaseRateRemark": {
                "type": "string",
                "description": "Lease Rate Remark",
                "maxLength": 50,
                "nullable": true
              },
              "LeaseRateWithoutfuelcard": {
                "type": "number",
                "description": "Lease Rate without Fuel Card",
                "format": "decimal",
                "nullable": true
              },
              "LeasingCompany": {
                "type": "string",
                "description": "Leasing Company",
                "maxLength": 50,
                "nullable": true
              },
              "LicenseNo": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 50,
                "nullable": true
              },
              "LicenseNo1": {
                "type": "string",
                "description": "License No.",
                "maxLength": 50,
                "nullable": true
              },
              "LocationDetails": {
                "type": "string",
                "description": "Location Details",
                "maxLength": 50,
                "nullable": true
              },
              "Manufacturer": {
                "type": "string",
                "description": "Manufacturer",
                "maxLength": 50,
                "nullable": true
              },
              "ManufacturerSKeyNo": {
                "type": "string",
                "description": "Manufacturer's Key No.",
                "maxLength": 4,
                "nullable": true
              },
              "Mileage": {
                "type": "integer",
                "description": "Mileage",
                "format": "int32",
                "nullable": true
              },
              "Model": {
                "type": "string",
                "description": "Model",
                "maxLength": 50,
                "nullable": true
              },
              "NetPurchasePrice": {
                "type": "number",
                "description": "Net Purchase Price",
                "format": "decimal",
                "nullable": true
              },
              "OrderedOn": {
                "type": "string",
                "description": "Ordered on",
                "format": "date-time",
                "nullable": true
              },
              "OrganizationalPositionOfthestaffmember": {
                "type": "string",
                "description": "Organizational Position of the Staff Member",
                "maxLength": 50,
                "nullable": true
              },
              "Powerkw": {
                "type": "integer",
                "description": "Power [kW]",
                "format": "int32",
                "nullable": true
              },
              "PreviousCardNo": {
                "type": "string",
                "description": "Previous Card No.",
                "maxLength": 50,
                "nullable": true
              },
              "RemarkCar": {
                "type": "string",
                "description": "Remark",
                "maxLength": 4000,
                "nullable": true
              },
              "RemarkPrice": {
                "type": "string",
                "description": "Remark",
                "maxLength": 50,
                "nullable": true
              },
              "Remarks": {
                "type": "string",
                "description": "-- SUMMARY MISSING --",
                "maxLength": 4000,
                "nullable": true
              },
              "RemarkTankCard": {
                "type": "string",
                "description": "Remark",
                "maxLength": 50,
                "nullable": true
              },
              "ReturnedOn": {
                "type": "string",
                "description": "Returned on",
                "format": "date-time",
                "nullable": true
              },
              "Seats": {
                "type": "integer",
                "description": "Seats",
                "format": "int32",
                "nullable": true
              },
              "ShellSince": {
                "type": "string",
                "description": "Shell since",
                "maxLength": 50,
                "nullable": true
              },
              "StorageLocation": {
                "type": "string",
                "description": "Storage Location",
                "maxLength": 50,
                "nullable": true
              },
              "SummerSetOftyres": {
                "type": "integer",
                "description": "Summer Set of Tyres",
                "format": "int32",
                "nullable": true
              },
              "SummerTyreDimensions": {
                "type": "string",
                "description": "Summer Tyre Dimensions",
                "maxLength": 20,
                "nullable": true
              },
              "Taxpayer1": {
                "type": "string",
                "description": "Taxpayer",
                "maxLength": 50,
                "nullable": true
              },
              "TermFrom": {
                "type": "string",
                "description": "Term from",
                "format": "date-time",
                "nullable": true
              },
              "Termmonths": {
                "type": "integer",
                "description": "Term [Months]",
                "format": "int32",
                "nullable": true
              },
              "TermTo": {
                "type": "string",
                "description": "Term to",
                "format": "date-time",
                "nullable": true
              },
              "TypeOfUse": {
                "type": "string",
                "description": "Type of Use",
                "maxLength": 50,
                "nullable": true
              },
              "UsedThereof": {
                "type": "integer",
                "description": "Used thereof",
                "format": "int32",
                "nullable": true
              },
              "UsedThereof1": {
                "type": "integer",
                "description": "Used thereof",
                "format": "int32",
                "nullable": true
              },
              "WinterSetOftyres": {
                "type": "integer",
                "description": "Winter Set of Tyres",
                "format": "int32",
                "nullable": true
              },
              "WinterTyreDimensions": {
                "type": "string",
                "description": "Winter Tyre Dimensions",
                "maxLength": 20,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "VehicleState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VehicleStateBase"
          },
          {
            "type": "object",
            "description": "Use this form to manage the vehicle status that a vehicle can have. The data\nrecords entered here are then available for selection in the \"Vehicles\" form.",
            "additionalProperties": false
          }
        ]
      },
      "VehicleStateBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid",
              "Energetic"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Energetic": {
                "type": "boolean",
                "description": "Indicates whether the vehicle status is active and can be selected for a\nvehicle."
              },
              "Code": {
                "type": "string",
                "description": "Enter a freely selectable code for the vehicle status (e.g. \"DE\" for\n\"defective\").",
                "maxLength": 50,
                "nullable": true
              },
              "Delineation": {
                "type": "string",
                "description": "Enter a description of the vehicle status.",
                "maxLength": 255,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "VehicleType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VehicleTypeBase"
          },
          {
            "type": "object",
            "description": "Use this form to create data records for vehicle types in the system.",
            "additionalProperties": false
          }
        ]
      },
      "VehicleTypeBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BusinessObjectBase"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "required": [
              "Guid"
            ],
            "properties": {
              "Guid": {
                "type": "string",
                "description": "global identifier",
                "format": "guid",
                "minLength": 1
              },
              "Code": {
                "type": "string",
                "description": "Input of a freely selectable abbreviation for the vehicle type.",
                "maxLength": 10,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Enter the full name of the vehicle type.",
                "maxLength": 50,
                "nullable": true
              },
              "RecordCreated": {
                "type": "string",
                "readOnly": true,
                "description": "Creation date of this data record",
                "format": "date-time"
              },
              "RecordCreatedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who created the data record",
                "nullable": true
              },
              "RecordDeactivated": {
                "type": "boolean",
                "readOnly": true,
                "description": "Indicates if the data record is deactivated (invisible) or activated (visible)"
              },
              "RecordModified": {
                "type": "string",
                "readOnly": true,
                "description": "Date of last change to data record",
                "format": "date-time"
              },
              "RecordModifiedBy": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the user who last changed the data record",
                "nullable": true
              },
              "RecordModifiedFrom": {
                "type": "string",
                "readOnly": true,
                "description": "Name or IP adress of the computer used for last change to data record",
                "nullable": true
              },
              "RecordModifiedWith": {
                "type": "string",
                "readOnly": true,
                "description": "Name of the program used for last change to data record",
                "nullable": true
              },
              "RecordValidFrom": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              },
              "RecordValidTo": {
                "type": "string",
                "readOnly": true,
                "description": "-- SUMMARY MISSING --",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "TicketDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "TicketNumber": {
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "pattern": "[0-9]{3}.[0-9]{3}.[0-9]{3}.[0-9]{3}",
                "nullable": true
              },
              "Category": {
                "type": "string",
                "description": "Eindeutiger Code der Kategorie (e.g. ????)",
                "maxLength": 100,
                "minLength": 3,
                "nullable": true
              },
              "CategoryName": {
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "nullable": true
              },
              "SubCategory": {
                "type": "string",
                "description": "Eindeutiger Code der untergeordnetes Kategorie",
                "maxLength": 100,
                "minLength": 3,
                "nullable": true
              },
              "SubCategoryName": {
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "nullable": true
              },
              "Description": {
                "type": "string",
                "description": "Beschreibung des Problems",
                "maxLength": 4000,
                "minLength": 3,
                "nullable": true
              },
              "Building": {
                "type": "string",
                "description": "Eindeutiger Code des Gebäudes",
                "maxLength": 50,
                "minLength": 3,
                "nullable": true
              },
              "Room": {
                "type": "string",
                "description": "Eindeutiger Code des Raumes",
                "maxLength": 50,
                "minLength": 3,
                "nullable": true
              },
              "Requestor": {
                "type": "string",
                "description": "Antragsteller",
                "nullable": true
              },
              "ReportingDate": {
                "type": "string",
                "description": "Antragsdatum",
                "format": "date-time"
              },
              "DesiredDate": {
                "type": "string",
                "description": "Wunschdatum",
                "format": "date-time",
                "nullable": true
              },
              "Documents": {
                "type": "array",
                "description": "Liste der Dokumente am Ticket ohne Inhalt",
                "items": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              },
              "Images": {
                "type": "array",
                "description": "Liste der Bilder am Ticket ohne Inhalt",
                "items": {
                  "$ref": "#/components/schemas/ImageDto"
                }
              },
              "Annotaions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AnnotationDto"
                }
              },
              "Coordinates": {
                "description": "Koordinaten im Außenbereich",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/GeoCoordinateDto"
                  }
                ]
              }
            }
          }
        ]
      },
      "DocumentDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "ContentType": {
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "nullable": true
              },
              "Size": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "Name": {
                "type": "string",
                "maxLength": 100,
                "minLength": 1,
                "nullable": true
              }
            }
          }
        ]
      },
      "ImageDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "ContentType": {
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "nullable": true
              },
              "Size": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "Name": {
                "type": "string",
                "maxLength": 100,
                "minLength": 1,
                "nullable": true
              }
            }
          }
        ]
      },
      "AnnotationDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Recipients": {
                "type": "string",
                "nullable": true
              },
              "CcRecipients": {
                "type": "string",
                "nullable": true
              },
              "Date": {
                "type": "string",
                "format": "date-time"
              },
              "User": {
                "type": "string",
                "nullable": true
              },
              "Text": {
                "type": "string",
                "nullable": true
              },
              "Subject": {
                "type": "string",
                "nullable": true
              },
              "UserEmail": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "GeoCoordinateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Longitude": {
            "type": "number",
            "description": "Längengrad",
            "format": "decimal"
          },
          "Latitude": {
            "type": "number",
            "description": "Breitengrad",
            "format": "decimal"
          }
        }
      },
      "BuildingDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "Name",
              "Number",
              "City",
              "ZipCode",
              "StreetNumber",
              "CostCenter"
            ],
            "properties": {
              "Code": {
                "type": "string",
                "readOnly": true,
                "description": "Eindeutiger Code des Gebäudes (e.g. CGN)",
                "maxLength": 50,
                "minLength": 3,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Bezeichnung des Gebäudes",
                "maxLength": 50,
                "minLength": 3
              },
              "Number": {
                "type": "string",
                "description": "Nummer des Gebäudes",
                "maxLength": 10,
                "minLength": 3
              },
              "City": {
                "type": "string",
                "maxLength": 50,
                "minLength": 1
              },
              "ZipCode": {
                "type": "string",
                "maxLength": 10,
                "minLength": 1
              },
              "StreetNumber": {
                "type": "string",
                "maxLength": 10,
                "minLength": 1
              },
              "Street": {
                "type": "string",
                "maxLength": 50,
                "minLength": 1,
                "nullable": true
              },
              "CostCenter": {
                "type": "string",
                "maxLength": 50,
                "minLength": 1
              },
              "Site": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SiteDto"
                  }
                ]
              },
              "Coordinates": {
                "description": "Koordinaten des Gebäudes",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/GeoCoordinateDto"
                  }
                ]
              }
            }
          }
        ]
      },
      "SiteDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "City",
              "ZipCode",
              "Street",
              "Name"
            ],
            "properties": {
              "City": {
                "type": "string",
                "description": "Ort dieses Standortes",
                "maxLength": 50,
                "minLength": 3
              },
              "ZipCode": {
                "type": "string",
                "description": "Postleitzahl dieses Standortes",
                "maxLength": 10,
                "minLength": 3
              },
              "Street": {
                "type": "string",
                "description": "Anschrift dieses Standortes",
                "maxLength": 50,
                "minLength": 3
              },
              "Name": {
                "type": "string",
                "description": "Bezeichnung dieses Standortes",
                "maxLength": 50,
                "minLength": 3
              },
              "Code": {
                "type": "string",
                "readOnly": true,
                "description": "Code dieses Standortes",
                "maxLength": 50,
                "minLength": 3,
                "nullable": true
              }
            }
          }
        ]
      },
      "RoomDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "Number"
            ],
            "properties": {
              "Code": {
                "type": "string",
                "readOnly": true,
                "description": "Eindeutiger Code des Raumes (e.g. CGN-AKS2-EG00-R001)",
                "maxLength": 50,
                "minLength": 3,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Bezeichnung des Raumes",
                "maxLength": 4000,
                "nullable": true
              },
              "Number": {
                "type": "string",
                "description": "Eindeutige 'Nummer' des Raumes (e.g. R001)",
                "maxLength": 10,
                "minLength": 1
              },
              "TypeOfUsage": {
                "type": "string",
                "nullable": true
              },
              "Floor": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FloorDto"
                  }
                ]
              }
            }
          }
        ]
      },
      "FloorDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "Level",
              "Name"
            ],
            "properties": {
              "Level": {
                "type": "integer",
                "description": "Ebene der Etage",
                "format": "int32"
              },
              "Code": {
                "type": "string",
                "readOnly": true,
                "description": "Code der Etage",
                "maxLength": 50,
                "minLength": 3,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "Bezeichnung der Etage",
                "maxLength": 50,
                "minLength": 3
              },
              "Building": {
                "readOnly": true,
                "description": "übergeordnetes Gebäude dieser Etage",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BuildingDto"
                  }
                ]
              }
            }
          }
        ]
      },
      "CategoryDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "description": "Data Transfer Object for service ticket categories",
            "additionalProperties": false,
            "required": [
              "Code",
              "Name"
            ],
            "properties": {
              "Code": {
                "type": "string",
                "description": "Unique category code (e.g. '001_GA')\n            \nrequired\nbetween 3 and 100 characters",
                "maxLength": 100,
                "minLength": 3
              },
              "Name": {
                "type": "string",
                "description": "Category name\n            \nrequired\nbetween 3 and 200 characters",
                "maxLength": 200,
                "minLength": 3
              },
              "Description": {
                "type": "string",
                "description": "Description of the category, max. 4000 characters\n            \noptional",
                "maxLength": 4000,
                "nullable": true
              },
              "Color": {
                "type": "string",
                "readOnly": true,
                "description": "The current color of the category as hexadecimal RGB value (e.g.: #ff0000 for red), exactly 7 characters\n            \noptional, readonly",
                "maxLength": 7,
                "minLength": 7,
                "nullable": true
              },
              "Icon": {
                "type": "string",
                "readOnly": true,
                "description": "The current icon (byte[]/base64)\nput 'data:image/svg+xml;base64,' in front to display the icon in the browser,\nsee also: https://de.wikipedia.org/wiki/Data-URL\n\noptional, readonly",
                "format": "byte",
                "nullable": true
              }
            }
          }
        ]
      },
      "SubCategoryDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "Code",
              "Name"
            ],
            "properties": {
              "Code": {
                "type": "string",
                "description": "Eindeutiger Code der Unterkategorie (e.g. ????)",
                "maxLength": 100,
                "minLength": 3
              },
              "Name": {
                "type": "string",
                "description": "Bezeichnung der Unterkategorie",
                "maxLength": 200,
                "minLength": 3
              },
              "Category": {
                "type": "string",
                "readOnly": true,
                "maxLength": 100,
                "minLength": 3,
                "nullable": true
              }
            }
          }
        ]
      },
      "ImageSize": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Default",
          "Original",
          "Medium",
          "Small"
        ],
        "enum": [
          "Default",
          "Original",
          "Medium",
          "Small"
        ]
      },
      "Token": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "EtaskApiToken": {
            "type": "string",
            "description": "Token value",
            "nullable": true
          },
          "ExpirationTime": {
            "type": "string",
            "description": "Token expiration time",
            "format": "date-time"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "RefreshToken": {
            "type": "string",
            "description": "Token value",
            "nullable": true
          },
          "RefreshTokenExpirationTime": {
            "type": "string",
            "description": "Token expiration time",
            "format": "date-time"
          }
        }
      },
      "Subscriber": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Guid": {
            "type": "string",
            "format": "guid"
          },
          "CallbackUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "Event": {
            "$ref": "#/components/schemas/SubscriberEvent"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SubscriberEvent": {
        "type": "string",
        "description": "wie werden diese ermittelt die?\nSollen alle/keine erlaubt werden?",
        "x-enumNames": [
          "Event1",
          "Event2",
          "Event3",
          "Event4",
          "Event5"
        ],
        "enum": [
          "Event1",
          "Event2",
          "Event3",
          "Event4",
          "Event5"
        ]
      },
      "SubscribeParameter": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "callbackUrl",
          "name",
          "event"
        ],
        "properties": {
          "callbackUrl": {
            "type": "string",
            "format": "uri"
          },
          "name": {
            "type": "string"
          },
          "event": {
            "$ref": "#/components/schemas/SubscriberEvent"
          }
        }
      },
      "LogonUserDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "LoginName": {
                "type": "string",
                "nullable": true
              },
              "Email": {
                "type": "string",
                "format": "email",
                "nullable": true
              },
              "GivenName": {
                "type": "string",
                "nullable": true
              },
              "SurName": {
                "type": "string",
                "nullable": true
              },
              "Name": {
                "type": "string",
                "readOnly": true,
                "nullable": true
              },
              "Buildings": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/BuildingDto"
                }
              },
              "Rooms": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/RoomDto"
                }
              }
            }
          }
        ]
      },
      "ElementDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "description": "TODOJV",
            "additionalProperties": false,
            "properties": {
              "CustomDataTable": {
                "description": "TODO",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CustomDataTable"
                  }
                ]
              },
              "ElementProperties": {
                "type": "array",
                "description": "TODO",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ElementProperty"
                }
              },
              "Barcode": {
                "type": "string",
                "description": "TODOJV",
                "maxLength": 100,
                "minLength": 3,
                "nullable": true
              },
              "Code": {
                "type": "string",
                "description": "TODOJV",
                "maxLength": 50,
                "minLength": 3,
                "nullable": true
              },
              "Name": {
                "type": "string",
                "description": "TODOJV",
                "maxLength": 100,
                "minLength": 3,
                "nullable": true
              },
              "Description": {
                "type": "string",
                "description": "TODOJV",
                "maxLength": 100,
                "minLength": 3,
                "nullable": true
              },
              "Type": {
                "description": "TODO",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ElementType"
                  }
                ]
              },
              "HasAnnotationSection": {
                "type": "boolean",
                "description": "TODOJV"
              },
              "Documents": {
                "type": "array",
                "description": "Liste der Dokumente",
                "items": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              },
              "Images": {
                "type": "array",
                "description": "Liste der Bilder",
                "items": {
                  "$ref": "#/components/schemas/ImageDto"
                }
              },
              "Annotations": {
                "type": "array",
                "description": "Liste der Kommentare",
                "items": {
                  "$ref": "#/components/schemas/AnnotationDto"
                }
              }
            }
          }
        ]
      },
      "ElementProperty": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Type": {
            "type": "string",
            "description": "TODO",
            "nullable": true
          },
          "Category": {
            "type": "string",
            "description": "TODO",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "TODO",
            "nullable": true
          },
          "Value": {
            "description": "TODO",
            "nullable": true
          },
          "IsReadOnly": {
            "type": "boolean",
            "description": "TODO"
          }
        }
      },
      "ElementType": {
        "type": "string",
        "description": "TODOJV",
        "x-enumNames": [
          "Unknown",
          "Asset",
          "Room",
          "Floor",
          "Building",
          "Site"
        ],
        "enum": [
          "Unknown",
          "Asset",
          "Room",
          "Floor",
          "Building",
          "Site"
        ]
      },
      "UsageInfoDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DtoBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Url": {
                "type": "string",
                "description": "DienstUrl für den ",
                "nullable": true
              }
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "EtaskApiToken": {
        "type": "apiKey",
        "description": "eTASK.Api Token authentication",
        "name": "EtaskApiToken",
        "in": "header"
      },
      "Basic": {
        "type": "http",
        "description": "HTTP authentication",
        "scheme": "basic"
      }
    }
  },
  "security": [
    {
      "EtaskApiToken": []
    },
    {
      "Basic": []
    }
  ],
  "tags": [
    {
      "name": "Workplace.AllocationPersonnelToHseqFunctions",
      "description": "Here you assign employees to the HSE function they perform. This enables you to assign the employee in participant scheduling to a course in the area of the existing HSE function. If the HSE function is a basic function, all employees can participate in a training course in their area. An additional assignment of employees to the basic function is therefore not necessary, but may be useful for organizational purposes, since the employees actually hold the HSE function during the assignment."
    },
    {
      "name": "WorkflowEngine.Substitutes",
      "description": "This form can be used to determine who can represent which person, in which period and with what authorization."
    },
    {
      "name": "Hseq.Common",
      "description": "<p>Manage of data for Health, Safety, Environment and Quality</p>"
    },
    {
      "name": "Hseq.HseqFunctions",
      "description": "Use this form to create HSE functions or responsibilities (for example, \"first responder\" or \"waste manager\") and assign employees to these functions. You can also specify the intervals for the training courses based on the existing HSE function and define the HSE function as the basic function. The training courses belonging to the function are listed in the lower part of the form."
    },
    {
      "name": "FleetManagement.Vehicles",
      "description": "List all vehicles used in your company. You can create a wide variety of information about the vehicles. In addition to identification features, this includes key vehicle data, information on the leasing contract, tyres and insurance as well as booking information."
    },
    {
      "name": "FleetManagement.VehicleStates",
      "description": "Use this form to manage the vehicle status that a vehicle can have. The data records entered here are then available for selection in the \"Vehicles\" form."
    },
    {
      "name": "Core.Assets",
      "description": "In the eTASK.FM portal, all movable and immovable assets are referred to as \"objects\". There are many different objects that you can manage within the eTASK.FM portal."
    },
    {
      "name": "Core.MatchCodes",
      "description": "Vous pouvez utiliser ce formulaire pour saisir des objets dans des objets de catalogue (matchcodes) qui se produisent encore et encore."
    },
    {
      "name": "Core.ObjectTypes",
      "description": "Create object types here to determine objects more precisely. The object type is used to group different individual objects under a collective description and is required in the \"Matchcode\" form to identify an object."
    },
    {
      "name": "Core.Floors",
      "description": "Use this form to manage the floors of the buildings by first assigning the building in which the floor is located and then entering further information for identifying the floor (name, level, area, etc.). Then assign all rooms on the floor. If eTASK.CAD is also used, the floor plan is displayed in a new tab after clicking on the magnifying glass icon. In the \"CAD drawings\" area you can upload existing CAD plans of the floor on the project side."
    },
    {
      "name": "Core.Rooms",
      "description": "Manage data records for each individual room in the building to ensure complete space management. Only the room area entered here influences the areas of floors and buildings. Spatial data sets are the basis for many other components of the FM portal and other eTASK products. They are used, for example, to make room bookings or to assign employees and objects to them. First select the floor on which the room is located. Then assign a room number and the space usage of the room according to DIN 277 (or according to in-house standards) to each room. Add information on the settlement of space costs, the floor space of the room, and the number of work centers available in the room. Then assign the current reservation (work center and employee) to the room. Upload a photo of the room and manage information on the structural condition of the room (flooring, traffic load, etc.). Add one or more cost centers for the room and data to communication devices that are available in the room. Finally, you can create or view data records for objects in the room. When using eTASK.CAD, the room is displayed in the floor plan after clicking on the magnifying glass icon. When using eTASK Furniture, all furniture in the room is displayed or added. The same applies when using eTASK.equipment/IT for the IT devices in the room. If eTASK. defect management is connected, all construction defects found in the room are also displayed."
    },
    {
      "name": "Core.Login",
      "description": "Login into the eTASK Universal BIM API"
    },
    {
      "name": "Core.Buildings",
      "description": "Create data records for the various buildings in the organization. Enter information on the identification (assignment of a location and a building number and description) and address of the building as well as the building description. See at a glance how the current use of space (according to DIN 277) is distributed in the building. Assign the floors in the building. If you also use eTASK Maintenance, all maintenance contracts concluded with external or internal service providers for this building are displayed."
    },
    {
      "name": "Core.CompanyAddresses",
      "description": "Enter data records for all external companies with which the FM department cooperates. These data records are available in many places of the FM portal (e.g. to identify the contractor in eTASK Maintenance). Assign the company a type, a trade, address and communication details, and company employee data. Evaluate the company (adherence to delivery dates, price loyalty, etc.) to document the relationship of trust. Upload documents concerning this company. When using eTASK.CAD, the company's identification in CAD plans is also documented here. When using eTASK. contractor logon, the company's employees are registered who have temporary access to the building for work. If eTASK deficiency management is used, the construction projects in which the company is the client are assigned to the company."
    },
    {
      "name": "Core.CostCenters",
      "description": "Here you can create data records for cost centers in your company. The entered cost centers can be selected later in many places of the FM portal."
    },
    {
      "name": "Core.Sites",
      "description": "Create data records for the different locations of your organization. These locations represent locations of companies and branches and can be selected later, for example in forms for buildings, in order to clearly determine their location. The \"Locations\" form shows the buildings already assigned to the location. This assignment of buildings cannot be changed here, but only in the \"Buildings\" form. When using eTASK. open spaces, the list of all parking spaces at the location is also displayed."
    },
    {
      "name": "ProjectManagement.TimeRecording",
      "description": "Regulates all aspects that are currently to be made available for time recording via the EtaskEmployeeApp."
    },
    {
      "name": "Integration.Broker",
      "description": "Regulates all aspects that are currently to be made available for integration messaging system (eTASK messaging broker)."
    },
    {
      "name": "Services.Ticket",
      "description": "Regelt alle Aspekte eines ServiceTickets."
    },
    {
      "name": "Services.Report",
      "description": "Controls all aspects of a service report."
    },
    {
      "name": "Core.Files",
      "description": "alles zu dateien (Bilder oder sonstige Dokumente)"
    },
    {
      "name": "Core.Barcode",
      "description": "Everything that has to do with barcodes, from searching to generation (and display)"
    },
    {
      "name": "Core.SignalR",
      "description": "SignalR Kommunkation, dieser Pfad ist nur vorhanden damit eine Dokumentation möglich ist!",
      "externalDocs": {
        "description": "External Documentation",
        "url": "http://somewhere.net/externalDocumentation/index.html"
      }
    },
    {
      "name": "Core.Webhooks",
      "description": "so called 'Webhooks' ",
      "externalDocs": {
        "description": "External Documentation",
        "url": "http://somewhere.net/externalDocumentation/index.html"
      }
    },
    {
      "name": "eInvoice",
      "description": "<p>Increase company results with e-invoicing</p>"
    },
    {
      "name": "My",
      "description": "All information about the logged-in user"
    },
    {
      "name": "Core.Elements",
      "description": "TODOJV ElementsController"
    },
    {
      "name": "Client.Query",
      "description": "All aspects of initial use of any app"
    }
  ]
}